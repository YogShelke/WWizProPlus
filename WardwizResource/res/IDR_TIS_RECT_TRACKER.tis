include "IDR_TIS_SQLITE.tis";
var varInsertTemp;
var varTemp = 1;
var g_CurrentUserSelect;
  // rect tracker implementation. 

  function RectTracker() {
	var arrTemp = new Array(168);

	for(var temp in arrTemp)
	temp = 0;
		
    const DRAG_THRESHOLD = 3; // px
    const SEL_COLOR = color(0x3F,0xFF,0,0.5);
  
    const container = this;
        
    var ax, ay; // anchor point
    var cx, cy; // current point
    var dragging;
    
    function drawCover(gfx) {
      gfx.noLine()
         .fillColor(SEL_COLOR)
         .rectangle( ax, ay, cx - ax , cy - ay);
    }
    
    function max(a,b) { return a > b? a : b; }
    function min(a,b) { return a < b? a : b; }
    function abs(a)   { return a < 0? -a : a; }
    
    function clearSelection()
    {
      for( var el in container.$$([selected]) )
        el.@#selected = undefined;
    }
    
    function onCoverChanged()
    {
      var x1 = min(ax,cx), x2 = max(ax,cx); 
      var y1 = min(ay,cy), y2 = max(ay,cy);
      for( var child in container )
      {
		var ChildId = child.id; 
		ChildId = ChildId.toInteger();
	  	var (cx1,cy1,cx2,cy2) = child.box(#rect, #border, #parent);
        //child.@#selected = ( max(x1,cx1) < min(x2,cx2) && max(y1,cy1) < min(y2,cy2) )? true : undefined;		
		if(( max(x1,cx1) < min(x2,cx2) && max(y1,cy1) < min(y2,cy2) ))
		{
			//child.@#selected = true;
			arrTemp[ChildId] = 1;
		}
		else
		{
			//child.@#selected = undefined;
			arrTemp[ChildId] = 0;
		}
      }
    }    
        

    function onMouseMove(evt)  {
    
      if( !dragging ) {
          if( abs( ax - evt.x ) > DRAG_THRESHOLD || 
              abs( ay - evt.y ) > DRAG_THRESHOLD )  
          {
                dragging = true;
                cx = evt.x;
                cy = evt.y;
                container.paintForeground = drawCover;
                container.capture(true);
                container.refresh();
				return true;
          }
          return false;
      }
      else  { // dragging
          cx = evt.x;
          cy = evt.y;
          container.refresh();
          onCoverChanged();
          return true;
      }
    }
    
    function onMouseUp(evt) {
		if(!dragging)
		{
			for(var el in container.$$([selected]))
			{
				//view.msgbox(#information, ""+el.id);
			}

			container.capture(false);
			container.paintForeground = null;
			container.refresh();
			dragging = false;
			this.unsubscribe(".tracker");
			return;
		}

	  for(var el in container.$$([selected]))
		{   
			var varid = el.id.toInteger();
			if(arrTemp[varid] == 0)
				arrTemp[varid] = 1;
			else
				arrTemp[varid] = 0;
		}
		
		for( var child in container )	
		{
			var ChildId = child.id; 
			ChildId = ChildId.toInteger();
			if((arrTemp[ChildId] == 1 ))
			{
				child.@#selected = true;
			}
			else
			{
				child.@#selected = undefined;
			}
		}

		//Here take vales from Array and insert them into DB
		varTemp = 1;
		varInsertTemp = 0;
		for(var temp in arrTemp)
		{
			if(varTemp == 1)
			{
				varInsertTemp = temp;
			}
			else if(varTemp > 1 && varTemp <= 168)
			{
				varInsertTemp = varInsertTemp + ","+ temp;
			}
			varTemp++;
		}

		container.capture(false);
		container.paintForeground = null;
		container.refresh();
		dragging = false;
		this.unsubscribe(".tracker");
		
		var varDBPath;
		varDBPath = self.GetDBPath();	
		var DataBase = DB.open(varDBPath);
		DataBase.exec("delete from WWIZ_PC_TRACK_COMP_USAGE where FK_USERNAME = ?",g_CurrentUserSelect);
		DataBase.exec("insert into WWIZ_PC_TRACK_COMP_USAGE (TRACK_VALUE,CHECK_LIST_CAL,FK_USERNAME) values (?,1,?)",varInsertTemp,g_CurrentUserSelect);
		DataBase.close();
		self.SetRectTrackChange();
    }
    
    function onMouseDown(evt)  {
      if( evt.mainButton ) {
        ax = evt.x;
        ay = evt.y;
        //clearSelection();
        view.focus = this;
        this.subscribe("mousemove.tracker", onMouseMove);
        this.subscribe("mouseup.tracker", onMouseUp);
        return true;
      }
    }
    
    container.subscribe("mousedown", onMouseDown);
    
    function selection2clipboard()
    {
      var str = "";
      for(var el in container.$$([selected]))
         str += el.text + "\r\n"; 
      view.clipboard(#put, str );
      return true;
    }
    
    container.subscribe("keydown", function(evt)
    {
      stdout.println(evt.keyCode,Event.VK_C);
      if( evt.ctrlKey && (evt.keyCode == Event.VK_C) )
          return selection2clipboard();
    });
    
  }

  function InternetRectTracker() {
	var arrTemp = new Array(168);

	for(var temp in arrTemp)
	temp = 0;
		
    const DRAG_THRESHOLD = 3; // px
    const SEL_COLOR = color(0x3F,0xFF,0,0.5);
  
    const container = this;
        
    var ax, ay; // anchor point
    var cx, cy; // current point
    var dragging;
    
    function drawCover(gfx) {
      gfx.noLine()
         .fillColor(SEL_COLOR)
         .rectangle( ax, ay, cx - ax , cy - ay);
    }
    
    function max(a,b) { return a > b? a : b; }
    function min(a,b) { return a < b? a : b; }
    function abs(a)   { return a < 0? -a : a; }
    
    function clearSelection()
    {
      for( var el in container.$$([selected]) )
        el.@#selected = undefined;
    }
    
    function onCoverChanged()
    {
      var x1 = min(ax,cx), x2 = max(ax,cx); 
      var y1 = min(ay,cy), y2 = max(ay,cy);
      for( var child in container )
      {
		var ChildId = child.id; 
		ChildId = ChildId.toInteger();
	  	var (cx1,cy1,cx2,cy2) = child.box(#rect, #border, #parent);
        //child.@#selected = ( max(x1,cx1) < min(x2,cx2) && max(y1,cy1) < min(y2,cy2) )? true : undefined;		
		if(( max(x1,cx1) < min(x2,cx2) && max(y1,cy1) < min(y2,cy2) ))
		{
			//child.@#selected = true;
			arrTemp[ChildId] = 1;
		}
		else
		{
			//child.@#selected = undefined;
			arrTemp[ChildId] = 0;
		}
      }
    }    
        

    function onMouseMove(evt)  {

      if( !dragging ) {
          if( abs( ax - evt.x ) > DRAG_THRESHOLD || 
              abs( ay - evt.y ) > DRAG_THRESHOLD )  
          {
                dragging = true;
                cx = evt.x;
                cy = evt.y;
                container.paintForeground = drawCover;
                container.capture(true);
                container.refresh();
				return true;
          }
          return false;
      }
      else  { // dragging
          cx = evt.x;
          cy = evt.y;
          container.refresh();
          onCoverChanged();
          return true;
      }
    }
    
    function onMouseUp(evt) {
		if(!dragging)
		{
			for(var el in container.$$([selected]))
			{
				//view.msgbox(#information, ""+el.id);
			}

			container.capture(false);
			container.paintForeground = null;
			container.refresh();
			dragging = false;
			this.unsubscribe(".tracker");
			return;
		}

	  for(var el in container.$$([selected]))
		{   
			var varid = el.id.toInteger();
			if(arrTemp[varid] == 0)
				arrTemp[varid] = 1;
			else
				arrTemp[varid] = 0;
		}
		
		for( var child in container )	
		{
			var ChildId = child.id; 
			ChildId = ChildId.toInteger();
			if((arrTemp[ChildId] == 1 ))
			{
				child.@#selected = true;
			}
			else
			{
				child.@#selected = undefined;
			}
		}

		//Here take vales from Array and insert them into DB
		varTemp = 1;
		varInsertTemp = 0;
		for(var temp in arrTemp)
		{
			if(varTemp == 1)
			{
				varInsertTemp = temp;
			}
			else if(varTemp > 1 && varTemp <= 168)
			{
				varInsertTemp = varInsertTemp + ","+ temp;
			}
			varTemp++;
		}

		container.capture(false);
		container.paintForeground = null;
		container.refresh();
		dragging = false;
		this.unsubscribe(".tracker");
		
		var varDBPath;
		varDBPath = self.GetDBPath();	
		var DataBase = DB.open(varDBPath);
		DataBase.exec("delete from WWIZ_INTERNET_USAGE where FK_USERNAME = ?",g_CurrentUserSelect);
		DataBase.exec("insert into WWIZ_INTERNET_USAGE (TRACK_VALUE,CHECK_LIST_CAL,FK_USERNAME) values (?,1,?)",varInsertTemp, g_CurrentUserSelect);
		DataBase.close();
		self.SetRectTrackChangeForINet();
    }
    
    function onMouseDown(evt)  {
      if( evt.mainButton ) {
        ax = evt.x;
        ay = evt.y;
        //clearSelection();
        view.focus = this;
        this.subscribe("mousemove.tracker", onMouseMove);
        this.subscribe("mouseup.tracker", onMouseUp);
        return true;
      }
    }
    
    container.subscribe("mousedown", onMouseDown);
    
    function selection2clipboard()
    {
      var str = "";
      for(var el in container.$$([selected]))
         str += el.text + "\r\n"; 
      view.clipboard(#put, str );
      return true;
    }
    
    container.subscribe("keydown", function(evt)
    {
      stdout.println(evt.keyCode,Event.VK_C);
      if( evt.ctrlKey && (evt.keyCode == Event.VK_C) )
          return selection2clipboard();
    });
    
  }
  

