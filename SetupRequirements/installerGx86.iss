 ; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "WardWiz"
#define MyAppVersion "1.8.3.0"
#define MyAppPublisher "WardWiz"
#define MyAppURL "http://www.wardwiz.com/"
#define MyWardWizAppName "WardWiz"
#define AppVer ReadIni("D:\WardWizDevEPS_4.1\WWBinary.ini", "ProductVersion", "ProductVer", "0.0.0.0")

#define REDESTRIBUTABLES "vcredist_x86.exe"
#define ResIconReg "WardWiz.PATH.1.10.RES"
#define ResFileName "WRDWIZRESOURCE.DLL,-1156"

#define ExecuteExeRegEntrySecParam  "%1"
#define ExecuteExeRegEntryThirdParam "-DEC "

#define PPSECURE64 "WRDWIZREGPROT.SYS"
#define PPXPROC "WRDWIZXPPROC.SYS"
#define FPSCANNER "WRDWIZFILEPROT.SYS"
#define WRDWIZPFPATH "Program Files"


[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{078ABE62-583D-43e6-96D6-5D092883DC82}
AppName={#MyAppName}
AppVersion={#AppVer}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputDir=.\Output
OutputBaseFilename=installerGx86	
SetupIconFile=Logo\COMPANYLOGO.ICO
Compression=lzma2/ultra64
SolidCompression=true
;Varada Ikhar, Date:13th May-2015, Issue:000283: In control Panel the version no. should not be mentioned. It should be WardWiz Antivirus.
UninstallDisplayName={#MyWardWizAppName}
UninstallRestartComputer=false
UninstallDisplayIcon={app}\COMPANYLOGO.ICO
UsePreviousAppDir=yes
DisableProgramGroupPage=yes
WizardImageFile=SetupImages\setup_img.bmp
WizardSmallImageFile=SetupImages\logo.bmp
AllowCancelDuringInstall=yes
ShowLanguageDialog =no
UseSetupLdr =yes
VersionInfoVersion ={#AppVer}
AllowNetworkDrive =no
AllowUNCPath =no
AppendDefaultDirName =yes
DisableDirPage =yes
SetupLogging =yes



[Languages]
Name: english; MessagesFile: compiler:Default.isl; LicenseFile: Licence\Enligh-license.txt
Name: german; MessagesFile: compiler:Languages\German.isl; LicenseFile: Licence\German-license.txt
;Name: Spanish; MessagesFile: compiler:Languages\Spanish.isl; LicenseFile: Licence\Enligh-license.txt
;Name: French; MessagesFile: compiler:Languages\French.isl; LicenseFile: Licence\Enligh-license.txt
;Name: Chinese; MessagesFile: compiler:Languages\Chinese.isl; LicenseFile: Licence\Enligh-license.txt

[Messages]
SetupAppTitle=installerGx86
SetupWindowTitle=installerGx86 - %1

[CustomMessages]
CMWWAnotherInstanceRunning =Another instance of WardWiz Setup is already running.
english.CMWWAnotherInstanceRunning =Another instance of WardWiz Setup is already running.
german.CMWWAnotherInstanceRunning =Eine andere Ausführung des WardWiz-Setups läuft bereits.

CMWWPackgNotSupported =Installation package is not supported for this OS.  Please download WardWiz 64-bit setup
english.CMWWPackgNotSupported =Installation package is not supported for this OS.  Please download WardWiz 64-bit setup
german.CMWWPackgNotSupported =Installationspaket wird für dieses Betriebssystem unterstützt. Bitte laden Sie WardWiz 64-Bit Setup

CMWWServerEditionNotSupported =This program cannot be installed on servers.
english.CMWWServerEditionNotSupported =This program cannot be installed on servers.
german.CMWWServerEditionNotSupported =Dieses Programm kann nicht auf Windows Servern installiert werden

CMWWOSNotSupported =WardWiz recommends to upgrade your OS to a higher version, as Windows XP with Service Pack 3 is the minimum Windows version that meets the WardWiz System Requirements.
english.CMWWOSNotSupported =WardWiz recommends to upgrade your OS to a higher version, as Windows XP with Service Pack 3 is the minimum Windows version that meets the WardWiz System Requirements.
german.CMWWOSNotSupported =WardWiz empfiehlt ein Upgrade auf ein höheres Betriebssystem, da mindestens Windows XP mit Service Pack 3 benötigt wird, um WardWiz ausführen zu können.

[LangOptions]
DialogFontSize=8
WelcomeFontName=Verdana
WelcomeFontSize=12
TitleFontName=Arial
TitleFontSize=29
CopyrightFontName=Arial
CopyrightFontSize=8
RightToLeft=no


[Tasks]
;issue default desktop icon and quick launch icon should be enable  resolve by lalit kumawat 3-19-2015
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}
Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; OnlyBelowVersion: 0,6.1

[Dirs]
Name: {app}\LOG
Name: {commonappdata}\{#MyAppName}; attribs: hidden; Flags: uninsalwaysuninstall; Tasks: 
Name: {app}; Flags: uninsalwaysuninstall; Tasks: ; Languages: 
Name: {app}\QUARANTINE; Tasks: ; Languages: 

[Files]
Source: RequiredFiles\PROTECTION\32\{#FPSCANNER}; DestDir: {tmp}\DRIVERS; Flags: ignoreversion
Source: RequiredFiles\PROTECTION\32\{#PPSECURE64}; DestDir: {tmp}\DRIVERS; Flags: ignoreversion
Source: RequiredFiles\CPPRESTRIBUTABLES\{#REDESTRIBUTABLES}; Flags: dontcopy nocompression
Source: ..\Release\Win32\Binaries\WRDWIZSETUPDLL.DLL; DestDir: {tmp}\WRDWIZSETUPDLL;Flags:dontcopy
Source: ..\Release\Win32\Binaries\WRDWIZHEUSCN.DLL; DestDir: {tmp};Flags:dontcopy 
Source: ..\Release\Win32\Binaries\WRDWIZSCANDLL.DLL; DestDir: {tmp};Flags:dontcopy 
Source: ..\Release\Win32\Binaries\WRDWIZREPAIRDLL.DLL; DestDir: {tmp};Flags:dontcopy 
Source: ..\Release\Win32\Binaries\WRDWIZRKSCN.DLL; DestDir: {tmp};Flags:dontcopy 
Source: ..\Release\Win32\Binaries\WRDWIZRESOURCE.DLL; DestDir: {tmp};Flags:dontcopy 
Source: ..\Release\Win32\Binaries\WRDWIZHASH.DLL; DestDir: {tmp}; Flags:dontcopy
Source: ..\Release\Win32\Binaries\WRDWIZMD5SCN.DLL; DestDir: {tmp};Flags:dontcopy
Source: ..\Release\Win32\Binaries\WRDWIZPOLYSCN.DLL; DestDir: {tmp};Flags:dontcopy
Source: ..\Release\Win32\Binaries\WRDWIZREGISTERDATA.DLL; DestDir: {tmp};Flags:dontcopy
Source: ..\Release\Win32\Binaries\WRDWIZOFFLINEREG.DLL; DestDir: {tmp};Flags:dontcopy
Source: RequiredFiles\SCITERDLL\32\SCITER32.DLL; DestDir: {tmp}; Flags:dontcopy
Source: RequiredFiles\SQLITE\32\SQLITE3.DLL; DestDir: {tmp}; Flags:dontcopy
Source: RequiredFiles\SQLITE\32\SQLITE3_32.DLL; DestDir: {tmp}; Flags:dontcopy
Source: RequiredFiles\SQLITE\32\tiscript-sqlite.dll; DestDir: {tmp}; Flags:dontcopy
Source: RequiredFiles\EVALREGDLLS\x86\WRDWIZEVALREG.DLL; DestDir: {tmp};Flags:dontcopy
Source: RequiredFiles\SETUPDB\RLOC.DB; DestDir: {tmp}; Flags: dontcopy
Source: SETTINGS\BASICSETTING\PRODUCTSETTINGS.INI; DestDir: {tmp}\WRDSETTINGS;  Flags:dontcopy onlyifdoesntexist
Source: SETTINGS\EXEXT.INI; DestDir: {tmp}\WRDSETTINGS;Flags: ignoreversion overwritereadonly
Source: SETTINGS\UPDATESERVERS.INI;DestDir: {tmp}\WRDSETTINGS;  Flags:dontcopy  onlyifdoesntexist
Source: SETTINGS\ENGLISH.INI;DestDir: {tmp}\WRDSETTINGS;  Flags: dontcopy onlyifdoesntexist 
Source: SETTINGS\GERMAN.INI;DestDir: {tmp}\WRDSETTINGS;  Flags:dontcopy  onlyifdoesntexist 
Source: SETTINGS\ENGLISHTIPS.txt;DestDir: {tmp}\WRDSETTINGS; Flags:dontcopy ignoreversion 32bit overwritereadonly
Source: SETTINGS\GERMANTIPS.TXT;DestDir: {tmp}\WRDSETTINGS; Flags:dontcopy ignoreversion 32bit overwritereadonly
Source: Logo\COMPANYLOGO.ICO; DestDir: {tmp}; Flags:dontcopy  ignoreversion   overwritereadonly
Source: RequiredFiles\WRDWIZSECURITYNEWS\WRDWIZSECURITYNEWS.TXT; DestDir: {tmp}; Flags:dontcopy ignoreversion 
Source: RequiredFiles\BDS\Win32\*; DestDir: {tmp}; Flags: dontcopy ignoreversion recursesubdirs createallsubdirs overwritereadonly
Source: RequiredFiles\WRDWIZDB\*; DestDir: {tmp}\WRDWIZDATABASE; Flags:dontcopy ignoreversion recursesubdirs createallsubdirs  overwritereadonly
Source: RequiredFiles\BDSENGINEFILES\Win32\*; DestDir: {tmp}\PLUGINS; Flags: ignoreversion recursesubdirs createallsubdirs overwritereadonly      
Source: ..\Release\Win32\Binaries\WRDWIZINSTALLER.EXE; DestDir: {tmp};Flags:dontcopy
Source: Output\incompcheckx86.exe; DestDir: {tmp}; Flags:dontcopy 

[Code]
var
GetParenttempfolder,GetExplorerExePath,ExplorerExeName,Wrdwiz_Secure64,wrdwiz_scanner,GetWWIZFolder,GetWWIZDriverFolder,GetTempDriverFolder,GetWWizAppFolderPath,GetInstallerExePath,TempSetupExeName,FinalSetupExeName,GetWWizPLUGINSPath,GetWWizDBPath,Finaltemppath,Gettempfolder,GetProductVersion,ProdSettigsIni,GetTempFolderInstallerPath:String;
Resultcode:Integer;
Winhwnd:longint;
GetResult,CheckWRDWIZDBSucess:Boolean;

function SingleInstanceCheck(): Boolean;
external 'SingleInstanceCheck@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function SendTempPathNExtractFinishedFlag(const Gettempfolderpath:string):Boolean;
external 'SendTempPathNExtractFinishedFlag@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

procedure ExitProcess(exitCode:integer);
external 'ExitProcess@kernel32.dll cdecl setuponly';

function ProtectFolder(const ProtectFolerPath:String): integer;
external 'ProtectFolder@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function SendInstallerLocationPath(const GetInstallerSetupExepath:string):Boolean;
external 'SendInstallerLocationPath@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function StopInstallerFltDrivers(path:string): integer;
external 'StopInstallerFltDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function PauseProtectionDrivers(): integer;
external 'PauseProtectionDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function RemoveDriverService(): integer;
external 'RemoveDriverService@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function  InstallerDriverService(const ProtectTempFolerPath:String): integer;
external 'InstallerDriverService@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function StartDriverServiceLocal(): integer;
external 'StartDriverServiceLocal@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function StartFltDrivers(path:string): integer;
external 'StartFltDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function RegisterInstallerWithDrivers(): integer;
external 'RegisterInstallerthroughDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function RegisterInstallerthroughDrivers(): integer;
external 'RegisterInstallerthroughDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';
 
function PauseInstallerProtectionDrivers(const ProcessID:Integer): integer;
external 'PauseInstallerProtectionDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

Procedure DriverReg_Remover(RegKey: integer; SubkeyName: String);
    begin
    if RegKeyExists(RegKey, SubkeyName) then
   RegDeleteKeyIncludingSubkeys(RegKey ,SubkeyName);
  end;
  
function IsAppRunning(const FileName : string): Boolean;
var
    FSWbemLocator: Variant;
    FWMIService   : Variant;
    FWbemObjectSet: Variant;
begin
    Result := false;

    FSWbemLocator := CreateOleObject('WBEMScripting.SWBEMLocator');
    FWMIService := FSWbemLocator.ConnectServer('', 'root\CIMV2', '', '');
    FWbemObjectSet := FWMIService.ExecQuery(Format('SELECT Name FROM Win32_Process Where Name="%s"',[FileName]));
    Result := (FWbemObjectSet.Count > 0);

    FWbemObjectSet := Unassigned;
    FWMIService := Unassigned;
    FSWbemLocator := Unassigned;
end;

function GetUninstallerPath: string;
var
  RegKey: string;
begin
  Result := '';
  if IsWin64  then
  begin
    RegKey := Format('%s_is1', ['SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{{6F8638DF-98DF-4D11-85B0-7BB380EF03AB}']);
    RegKey := ExpandConstant(RegKey);
    if RegKeyExists(HKEY_LOCAL_MACHINE,RegKey) then
    begin
      if MsgBox( ExpandConstant('{cm:CMWWUninstallPrevVer}'),
      mbConfirmation, MB_YESNO) = IDYES then

    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, RegKey, 'UninstallString', Result) then
    RegQueryStringValue(HKEY_CURRENT_USER, RegKey, 'UninstallString', Result);

   end;
   end;
   if not IsWin64  then
    begin
    RegKey := Format('%s_is1', ['SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{{6F8638DF-98DF-4D11-85B0-7BB380EF03AB}']);
    RegKey := ExpandConstant(RegKey);
    if RegKeyExists(HKEY_LOCAL_MACHINE,RegKey) then
    begin
      if MsgBox( ExpandConstant('{cm:CMWWPrevVerInstalled}') ,
      mbConfirmation, MB_YESNO) = IDYES then

    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, RegKey, 'UninstallString', Result) then
    RegQueryStringValue(HKEY_CURRENT_USER, RegKey, 'UninstallString', Result);
     end ;
   end;
 end;

function InitializeSetup: Boolean;
var
  UninstPath: string;
  Version: TWindowsVersion;
begin
	if SingleInstanceCheck() then
	begin
		MsgBox( ExpandConstant('{cm:CMWWAnotherInstanceRunning}') , mbError, MB_OK);
		ExitProcess(0);
	end;
	
	if IsWin64 then
	begin
		MsgBox( ExpandConstant('{cm:CMWWPackgNotSupported}') , mbError, MB_OK);
		ExitProcess(0);
	end;

    // check for lower version of windows XP SP3 and windows server
  GetWindowsVersionEx(Version);
  if Version.ProductType = VER_NT_SERVER then
    begin
        MsgBox( ExpandConstant('{cm:CMWWServerEditionNotSupported}'), mbError, MB_OK);
        Result := False;
        Exit;
    end;
    if Version.NTPlatform and
       (Version.Major <= 5) and
       (Version.Minor < 1) and
       (Version.ServicePackMajor < 3) then
    begin
      MsgBox( ExpandConstant('{cm:CMWWOSNotSupported}'), mbError, MB_OK);
      Result := False;
      Exit;
    end;

	Result := True;
	UninstPath := RemoveQuotes(GetUninstallerPath);
	if UninstPath <> '' then
	begin
      begin
       Result := True;
       if not Exec(UninstPath, '', '', SW_SHOW, ewNoWait, ResultCode) then
          MsgBox(FmtMessage(SetupMessage(msgUninstallOpenError), [UninstPath]), mbError, MB_OK);
      end;
	end;
end;

procedure InitializeWizard;
begin
    CheckWRDWIZDBSucess:=false;
	ExtractTemporaryFiles('{tmp}\*.*');
    GetTempDriverFolder:=ExpandConstant('{tmp}\DRIVERS');
	GetWWIZFolder:=ExpandConstant('{sd}\')+ExpandConstant('{#WRDWIZPFPATH}')+'\WARDWIZ';
	GetWWIZDriverFolder:=ExpandConstant('{sd}\')+ExpandConstant('{#WRDWIZPFPATH}')+'\WARDWIZ\DRIVERS';
	GetWWizPLUGINSPath:=ExpandConstant('{sd}\')+ExpandConstant('{#WRDWIZPFPATH}')+'\WARDWIZ\PLUGINS';
	GetWWizDBPath:=ExpandConstant('{sd}\')+ExpandConstant('{#WRDWIZPFPATH}')+'\WARDWIZ\WRDWIZDATABASE';
	ForceDirectories(GetWWIZDriverFolder);
	ForceDirectories(GetWWizPLUGINSPath);
	ForceDirectories(GetWWizDBPath);
	Exec(ExpandConstant('{cmd}'),Format('/C xcopy  "%s" "%s" /O /X /E /H /K /Y ', [ExpandConstant('{tmp}\DRIVERS\*.*'),GetWWIZDriverFolder]),'', SW_HIDE, ewWaitUntilTerminated, ResultCode);
	Exec(ExpandConstant('{cmd}'),Format('/C RD /S /Q  *.* "%s"', [ExpandConstant(GetTempDriverFolder)]),'', SW_HIDE, ewWaitUntilTerminated, ResultCode);
	Exec(ExpandConstant('{cmd}'),Format('/C xcopy  "%s" "%s" /O /X /E /H /K /Y ', [ExpandConstant('{tmp}\PLUGINS\*.*'),GetWWizPLUGINSPath]),'', SW_HIDE, ewWaitUntilTerminated, ResultCode);
	Exec(ExpandConstant('{cmd}'),Format('/C xcopy  "%s" "%s" /O /X /E /H /K /Y ', [ExpandConstant('{tmp}\WRDWIZDATABASE\*.*'),GetWWizDBPath]),'', SW_HIDE, ewWaitUntilTerminated, ResultCode);
	RegQueryStringValue(HKLM,'SYSTEM\CurrentControlSet\Services\wrdwizscanner','ImagePath', wrdwiz_scanner);
	RegQueryStringValue(HKLM,'SYSTEM\CurrentControlSet\Services\WrdWizSecure64','ImagePath', Wrdwiz_Secure64);
	if((wrdwiz_scanner='\??\C:\Program Files\WARDWIZ\DRIVERS\WRDWIZFILEPROT.SYS')AND(Wrdwiz_Secure64='\??\C:\Program Files\WARDWIZ\DRIVERS\WRDWIZREGPROT.SYS'))then
	begin
				ProdSettigsIni:= ExpandConstant('{tmp}\WRDSETTINGS\PRODUCTSETTINGS.INI');
				GetProductVersion:=('{#SetupSetting("AppVersion")}');
				SetIniString('WRDSETTINGS','ProductVer',GetProductVersion,ProdSettigsIni);
				RegisterInstallerWithDrivers();
				Gettempfolder:=ExpandConstant('{tmp}');
				ProtectFolder(Gettempfolder);
				GetParenttempfolder:=ExpandConstant(ParamStr(0));
				ProtectFolder(GetParenttempfolder);
	end
	else
	begin	
				StopInstallerFltDrivers('wrdwizscanner');
				StopInstallerFltDrivers('wrdwizsecure64');
				DriverReg_Remover(HKEY_LOCAL_MACHINE,'SOFTWARE\Wardwiz');
				DriverReg_Remover(HKEY_LOCAL_MACHINE,'SYSTEM\CurrentControlSet\Services\wrdwizscanner');
				DriverReg_Remover(HKEY_LOCAL_MACHINE,'SYSTEM\CurrentControlSet\Services\wrdwizsecure64');
				ProdSettigsIni:= ExpandConstant('{tmp}\WRDSETTINGS\PRODUCTSETTINGS.INI');
				GetProductVersion:=('{#SetupSetting("AppVersion")}');
				SetIniString('WRDSETTINGS','ProductVer',GetProductVersion,ProdSettigsIni);
				InstallerDriverService(GetWWIZDriverFolder);   
				StartDriverServiceLocal();
				StartFltDrivers('wrdwizscanner');
				StartFltDrivers('wrdwizsecure64');
				RegisterInstallerWithDrivers();
				Gettempfolder:=ExpandConstant('{tmp}');
				ProtectFolder(Gettempfolder);
				GetParenttempfolder:=ExpandConstant(ParamStr(0));
				ProtectFolder(GetParenttempfolder);
	end;
	RegWriteDWordValue(HKEY_LOCAL_MACHINE, 'Software\Wardwiz', 'dwIsOffline', 0);
	GetTempFolderInstallerPath:=ExpandConstant('{tmp}\WRDWIZINSTALLER.EXE');
	ShellExec('',GetTempFolderInstallerPath,'', '', SW_SHOW, ewNoWait, ResultCode);
	SendTempPathNExtractFinishedFlag(Gettempfolder);
	GetInstallerExePath:=ExpandConstant('{src}');
	SendInstallerLocationPath(GetInstallerExePath);
  repeat
	ExplorerExeName:='explorer.exe';
	if not IsAppRunning(ExplorerExeName) then
	begin
	    GetExplorerExePath:=ExpandConstant('{win}\explorer.exe');
	    ShellExec('',GetExplorerExePath,'', '', SW_SHOW, ewNoWait, ResultCode);
	end;
	Winhwnd:=FindWindowByWindowName('WARDWIZINSTALLER');
	until Winhwnd=0;
	RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz', 'AppFolder', GetWWizAppFolderPath);
    if (DirExists(GetWWizAppFolderPath)) then
    begin 
			  PauseInstallerProtectionDrivers(17);
			 PauseInstallerProtectionDrivers(18);
			 PauseInstallerProtectionDrivers(19);
			 RegisterInstallerthroughDrivers();
			 ProtectFolder(GetWWIZFolder);
			 UnloadDLL(ExpandConstant('{tmp}\WRDWIZSETUPDLL.DLL'));
			 DeleteFile(ExpandConstant('{tmp}\WRDWIZSETUPDLL.DLL'));
			 UnloadDLL(ExpandConstant('{tmp}\SCITER32.DLL'));
			 DelayDeleteFile(ExpandConstant('{tmp}\SCITER32.DLL'), 2);
			 UnloadDLL(ExpandConstant('{tmp}\tiscript-sqlite.dll'));
			 DelayDeleteFile(ExpandConstant('{tmp}\tiscript-sqlite.dll'), 2);
			 DelTree(ExpandConstant('{tmp}'), True, True, True);
			 if FileExists(ExpandConstant('{tmp}\incompcheckx86.exe')) then
			 begin
				DelayDeleteFile(ExpandConstant('{tmp}\*.*'), 2);
				DelTree(ExpandConstant('{tmp}'), True, True, True);
			 end;
			 DelTree(ExpandConstant('{tmp}'), True, True, True);
			 ExitProcess(0);
    end
	else
	PauseProtectionDrivers();
	StopInstallerFltDrivers('wrdwizscanner');
	StopInstallerFltDrivers('wrdwizsecure64');
	RemoveDriverService();
	DriverReg_Remover(HKEY_LOCAL_MACHINE,'SYSTEM\CurrentControlSet\Services\wrdwizscanner');
	DriverReg_Remover(HKEY_LOCAL_MACHINE,'SYSTEM\CurrentControlSet\Services\wrdwizsecure64');
	Exec(ExpandConstant('{cmd}'),Format('/C RD /S /Q  *.* "%s"', [ExpandConstant(GetWWIZDriverFolder)]),'', SW_HIDE, ewWaitUntilTerminated, ResultCode);
	Exec(ExpandConstant('{cmd}'),Format('/C RD /S /Q  *.* "%s"', [ExpandConstant(GetWWizPLUGINSPath)]),'', SW_HIDE, ewWaitUntilTerminated, ResultCode);
	Exec(ExpandConstant('{cmd}'),Format('/C RD /S /Q  *.* "%s"', [ExpandConstant(GetWWizDBPath)]),'', SW_HIDE, ewWaitUntilTerminated, ResultCode);
	Exec(ExpandConstant('{cmd}'),Format('/C RD /S /Q  *.* "%s"', [ExpandConstant(GetWWIZFolder)]),'', SW_HIDE, ewWaitUntilTerminated, ResultCode);
	UnloadDLL(ExpandConstant('{tmp}\WRDWIZSETUPDLL.DLL'));
	DeleteFile(ExpandConstant('{tmp}\WRDWIZSETUPDLL.DLL'));
	DelTree(ExpandConstant('{tmp}'), True, True, True);
	UnloadDLL(ExpandConstant('{tmp}\SCITER32.DLL'));
	DelayDeleteFile(ExpandConstant('{tmp}\SCITER32.DLL'), 2);
	UnloadDLL(ExpandConstant('{tmp}\tiscript-sqlite.dll'));
	DelayDeleteFile(ExpandConstant('{tmp}\tiscript-sqlite.dll'), 2);
	Finaltemppath :=  GetEnv('TEMP');
		if FileExists(Finaltemppath+'\WWizDMNCIB.INI') then
	begin
	    DeleteFile(Finaltemppath+'\WWizDMNCIB.INI');
		DeleteFile(Finaltemppath+'\WardWizBasicSetupNCIx86.exe.ini');
		DeleteFile(Finaltemppath+'\WardWizBasicSetupNCIx86.exe_4_0.tmp');
		DeleteFile(Finaltemppath+'\WardWizBasicSetupNCIx86.exe_4_1.tmp');
		DeleteFile(Finaltemppath+'\WardWizBasicSetupNCIx86.exe_4_2.tmp');
		DeleteFile(Finaltemppath+'\WardWizBasicSetupNCIx86.exe_4_3.tmp');
    end 
    else if FileExists(Finaltemppath+'\WWizDMNCGB.INI') then
	begin
		DeleteFile(Finaltemppath+'\WWizDMNCGB.INI');
		DeleteFile(Finaltemppath+'\WardWizBasicSetupNCGx86.exe.ini');
		DeleteFile(Finaltemppath+'\WardWizBasicSetupNCGx86.exe_4_0.tmp');
		DeleteFile(Finaltemppath+'\WardWizBasicSetupNCGx86.exe_4_1.tmp');
		DeleteFile(Finaltemppath+'\WardWizBasicSetupNCGx86.exe_4_2.tmp');
		DeleteFile(Finaltemppath+'\WardWizBasicSetupNCGx86.exe_4_3.tmp');
    end 
    else if FileExists(Finaltemppath+'\WWizDMNCIEss.INI') then
	begin
        DeleteFile(Finaltemppath+'\WWizDMNCIEss.INI');
		DeleteFile(Finaltemppath+'\WardWizEssentialSetupNCIx86.exe.ini');
		DeleteFile(Finaltemppath+'\WardWizEssentialSetupNCIx86.exe_4_0.tmp');
		DeleteFile(Finaltemppath+'\WardWizEssentialSetupNCIx86.exe_4_1.tmp');
		DeleteFile(Finaltemppath+'\WardWizEssentialSetupNCIx86.exe_4_2.tmp');
		DeleteFile(Finaltemppath+'\WardWizEssentialSetupNCIx86.exe_4_3.tmp');
    end 
    else if FileExists(Finaltemppath+'\WWizDMNCGEss.INI') then
	begin
        DeleteFile(Finaltemppath+'\WWizDMNCGEss.INI');
		DeleteFile(Finaltemppath+'\WardWizEssentialSetupNCGx86.exe.ini');
		DeleteFile(Finaltemppath+'\WardWizEssentialSetupNCGx86.exe_4_0.tmp');
		DeleteFile(Finaltemppath+'\WardWizEssentialSetupNCGx86.exe_4_1.tmp');
		DeleteFile(Finaltemppath+'\WardWizEssentialSetupNCGx86.exe_4_2.tmp');
		DeleteFile(Finaltemppath+'\WardWizEssentialSetupNCGx86.exe_4_3.tmp');
    end 
    else if FileExists(Finaltemppath+'\WWizDMNCIEssPlus.INI') then
	begin
        DeleteFile(Finaltemppath+'\WWizDMNCIEssPlus.INI');
		DeleteFile(Finaltemppath+'\WardWizEssPlusSetupNCIx86.exe.ini');
		DeleteFile(Finaltemppath+'\WardWizEssPlusSetupNCIx86.exe_4_0.tmp');
		DeleteFile(Finaltemppath+'\WardWizEssPlusSetupNCIx86.exe_4_1.tmp');
		DeleteFile(Finaltemppath+'\WardWizEssPlusSetupNCIx86.exe_4_2.tmp');
		DeleteFile(Finaltemppath+'\WardWizEssPlusSetupNCIx86.exe_4_3.tmp');
    end 
    else if FileExists(Finaltemppath+'\WWizDMNCGEssPlus.INI') then
	begin
        DeleteFile(Finaltemppath+'\WWizDMNCGEssPlus.INI');
		DeleteFile(Finaltemppath+'\WardWizEssPlusSetupNCGx86.exe.ini');
		DeleteFile(Finaltemppath+'\WardWizEssPlusSetupNCGx86.exe_4_0.tmp');
		DeleteFile(Finaltemppath+'\WardWizEssPlusSetupNCGx86.exe_4_1.tmp');
		DeleteFile(Finaltemppath+'\WardWizEssPlusSetupNCGx86.exe_4_2.tmp');
		DeleteFile(Finaltemppath+'\WardWizEssPlusSetupNCGx86.exe_4_3.tmp');
    end 
    else if FileExists(Finaltemppath+'\WWizDMNCIPro.INI') then
	begin
        DeleteFile(Finaltemppath+'\WWizDMNCIPro.INI');
		DeleteFile(Finaltemppath+'\WardWizProSetupNCIx86.exe.ini');
		DeleteFile(Finaltemppath+'\WardWizProSetupNCIx86.exe_4_0.tmp');
		DeleteFile(Finaltemppath+'\WardWizProSetupNCIx86.exe_4_1.tmp');
		DeleteFile(Finaltemppath+'\WardWizProSetupNCIx86.exe_4_2.tmp');
		DeleteFile(Finaltemppath+'\WardWizProSetupNCIx86.exe_4_3.tmp');
    end 
    else if FileExists(Finaltemppath+'\WWizDMNCGPro.INI') then
	begin
       DeleteFile(Finaltemppath+'\WWizDMNCGPro.INI');
		DeleteFile(Finaltemppath+'\WardWizProSetupNCGx86.exe.ini');
		DeleteFile(Finaltemppath+'\WardWizProSetupNCGx86.exe_4_0.tmp');
		DeleteFile(Finaltemppath+'\WardWizProSetupNCGx86.exe_4_1.tmp');
		DeleteFile(Finaltemppath+'\WardWizProSetupNCGx86.exe_4_2.tmp');
		DeleteFile(Finaltemppath+'\WardWizProSetupNCGx86.exe_4_3.tmp');
    end;
    if FileExists(ExpandConstant('{tmp}\incompcheckx86.exe')) then
	begin
		DelayDeleteFile(ExpandConstant('{tmp}\*.*'), 2);
		DelTree(ExpandConstant('{tmp}'), True, True, True);
	end;
	ExitProcess(0);
end;



