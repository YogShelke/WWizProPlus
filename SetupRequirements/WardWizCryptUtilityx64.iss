; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "WardWiz Crypt Utility"
#define MyAppVersion "1.0"
#define MyAppPublisher "WardWiz"
#define MyAppURL "http://www.wardwiz.com"
#define MyAppExeName "WRDWIZCRYPT.EXE"
#define DataEncVer ReadIni("D:\WardWizDevRightHeur_1.11_Patches\WWBinary.ini", "DataEncVersion", "DataEncVer", "0.0")
#define REDESTRIBUTABLES "vcredist_x64.exe"
#define ResIconReg "WardWiz.PATH.1.10.RES"
#define ResFileName "CRYPTLOGO.ICO"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{5ABD0509-E5CE-4237-BFFD-6BA11E05AD7A}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
VersionInfoVersion ={#MyAppVersion}
DisableDirPage=yes
DefaultGroupName=WardWiz Crypt Utility
LicenseFile=D:\WardWizDevRightHeur\SetupRequirements\Licence\Enligh-license.txt
OutputBaseFilename=WardWizCryptSetupx64
SetupIconFile=D:\WardWizDevRightHeur\SetupRequirements\Logo\COMPANYLOGO.ico
Compression=lzma
DisableProgramGroupPage=yes
SolidCompression=yes
UsePreviousAppDir=no
ArchitecturesAllowed =x64
ArchitecturesInstallIn64BitMode=x64
SetupLogging =yes
UninstallDisplayIcon={app}\COMPANYLOGO.ICO
WizardImageFile=SetupImages\setup_img.bmp
WizardSmallImageFile=SetupImages\logo.bmp
AllowNetworkDrive =no
ShowLanguageDialog =yes

#define ExecuteExeRegEntryFirstParam  "C:\Program Files\WardWiz Antivirus\WRDWIZCRYPT.EXE"
#define ExecuteExeRegEntrySecParam  "%1"
#define ExecuteExeRegEntryThirdParam "-DEC "

[Languages]
Name: german; MessagesFile: compiler:Languages\German.isl; LicenseFile: Licence\Enligh-license.txt
Name: english; MessagesFile: compiler:Default.isl; LicenseFile: Licence\Enligh-license.txt

[LangOptions]
DialogFontSize=8
WelcomeFontName=Verdana
WelcomeFontSize=12
TitleFontName=Arial
TitleFontSize=29
CopyrightFontName=Arial
CopyrightFontSize=8
RightToLeft=no

[Tasks]
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked
Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Files]
Source: VCL Styles\VclStylesinno.dll; DestDir: {app}; Flags: overwritereadonly dontcopy
Source: VCL Styles\TurquoiseGray.vsf; DestDir: {app}; Flags: overwritereadonly dontcopy

Source: ..\Release\x64\Binaries\WRDWIZCRYPT.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: Logo\CRYPTLOGO.ico; DestDir: {app}; Flags: ignoreversion overwritereadonly 32bit
Source: Logo\COMPANYLOGO.ico; DestDir: {app}; Flags: ignoreversion overwritereadonly 32bit
Source: SETTINGS\CRYPTUTILSETTINGS\GERMAN.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion overwritereadonly
Source: SETTINGS\CRYPTUTILSETTINGS\ENGLISH.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion overwritereadonly
Source: SETTINGS\CRYPTUTILSETTINGS\ProductSettings.ini; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion overwritereadonly

[Icons]
Name: {group}\{#MyAppName}; Filename: {app}\{#MyAppExeName}
Name: {commondesktop}\{#MyAppName}; Filename: {app}\{#MyAppExeName}; Tasks: desktopicon
Name: {userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}; Filename: {app}\{#MyAppExeName}; Tasks: quicklaunchicon

[Run]
Filename: {app}\{#MyAppExeName}; Description: {cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}; Flags: nowait postinstall skipifsilent 32bit runascurrentuser

[Registry]
Root: HKLM; Subkey: SOFTWARE\WardwizCryptUtility; ValueType: string; ValueName: AppFolder; ValueData: {app}\; Flags: uninsdeletekey
Root: HKCR; Subkey: .WWIZ; ValueType: string; ValueName: ; ValueData: {#ResIconReg}; Flags: uninsdeletekey
Root: HKCR; Subkey: .*.WWIZ; ValueType: string; ValueName: ; ValueData: {#ResIconReg}; Flags: uninsdeletekey
Root: HKCR; Subkey: {#ResIconReg}\DefaultIcon; ValueType: string; ValueName: ; ValueData: {app}\{#ResFileName}; Flags: uninsdeletekey
Root: HKCR; Subkey: {#ResIconReg}\shell\open\command; ValueType: string; ValueName: ; ValueData: """{app}\{#MyAppExeName}""{#ExecuteExeRegEntryThirdParam}{#ExecuteExeRegEntrySecParam}"; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\WardwizCryptUtility; ValueType: dword; ValueName: dwCrKeepOrg; ValueData: 0; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\WardwizCryptUtility; ValueType: string; ValueName: DataEncVersion; ValueData: {#DataEncVer}; Flags: uninsdeletekey

[UninstallDelete]
Type: files; Name: {app}
Type: filesandordirs; Name: {app}\Log
Type: files; Name: {app}\*.*

[Dirs]
Name: {app}; Flags: uninsalwaysuninstall; Permissions: everyone-full
Name: {app}\LOG; Flags: uninsalwaysuninstall; Permissions: everyone-full
Name: {app}\WRDSETTINGS; Permissions: everyone-full; attribs: readonly

[CustomMessages]
english.CMWWAlreadyInstalled=Product is already install, Do you want to reinstall?
german.CMWWAlreadyInstalled=Produkt bereits installiert, möchten Sie neu installieren?
english.CMEncryptionPresent=To avoid conflicts, this utility can not be install along with WardWiz, if you want to use this feature, please continue with WardWiz.
german.CMEncryptionPresent=Um Konflikte zu vermeiden, kann dieses Dienstprogramm nicht zusammen mit WardWiz installiert werden. Wenn Sie diese Funktion nutzen möchten, wenden Sie sich bitte an WardWiz um fortzusetzen.
english.CMCloseAPP=An Instance of WardWiz Crypt Utility is already running. - Please close it and run the uninstall again.
german.CMCloseAPP=Eine Instanz von WardWiz Crypt-Dienstprogramm wird bereits ausgeführt. - Bitte schließen Sie es und führen Sie die Deinstallation erneut.

[Code]
const
  MF_BYCOMMAND = $00000000;
  MF_BYPOSITION = $00000400;
type
  HMENU = THandle;

function GetSystemMenu(hWnd: HWND; bRevert: BOOL): HMENU;
external 'GetSystemMenu@user32.dll stdcall';

function DeleteMenu(hMenu: HMENU; uPosition, uFlags: UINT): BOOL;
external 'DeleteMenu@user32.dll stdcall';

function GetMenuItemCount(hMenu: HMENU): Integer;
external 'GetMenuItemCount@user32.dll stdcall';

// Import the LoadVCLStyle function from VclStylesInno.DLL
procedure LoadVCLStyle(VClStyleFile: String); external 'LoadVCLStyleW@files:VclStylesInno.dll stdcall';

// Import the UnLoadVCLStyles function from VclStylesInno.DLL
procedure UnLoadVCLStyles; external 'UnLoadVCLStyles@files:VclStylesInno.dll stdcall';

procedure ExitProcess(exitCode:integer);
external 'ExitProcess@kernel32.dll cdecl setuponly';

/////////////////////////////////////////////////////////////////////
function IsAppRunning(const FileName : string): Boolean;
var
    FSWbemLocator: Variant;
    FWMIService   : Variant;
    FWbemObjectSet: Variant;
begin
    Result := false;

    FSWbemLocator := CreateOleObject('WBEMScripting.SWBEMLocator');
    FWMIService := FSWbemLocator.ConnectServer('', 'root\CIMV2', '', '');
    FWbemObjectSet := FWMIService.ExecQuery(Format('SELECT Name FROM Win32_Process Where Name="%s"',[FileName]));
    Result := (FWbemObjectSet.Count > 0);

    FWbemObjectSet := Unassigned;
    FWMIService := Unassigned;
    FSWbemLocator := Unassigned;
end;

/////////////////////////////////////////////////////////////////////
function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{{5ABD0509-E5CE-4237-BFFD-6BA11E05AD7A}_is1');
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;

/////////////////////////////////////////////////////////////////////

function IsWardWizEncryptionInstalled(): Boolean;
 var
 iProductID: Cardinal;
begin
   if RegQueryDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\WardWiz Antivirus', 'dwProductID', iProductID) then     begin
    if iProductID = 4 then begin
    Result := true;
    end;
  end;
end;

/////////////////////////////////////////////////////////////////////

function IsUpgrade(): Boolean;
begin
  Result := (GetUninstallString() <> '');
end;

/////////////////////////////////////////////////////////////////////
function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
begin
// Return Values:
// 1 - uninstall string is empty
// 2 - error executing the UnInstallString
// 3 - successfully executed the UnInstallString

  // default return value
  Result := 0;

  // get the uninstall string of the old app
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2;
  end else
    Result := 1;
end;


function InitializeSetup(): Boolean;
begin
  ExtractTemporaryFile('TurquoiseGray.vsf');
  LoadVCLStyle(ExpandConstant('{tmp}\TurquoiseGray.vsf'));
  Result := True;
end;

/////////////////////////////////////////////////////////////////////
procedure CurStepChanged(CurStep: TSetupStep);
  var
  iLangID:integer;
  ResultLan: String;
  strIniPath: String;

  begin
  if (CurStep=ssInstall) then
  begin
	if( IsWardWizEncryptionInstalled() ) then
	begin
		MsgBox(ExpandConstant('{cm:CMEncryptionPresent}'), mbConfirmation, MB_OK)
	    ExitProcess(0);
    end;
    if (IsUpgrade()) then
      begin
        if not( MsgBox(ExpandConstant('{cm:CMWWAlreadyInstalled}'), mbConfirmation, MB_YESNO) = IDYES ) then
        begin
          ExitProcess(0);
        end;
        UnInstallOldVersion();
      end;
   end;

  if (CurStep=ssPostInstall) then
  begin

   ResultLan := ExpandConstant('{language}');

   if ResultLan = 'german' then
   begin
		iLangID:= 2;
	end
   else
   begin
		iLangID:= 0;
   end;

	strIniPath:= ExpandConstant('{app}' + '\WRDSETTINGS\PRODUCTSETTINGS.INI' );
    SetIniString('WRDSETTINGS','LanguageID',IntToStr(iLangID), strIniPath);
  end;
end;

procedure DeinitializeSetup();
begin
  UnLoadVCLStyles;
end;

procedure InitializeWizard;
var
  SystemMenu: HMENU;
begin
  WizardForm.DirEdit.Enabled := false
  WizardForm.BackButton.Left := WizardForm.BackButton.Left -10;
  WizardForm.DirBrowseButton.Height := WizardForm.DirBrowseButton.Height -5;
  WizardForm.DirBrowseButton.Top := WizardForm.DirBrowseButton.Top +3;
  SystemMenu := GetSystemMenu(WizardForm.Handle, False);
  DeleteMenu(SystemMenu, 9999, MF_BYCOMMAND);
  DeleteMenu(SystemMenu, GetMenuItemCount(SystemMenu)-1, MF_BYPOSITION);
end;


function InitializeUninstall(): Boolean;
begin
  // check if application is running
  if IsAppRunning('WRDWIZCRYPT.EXE') then
  begin
    MsgBox(ExpandConstant('{cm:CMCloseAPP}'), mbError, MB_OK );
    Result := false;
  end
  else
    Result := true;
End;
