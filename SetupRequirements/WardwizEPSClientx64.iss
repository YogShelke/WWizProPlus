; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "WardWiz"
#define MyAppVersion "1.8.3.0"
#define MyAppPublisher "WardWiz"
#define MyAppURL "http://www.wardwiz.com/"
#define MyAppExeName "WRDWIZUI.EXE"
#define MyAppExeName1 "WRDWIZAUTORUNSCN.EXE"
#define MyAppExeName2 "WRDWIZTEMPCLR.EXE"
#define MyAppExeName3 "WRDWIZUSBVAC.EXE"
#define MyWardWizAppName "WardWiz"
#define MyUtility_1 "AUTORUN SCANNER"
#define MyUtility_2 "TEMPORARY FILE CLEANER"
#define MyUtility_3 "USB VACCINATOR"
#define Utility "Utilities"
#define AppVer ReadIni("D:\WardWizDevEPS_4.1\WWBinary.ini", "ProductVersion", "ProductVer", "0.0.0.0")
#define DataVer ReadIni("D:\WardWizDevEPS_4.1\WWBinary.ini", "DatabaseVersion", "DatabaseVer", "1.1.3.1")
#define DataEncVer ReadIni("D:\WardWizDevEPS_4.1\WWBinary.ini", "DataEncVersion", "DataEncVer", "0.0")
#define ScanEngVer ReadIni("D:\WardWizDevEPS_4.1\WWBinary.ini", "ScanEngineVersion", "ScanEngineVer", "2.5.1.0")
#define REDESTRIBUTABLES "vcredist_x64.exe"
#define ResIconReg "WardWiz.PATH.1.10.RES"
#define ResFileName "WRDWIZRESOURCE.DLL,-1156"

#define ExecuteExeRegEntrySecParam  "%1"
#define ExecuteExeRegEntryThirdParam "-DEC "
#define SupportNo "1800-266-1229"
#define SupportNumberClam ReadIni("D:\WardWizDevEPS_4.1\WWBinary.ini", "SupportNo", "SupportNumberClam", "1800-266-1229")
#define SupportNumberNC ReadIni("D:\WardWizDevEPS_4.1\WWBinary.ini", "SupportNo", "SupportNumberNC", "")

#define PPSECURE64 "WRDWIZREGPROT.SYS"
#define PPXPROC "WRDWIZXPPROC.SYS"
#define FPSCANNER "WRDWIZFILEPROT.SYS"


[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{078ABE62-583D-43e6-96D6-5D092883DC82}
AppName={#MyAppName}
AppVersion={#AppVer}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputDir=.\Output
OutputBaseFilename=WARDWIZEPSCLIENTX64
SetupIconFile=Logo\COMPANYLOGO.ICO
Compression=lzma2/ultra64
SolidCompression=true
;Varada Ikhar, Date:13th May-2015, Issue:000283: In control Panel the version no. should not be mentioned. It should be WardWiz Antivirus.
UninstallDisplayName={#MyWardWizAppName}
UninstallRestartComputer=false
UninstallDisplayIcon={app}\COMPANYLOGO.ICO
UsePreviousAppDir=yes
DisableProgramGroupPage=yes
WizardImageFile=SetupImages\setup_img.bmp
WizardSmallImageFile=SetupImages\logo.bmp
AllowCancelDuringInstall=yes
ShowLanguageDialog =yes
ArchitecturesAllowed =x64
ArchitecturesInstallIn64BitMode=x64
UseSetupLdr =yes
VersionInfoVersion ={#AppVer}
AllowNetworkDrive = no
AllowUNCPath = no
AppendDefaultDirName = yes
DisableDirPage = yes
SetupLogging = yes



[Languages]
Name: english; MessagesFile: compiler:Default.isl; LicenseFile: Licence\Enligh-license.txt
Name: german; MessagesFile: compiler:Languages\German.isl; LicenseFile: Licence\German-license.txt
;Name: Spanish; MessagesFile: compiler:Languages\Spanish.isl; LicenseFile: Licence\Enligh-license.txt
;Name: French; MessagesFile: compiler:Languages\French.isl; LicenseFile: Licence\Enligh-license.txt
;Name: Chinese; MessagesFile: compiler:Languages\Chinese.isl; LicenseFile: Licence\Enligh-license.txt

[CustomMessages]
CMWWInstallRedistriFailed =Installation of C++ Redestributables failed. Exit code:
english.CMWWInstallRedistriFailed=Installation of C++ Redestributables failed. Exit code:
german.CMWWInstallRedistriFailed=Einbau von C ++ Redestributables fehlgeschlagen. Exit-Code:

CMWWAlreadyInstalled1 =WardWiz is already installed at
english.CMWWAlreadyInstalled1 =WardWiz is already installed at
german.CMWWAlreadyInstalled1 =WardWiz wurde bereits installiert auf

CMWWAlreadyInstalled2 =Please uninstall it from previous path to continue setup installation.
english.CMWWAlreadyInstalled2 =Please uninstall it from previous path to continue setup installation.
german.CMWWAlreadyInstalled2 =Bitte deinstallieren Sie es mit dem vorherigen Pfad um mit der Setup-Installation fortzufahren.

CMWWCloseAllWWApp =Please close all running WardWiz application(s) for reinstallation
english.CMWWCloseAllWWApp =Please close all running WardWiz application(s) for reinstallation
german.CMWWCloseAllWWApp =Bitte schließen Sie alle laufenden WardWiz Anwendung(en) um die Neuinstallation durchführen zu können.

CMWWDeleteQuarantineFolder =Do you want to delete the quarantine folder?
english.CMWWDeleteQuarantineFolder =Do you want to delete the quarantine folder?
german.CMWWDeleteQuarantineFolder =Wollen Sie den Quarantäne-Ordner löschen ?

CMWWRemoveSuccess=WardWiz was successfully removed from your computer. //just in case (should be equal to English)
english.CMWWRemoveSuccess=WardWiz was successfully removed from your computer.
german.CMWWRemoveSuccess=WardWiz wurde erfolgreich von Ihrem Computer entfernt.

CMWWRestartReq =To complete the uninstallation of WardWiz, your computer must be restarted. Would you like to restart now? //just in case (should be equal to English)
english.CMWWRestartReq=To complete the uninstallation of WardWiz, your computer must be restarted. Would you like to restart now?
german.CMWWRestartReq=Ihr Computer muss neu gestartet werden, um die Deinstallation vonWardWiz abzuschließen. Möchten Sie jetzt neu starten ?

CMWWUninstallPrevVer =Do you want to uninstall previous version?
english.CMWWUninstallPrevVer =Do you want to uninstall previous version?
german.CMWWUninstallPrevVer =Wollen Sie die vorherige Version deinstallieren ?

CMWWPrevVerInstalled =Previous version of WardWiz is already installed, Do you want to uninstall previous version?
english.CMWWPrevVerInstalled =Previous version of WardWiz is already installed, Do you want to uninstall previous version?
german.CMWWPrevVerInstalled =Die vorherige Version von WardWiz ist bereits installiert. Wollen Sie die vorherige Version deinstallieren?

CMWWAnotherInstanceRunning =Another instance of WardWiz Setup is already running.
english.CMWWAnotherInstanceRunning =Another instance of WardWiz Setup is already running.
german.CMWWAnotherInstanceRunning =Eine andere Ausführung des WardWiz-Setups läuft bereits.

CMWWPackgNotSupported =Installation package is not supported for this OS.  Please download WardWiz 32-bit setup
english.CMWWPackgNotSupported =Installation package is not supported for this OS.  Please download WardWiz 32-bit setup
german.CMWWPackgNotSupported =Die Installation wird von diesem Betriebssystem nicht unterstützt. Bitte laden Sie die WardWiz 32-Bit Setup-Datei herunter.

CMWWRemoveAll =Are you sure you want to completely remove WardWiz and all of its components?
english.CMWWRemoveAll =Are you sure you want to completely remove WardWiz and all of its components?
german.CMWWRemoveAll =Sind Sie sicher, dass Sie WardWiz und alle damit verbundenen Komponenten vollständig entfernen möchten?

CMWWCloseAllForUninstall =Please close all running WardWiz application(s) and try again for uninstallation
english.CMWWCloseAllForUninstall =Please close all running WardWiz application(s) and try again for uninstallation
german.CMWWCloseAllForUninstall =Bitte schließen Sie alle laufenden WardWiz Anwendungen und versuchen Sie die Deinstallation erneut.

CMWWStringConstAddFailed =Failed to install setup. Please try again.
english.CMWWStringConstAddFailed =Failed to install setup. Please try again.
german.CMWWStringConstAddFailed =Setup-Installation fehlgeschlagen. Bitte versuchen Sie es erneut.

CMWWInstallStatusMSG =Installing WardWiz...
english.CMWWInstallStatusMSG =Installing WardWiz...
german.CMWWInstallStatusMSG =WardWiz wird installiert...

CMWWServerEditionNotSupported =This program cannot be installed on servers.
english.CMWWServerEditionNotSupported =This program cannot be installed on servers.
german.CMWWServerEditionNotSupported =Dieses Programm kann nicht auf Windows Servern installiert werden

CMWWOSNotSupported =WardWiz recommends to upgrade your OS to a higher version, as Windows XP with Service Pack 3 is the minimum Windows version that meets the WardWiz System Requirements.
english.CMWWOSNotSupported =WardWiz recommends to upgrade your OS to a higher version, as Windows XP with Service Pack 3 is the minimum Windows version that meets the WardWiz System Requirements.
german.CMWWOSNotSupported =WardWiz empfiehlt ein Upgrade auf ein höheres Betriebssystem, da mindestens Windows XP mit Service Pack 3 benötigt wird, um WardWiz ausführen zu können.

CM_0_WWSetupDllAppRunningUnInstall =Some of the applications of WardWiz are running. Do you want close in order to continue Uninstallation?
english.CM_0_WWSetupDllAppRunningUnInstall =Some of the applications of WardWiz are running. Do you want close in order to continue Uninstallation?
german.CM_0_WWSetupDllAppRunningUnInstall =Einige WardWiz-Anwendungen laufen gerade. Möchten Sie diese schließen, um die Deinstallation fortsetzen?

CM_1_WWSetupDllAppRunningReInstall =Some of the applications of WardWiz are running. Do you want close in order to continue Re-Installation?
english.CM_1_WWSetupDllAppRunningReInstall =Some of the applications of WardWiz are running. Do you want close in order to continue Re-Installation?
german.CM_1_WWSetupDllAppRunningReInstall =Einige WardWiz-Anwendungen laufen gerade. Möchten Sie diese schließen, um die Re-installation fortsetzen?

CM_2_WWSetupDllOutlookCloseInstall =Outlook application needs to be closed before installing WardWiz. Please close and click on retry button.
english.CM_2_WWSetupDllOutlookCloseInstall =Outlook application needs to be closed before installing WardWiz. Please close and click on retry button.
german.CM_2_WWSetupDllOutlookCloseInstall =Outlook-Anwendung muss vor der Installation von WardWiz geschlossen werden. Bitte schließen Sie die Anwendung und klicken Sie auf "Wiederholen".

CM_3_WWSetupDllOutlookCloseUnInstall =Outlook application needs to be closed before uninstalling WardWiz. Please close and click on retry button.
english.CM_3_WWSetupDllOutlookCloseUnInstall =Outlook application needs to be closed before uninstalling WardWiz. Please close and click on retry button.
german.CM_3_WWSetupDllOutlookCloseUnInstall =Outlook-Anwendung muss vor der Deinstallation WardWiz geschlossen werden. Bitte schließen Sie die Anwendung und klicken Sie auf "Wiederholen".

CM_4_WWSetupDllInstallPatches =WardWiz is running. Do you want to close WardWiz to install patches?
english.CM_4_WWSetupDllInstallPatches =WardWiz is running. Do you want to close WardWiz to install patches?
german.CM_4_WWSetupDllInstallPatches =WardWiz läuft. Möchten Sie WardWiz schließen, um Patches zu installieren ?

CM_5_WWSetupDllClose =WardWiz is running. Do you want to close?
english.CM_5_WWSetupDllClose =WardWiz is running. Do you want to close?
german.CM_5_WWSetupDllClose =WardWiz läuft. Möchten Sie schließen?

CM_6_WWSetupDllUnInstallContinue =Currently the %s version is installed on your machine. Please uninstall it to continue.
english.CM_6_WWSetupDllUnInstallContinue  =Currently the %s version is installed on your machine. Please uninstall it to continue.
german.CM_6_WWSetupDllUnInstallContinue  =Derzeit ist die %s Version auf Ihrem Rechner installiert. Bitte deinstallieren Sie diese, um fortfahren zu können.

CM_7_WWSetupDllLatestInstalled  =Latest version of WardWiz is already installed.
english.CM_7_WWSetupDllLatestInstalled  =Latest version of WardWiz is already installed.
german.CM_7_WWSetupDllLatestInstalled  =Neueste Version von WardWiz ist bereits installiert.

CM_8_WWSetupDllLatestInstalled  =WardWiz is already installed. Do you want to reinstall?
english.CM_8_WWSetupDllLatestInstalled  =WardWiz is already installed. Do you want to reinstall?
german.CM_8_WWSetupDllLatestInstalled  =WardWiz ist bereits installiert. Möchten Sie trotzdem neu installieren ?

CM_9_WWSetupDllCustomMsgBoxButtonYes  =Yes
english.CM_9_WWSetupDllCustomMsgBoxButtonYes =Yes
german.CM_9_WWSetupDllCustomMsgBoxButtonYes =Ja

CM_10_WWSetupDllCustomMsgBoxButtonYesToAll  =Yes to All
english.CM_10_WWSetupDllCustomMsgBoxButtonYesToAll =Yes to All
german.CM_10_WWSetupDllCustomMsgBoxButtonYesToAll =Ja zu allem

CM_11_WWSetupDllCustomMsgBoxButtonNo  =No
english.CM_11_WWSetupDllCustomMsgBoxButtonNo =No
german.CM_11_WWSetupDllCustomMsgBoxButtonNo =Nein

CM_12_WWSetupDllCustomMsgBoxButtonNoToAll  =No to All
english.CM_12_WWSetupDllCustomMsgBoxButtonNoToAll =No to All
german.CM_12_WWSetupDllCustomMsgBoxButtonNoToAll =Nein zu allem

CM_13_WWSetupDllCustomMsgBoxButtonCancel  =Cancel
english.CM_13_WWSetupDllCustomMsgBoxButtonCancel =Cancel
german.CM_13_WWSetupDllCustomMsgBoxButtonCancel =Abbrechen

[LangOptions]
DialogFontSize=8
WelcomeFontName=Verdana
WelcomeFontSize=12
TitleFontName=Arial
TitleFontSize=29
CopyrightFontName=Arial
CopyrightFontSize=8
RightToLeft=no

[Tasks]
;issue default desktop icon and quick launch icon should be enable  resolve by lalit kumawat 3-19-2015
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}
Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; OnlyBelowVersion: 0,6.1

[Dirs]
Name: {app}\LOG
Name: {commonappdata}\{#MyAppName}; attribs: hidden; Flags: uninsalwaysuninstall; Tasks: 
Name: {app}; Flags: uninsalwaysuninstall; Tasks: ; Languages: 
Name: {app}\QUARANTINE; Tasks: ; Languages: 

[Files]

Source: RequiredFiles\PROTECTION\64\{#FPSCANNER}; DestDir: {app}\DRIVERS; Flags: ignoreversion
Source: RequiredFiles\PROTECTION\64\{#PPSECURE64}; DestDir: {app}\DRIVERS; Flags: ignoreversion
;Source: RequiredFiles\PROTECTION\32\{#PPXPROC}; DestDir: {app}\DRIVERS; Flags: ignoreversion
Source: RequiredFiles\DRIVERS\WFP\AMD64\WRDWIZFLT.SYS; DestDir: {win}\System32\DRIVERS; Flags: ignoreversion 64bit

Source: RequiredFiles\CPPRESTRIBUTABLES\{#REDESTRIBUTABLES}; Flags: dontcopy nocompression
Source: VCL Styles\VclStylesinno.dll; DestDir: {app}; Flags: dontcopy overwritereadonly
Source: VCL Styles\TurquoiseGray.vsf; DestDir: {app}; Flags: dontcopy overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZUI.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZUSBDETECTUI.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZCOMMSRV.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZTRAY.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\Win32\Binaries\WRDWIZSETUPDLL.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZUSBDETECT.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZSCANDLL.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZINDEX.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZREPAIRDLL.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZREGISTRATION.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZREGISTERDATA.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZRKSCN.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZRESOURCE.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZCLOSEALL.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZALUSRV.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZHASH.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZEXTRACT.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
;Source: ..\Release\x64\Binaries\WRDCRASHSENDER.EXE; DestDir: {app}; Flags: ignoreversion
;Source: ..\Release\x64\Binaries\WRDWIZCRASHRPT.DLL; DestDir: {app}; Flags: ignoreversion
Source: ..\Release\x64\Binaries\WRDWIZSHELLEXT.DLL; DestDir: {app}; Flags: ignoreversion regserver noregerror  overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZUNINST.exe; DestDir: {app}; Flags: ignoreversion
Source: ..\Release\x64\Binaries\WARDWIZUNINSTCON.EXE; DestDir: {app}; Flags: ignoreversion
Source: ..\Release\x64\Binaries\WRDWIZHEUSCN.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZAUTORUNSCN.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZTEMPCLR.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZUSBVAC.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZUTILITY.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZCRYPT.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZOFFLINEREG.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZBOOTSCN.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZUPDATE.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZRESCUEDISK.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: SETTINGS\ELITESETTING\WardWizClient\PRODUCTSETTINGS.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion overwritereadonly
Source: SETTINGS\CHINESE.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion overwritereadonly
Source: SETTINGS\ENGLISH.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion overwritereadonly
Source: SETTINGS\FRENCH.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion overwritereadonly
Source: SETTINGS\GERMAN.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion overwritereadonly
Source: SETTINGS\HINDI.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion  overwritereadonly
Source: SETTINGS\SPANISH.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion  overwritereadonly
Source: SETTINGS\ENGLISHTIPS.txt; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion 32bit overwritereadonly
Source: SETTINGS\HINDITIPS.txt; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion 32bit overwritereadonly
Source: SETTINGS\CHINESETIPS.TXT; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion 32bit overwritereadonly
Source: SETTINGS\FRENCHTIPS.TXT; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion 32bit overwritereadonly
Source: SETTINGS\GERMANTIPS.TXT; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion 32bit overwritereadonly
Source: SETTINGS\SPANISHTIPS.TXT; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion 32bit overwritereadonly
Source: Logo\COMPANYLOGO.ICO; DestDir: {app}; Flags: ignoreversion   overwritereadonly
Source: RequiredFiles\EVALREGDLLS\x64\WRDWIZEVALREG.DLL; DestDir: {app}; Flags: ignoreversion onlyifdoesntexist overwritereadonly
Source: RequiredFiles\WAVFILES\THREATSFOUND.WAV; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\WAVFILES\SCANFINISHED.WAV; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\WRDWIZHELP\WRDWIZESS\WRDWIZESSENTIAL.CHM; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\WRDWIZHELP\WRDWIZESS\WRDWIZESSENTIALGERMAN.CHM; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\WRDWIZDB\*; DestDir: {app}\WRDWIZDATABASE; Flags: ignoreversion recursesubdirs createallsubdirs  overwritereadonly
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: RequiredFiles\WRDWIZSECURITYNEWS\WRDWIZSECURITYNEWS.TXT; DestDir: {app}; Flags: ignoreversion recursesubdirs createallsubdirs overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZMD5SCN.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\UNRAR\x64\UNRAR.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\SCITERDLL\64\SCITER64.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\SQLITE\64\SQLITE3.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\SQLITE\64\SQLITE3_32.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\SQLITE\64\TISCRIPT-SQLITE.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
;Source: RequiredFiles\SQLITE\64\WWIZFEATURESLOCK.DB; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZCLIENTAGENT.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\CPPREST120_2_9.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\CPPREST120_XP_2_9.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\LIBSSL-1_1-X64.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\LIBCRYPTO-1_1-X64.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\LIBSSH2.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\LIBSSL-1_1-X64.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\MFC120UD.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\MSVCP100.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\MSVCP120.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\MSVCP120D.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\MSVCR120.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\MSVCR120D.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\ZLIB1.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\POWERSHELLSCRIPTS\CONFIG_IIS.ps1; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\TPDLLS\x64\NFAPI.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\TPDLLS\x64\PROTOCOLFILTERS.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\TPDLLS\x64\LIBEAY32.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\TPDLLS\x64\SSLEAY32.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\TPDLLS\x64\7-ZIP32.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly regserver
Source: RequiredFiles\TPDLLS\x64\7Z.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\TPAPPS\x64\7Z.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\SETUPDB\RLOC.DB; DestDir: {app}; Flags: ignoreversion overwritereadonly

[Icons]
;Issue:New Logo implementation, delete old logo and copy new logo. Resolved by : Nitin K Date:4th Jan 2016
Name: {group}\{#MyWardWizAppName}; Filename: {app}\{#MyAppExeName}; IconFilename: {app}\COMPANYLOGO.ICO
;Neha Gharge to add utilities and its sub menus.
Name: {group}\{#Utility}\{#MyUtility_1}; Filename: {app}\{#MyAppExeName1}; Flags: excludefromshowinnewinstall; IconFilename: {app}\COMPANYLOGO.ICO
Name: {group}\{#Utility}\{#MyUtility_2}; Filename: {app}\{#MyAppExeName2}; Flags: excludefromshowinnewinstall; IconFilename: {app}\COMPANYLOGO.ICO
Name: {group}\{#Utility}\{#MyUtility_3}; Filename: {app}\{#MyAppExeName3}; Flags: excludefromshowinnewinstall; IconFilename: {app}\COMPANYLOGO.ICO
;lalit 2-3-2015 silent mode uninstallation
Name: {group}\{cm:UninstallProgram,{#MyWardWizAppName}}; Filename: {app}\WRDWIZUNINST.exe; Parameters: /SILENT;  IconFilename: {app}\COMPANYLOGO.ICO
Name: {commondesktop}\{#MyWardWizAppName}; Filename: {app}\{#MyAppExeName}; Tasks: desktopicon; WorkingDir :{app};IconFilename:{app}\COMPANYLOGO.ICO
Name: {userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyWardWizAppName}; Filename: {app}\{#MyAppExeName}; Tasks: quicklaunchicon ; WorkingDir :{app};IconFilename:{app}\COMPANYLOGO.ICO

[Run]
;neha Gharge nowait remove it will wait till proper installation is not done
;Issue: After launching Main UI Custom scan Drag drop not working properly, If we close UI and Start again from Desktop then It works Resolved by : Nitin K Date: 23rd April 2015
Filename: {app}\{#MyAppExeName}; Parameters: "-SHOWREG"; Description: {cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}; Flags: nowait postinstall skipifsilent
Filename: REG.exe; Parameters: "ADD ""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{{078ABE62-583D-43e6-96D6-5D092883DC82}_is1"" /V ""UninstallString"" /T ""REG_SZ"" /D ""\""{app}\WRDWIZUNINST.exe\"" /SILENT"" /F"; StatusMsg: {cm:CMWWInstallStatusMSG}; Flags: RunHidden WaitUntilTerminated
Filename: REG.exe; Parameters: "ADD ""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{{078ABE62-583D-43e6-96D6-5D092883DC82}_is1"" /V ""QuietUninstallString"" /T ""REG_SZ"" /D ""\""{app}\WRDWIZUNINST.exe\"" /SILENT"" /F"; StatusMsg: {cm:CMWWInstallStatusMSG}; Flags: RunHidden WaitUntilTerminated

[UninstallRun]
Filename: {app}\WRDWIZCLOSEALL.EXE; Flags: runminimized runhidden

[Registry]
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: AppFolder; ValueData: {app}\; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: AppVersion; ValueData: {#AppVer}; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: DataBaseVersion; ValueData: {code:GetDataBaseVersion|1.1.3.1}; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: DataEncVersion; ValueData: {#DataEncVer}; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: LastScandt; ValueData: {code:GetLastScandt|00/00/00 00:00:00}; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: LastLiveupdatedt; ValueData: {code:Date} {code:Time}; Flags: uninsdeletekey noerror; Tasks: ; Languages: 
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: LastLiveupdatetm; ValueData: {code:Time}; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: DWORD; ValueName: ScanType; ValueData: {code:GetScanType| -1}; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: DWORD; ValueName: VirusFound; ValueData: {code:GetVirusFound| 0}; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwAutoDefUpdate; ValueData: {code:GetdwAutoDefUpdate| 1}; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwAutoProductUpdate; ValueData: {code:GetdwAutoProductUpdate| 1}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwDeleteOldReports; ValueData: {code:GetdwDeleteOldReports| 1}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwEnableSound; ValueData: {code:GetdwEnableSound| 1}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwShowStartupTips; ValueData: {code:GetdwShowStartupTips| 1}; Flags: uninsdeletekey noerror dontcreatekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwShowTrayPopup; ValueData: {code:GetdwShowTrayPopup| 1}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwStartUpScan; ValueData: {code:GetdwStartUpScan| 0}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwUpdateReboot; ValueData: {code:GetdwUpdateReboot| 0}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwUsbScan; ValueData: {code:GetdwUsbScan| 1}; Flags: uninsdeletekey noerror dontcreatekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwDaysToDelRep; ValueData: {code:GetdwDaysToDelRep| 30}; Flags: uninsdeletekey noerror dontcreatekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwShowSecNews; ValueData: {code:GetdwShowSecNews| 1}; Flags: uninsdeletekey noerror dontcreatekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwDaysToDelRep; ValueData: {code:GetdwDaysToDelRep| 30}; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwProductID; ValueData: 3; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwLoggingLevel; ValueData: {code:GetdwLoggingLevel| 2}; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwScanLevel; ValueData: 1; Flags: uninsdeletekey
;Varada Ikhar, Date: 13th May-2015, New Implementation : 'Release Note' message pop-up should be displayed after successful product update.
Root: HKLM; Subkey: SOFTWARE\Wardwiz\WardWizClient; ValueType: dword; ValueName: dwRelNotesShow; ValueData:{code:GetdwRelNotesShow| 0}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKCR; Subkey: .WWIZ; ValueType: string; ValueName: ; ValueData: {#ResIconReg}; Flags: uninsdeletekey
Root: HKCR; Subkey: .*.WWIZ; ValueType: string; ValueName: ; ValueData: {#ResIconReg}; Flags: uninsdeletekey
Root: HKCR; Subkey: {#ResIconReg}\DefaultIcon; ValueType: string; ValueName: ; ValueData: {app}\{#ResFileName}; Flags: uninsdeletekey
Root: HKCR; Subkey: {#ResIconReg}\shell\open\command; ValueType: string; ValueName: ; ValueData: """{app}\{#MyAppExeName}""{#ExecuteExeRegEntryThirdParam}{#ExecuteExeRegEntrySecParam}"; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwCrKeepOrg; ValueData: {code:GetdwCrKeepOrg| 0}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: SupportNo; ValueData: {#SupportNo}; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwIsOffline; ValueData: {code:GetdwIsOffline| 1}; Flags: uninsdeletekey noerror
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwLocID; ValueData:0; Flags: uninsdeletekey noerror 
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwQuarantineOption; ValueData: 1; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwHeuScan; ValueData: 1; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwActiveScanOption; ValueData: 1; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwBackgroundCaching; ValueData: 0; Flags: uninsdeletekey noerror
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwCachingMethod; ValueData: 0; Flags: uninsdeletekey noerror
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: ScanEngineVersion; ValueData: {#ScanEngVer}; Flags: uninsdeletekey
Root: HKCU; Subkey: Control Panel\Desktop; ValueType: string; ValueName: AutoEndTasks; ValueData: 1; Flags: uninsdeletekey

[UninstallDelete]
Type: files; Name: {app}\*.*
Type: filesandordirs; Name: {app}\Log
Type: files; Name: {app}
Type: files; Name: {app}\DRIVERS

[InstallDelete]
;lalit 2-10-2015 issue-doblicate icon in start menu
Type: files; Name: {group}\*.*

[Code]
                                  // Funtions for String Data

   // Funtion for GetAppVersion
function GetAppVersion(Value_Name : string):string;
         var S_ver : string;
   begin
    RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'AppVersion', S_ver);

     if (S_ver = '') then
     begin
     Result := ExpandConstant('{#AppVer}');
     end
     else
      Result := S_ver;
   end;

//Procedure to create array from DBVersion for comparison
procedure Explode(var Dest: TArrayOfString; Text: String; Separator: String);
      var i, p: Integer;
begin
      i := 0;
      repeat
		SetArrayLength(Dest, i+1);
        p := Pos(Separator,Text);
        if p > 0 then begin
          Dest[i] := Copy(Text, 1, p-1);
          Text := Copy(Text, p + Length(Separator), Length(Text));
          i := i + 1;
        end else begin
          Dest[i] := Text;
          Text := '';
        end;
      until Length(Text)=0;
end;

// Funtion for GetDBVersion
function GetDataBaseVersion(Value_Name : string):string;
      var db,db_wwizav : string;
      var strArray,strArray_wwiz_av,strArrayDB : TArrayOfString;
      var i : integer;
      var check,check_db : Boolean;
begin
    check := RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'DataBaseVersion', db_wwizav);
    check_db := RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz', 'DataBaseVersion',db);
    if(check_db  = false) then
    begin
        Result := ExpandConstant('{#DataVer}');
        exit;
    end
    else
    begin
        Explode(strArray,db,'.');
    end;
    if(check  = true) then
    begin
        Explode(strArray_wwiz_av,db_wwizav,'.');
        for i := 0 to GetArrayLength(strArray_wwiz_av) - 1 do
        begin
            if strArray_wwiz_av[i] > strArray[i] then
            begin
              Result := db_wwizav;
              exit;
            end
            else if strArray_wwiz_av[i] < strArray[i] then
            begin
              Result := db;
              exit;
            end;
        end;
    end;
    Explode(strArrayDB,ExpandConstant('{#DataVer}'),'.');
    for i := 0 to GetArrayLength(strArray) - 1 do
    begin
      if strArray[i] > strArrayDB[i] then
      begin
        Result := db;
        exit;
      end
      else if strArray[i] < strArrayDB[i] then
      begin
        Result := ExpandConstant('{#DataVer}');
		exit;
	  end;
	end;
     if(db = '')  then
     begin
      Result := ExpandConstant('{#DataVer}');
     end
     else
      Result := db;
end;

// Funtion for GetDataEncVersion
function GetDataEncVersion(Value_Name : string):string;
         var encv : string;
   begin
    RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'DataEncVersion', encv);

     if(encv = '') then
     begin
      Result := ExpandConstant('{#DataEncVer}');
     end
      else
       Result := encv;
   end;

// Funtion for GetLastScandt
function GetLastScandt(Value_Name : string):string;
         var Ldate : string;
   begin
    RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'LastScandt', Ldate);
    if(Ldate = '') then
    begin
     Result :=  '00/00/00 00:00:00';
    end
       else
    Result := Ldate;
   end;

// Funtion for GetSupportNo
function GetSupportNo(Value_Name : string):string;
         var num : string;
   begin
     RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'SupportNo', num);

     if(num = '') then
      begin
       Result := ExpandConstant('{#SupportNo}');
      end
      else
       Result := num;
  end;

                                  // Functions for DWORD Data

 // Function to GetdwShowSecNews
function GetdwShowSecNews(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwShowSecNews', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
      Result := temp_data;
 end;

 // Function to GetScanType
function GetScanType(Value_Name : string): string;
         var Value_Data : string;
         var temp_data : string;
         var check : Boolean;
 begin
      check:= RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'ScanType', Value_Data);
      temp_data := Value_Data;

      if(check  = false) then
      begin
       Result := '-1';
      end
      else
       Result := Value_Data;

      if(Value_Data > '10') then
      begin
          Result := '-1';
      end;
 end;

// Function to GetVirusFound
function GetVirusFound(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;

 begin
     check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus','VirusFound', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(0);
      end
      else
        Result := temp_data;
 end;

// Function to Auto Defination Update
function GetdwAutoDefUpdate(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;
 begin
     check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwAutoDefUpdate', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
       Result := temp_data;
 end;

// Function to GetdwAutoProductUpdate
function GetdwAutoProductUpdate(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;
  begin
      check:= RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwAutoProductUpdate', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
       Result := temp_data;
 end;

// Function to GetdwDeleteOldReports
function GetdwDeleteOldReports(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwDeleteOldReports', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
      Result := temp_data;
 end;

// Function to GetdwEnableSound Data
function GetdwEnableSound(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwEnableSound', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
      Result := temp_data;
 end;

// Function to GetdwShowStartupTips
function GetdwShowStartupTips(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;

   begin
     check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwShowStartupTips', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
       Result := temp_data;
  end;

// Function to a Tray Popup
function GetdwShowTrayPopup(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;

 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwShowTrayPopup', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
       Result := temp_data;
 end;

// Function to  GetdwStartUpScan Data
function GetdwStartUpScan(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;
     begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwStartUpScan', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(0);
      end
      else
       Result := temp_data;
 end;

// Function to GetdwUpdateReboot
function GetdwUpdateReboot(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;

 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwUpdateReboot', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(0);
      end
      else
      Result := temp_data;
 end;

// Function to GetdwUsbScan
function GetdwUsbScan(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;
 begin
     check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwUsbScan', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
      Result := temp_data;
 end;

// Function to GetdwDaysToDelRep
function GetdwDaysToDelRep(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwDaysToDelRep', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(30);
      end
      else
      Result := temp_data;
 end;

// Function to GetdwProductID
function GetdwProductID(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwProductID', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
       Result := temp_data;
 end;

// Function to GetdwLoggingLevel
function GetdwLoggingLevel(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwLoggingLevel', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(2);
      end
      else
       Result := temp_data;
 end;

// Function to GetdwScanLevel
function GetdwScanLevel(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwScanLevel', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
      Result := temp_data;
 end;

// Function to GetdwRelNotesShow
function GetdwRelNotesShow(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;
 begin
     check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwRelNotesShow', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(0);
      end
      else
      Result := temp_data;
 end;

 // Function to GetdwCrKeepOrg
function GetdwCrKeepOrg(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwCrKeepOrg', Value_Data);
      temp_data := IntToStr(Value_Data);
      Result := temp_data;
 end;

 // Function to GetdwIsOffline
function GetdwIsOffline(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;
 begin
     check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwIsOffline', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
       Result := temp_data;
 end;

 // Function to GetdwLocID
function GetdwLocID(Value_Name : string): string;
         var Value_Data : Cardinal;
         var Locid : string;
         var check : Boolean;
 begin
     check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwLocID', Value_Data);
      Locid := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(0);
      end
      else
       Result := Locid;
 end;

    //Function to Copy a String Data as Default
function GetStringData(Value_Name : string):string;
         var str_Value_Data : string;
   begin
    if(Value_Name = 'Default') then
        Value_Name := '';

    RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', Value_Name, str_Value_Data);
    Result := str_Value_Data;
  end;

  // Procedure to Get MVersion
Procedure GetMVersion(RegKey: integer; SubkeyName: String);
 var M_Ver : string;
 begin
     if (RegValueExists(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'MVersion')) then
       begin
        RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'MVersion', M_Ver);
		     if not(M_Ver = '') then
        RegWriteStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz', 'MVersion',M_Ver);
      end;
 end;

  // Procedure to Remove old Registry
Procedure OldReg_Remover(RegKey: integer; SubkeyName: String);
    begin
    if RegKeyExists(RegKey, SubkeyName) then
   RegDeleteKeyIncludingSubkeys(RegKey ,SubkeyName);
  end;

const
  MF_BYCOMMAND = $00000000;
  MF_BYPOSITION = $00000400;

type
  HMENU = THandle;

// Import the LoadVCLStyle function from VclStylesInno.DLL
procedure LoadVCLStyle(VClStyleFile: String); external 'LoadVCLStyleW@files:VclStylesInno.dll stdcall';
// Import the UnLoadVCLStyles function from VclStylesInno.DLL
procedure UnLoadVCLStyles; external 'UnLoadVCLStyles@files:VclStylesInno.dll stdcall';
function CloseAllApplicationforElite(): Boolean;
external 'CloseAllApplicationforElite@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

procedure StartEPSStartUpApplications(path:string);
external 'StartEPSStartUpApplications@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function SetSelectedLanguage(const strlanguage:String): Boolean;
external 'SetSelectedLanguage@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function SendAllStrings(const StringName:String): Boolean;
external 'SendAllStrings@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function SendAllStringsuninstall(const StringName:String): Boolean;
external 'SendAllStrings@{app}\WRDWIZSETUPDLL.DLL cdecl uninstallonly';

//Issue No-24 While installing the same setup again it should be "Latest version of Wardwiz is already installed"
function CheckForPreviousVersion(const FileName:String; CurrentVersion:String ; Ispatch:Boolean): Boolean;
external 'CheckForPreviousVersion@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function SetApplicationPath(const strAppPath:String): Boolean;
external 'SetApplicationPath@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function SingleInstanceCheck(): Boolean;
external 'SingleInstanceCheck@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function InstallService(path:string): Boolean;
external 'InstallService@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function RemoveService(): Boolean;
external 'RemoveService@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

procedure ExitProcess(exitCode:integer);
external 'ExitProcess@kernel32.dll cdecl setuponly';

function GetOSVersion(): integer;
external 'GetOSVersion@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function InstallDriverService(): integer;
external 'InstallDriverService@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function StartDriverServiceLocal(): integer;
external 'StartDriverServiceLocal@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function RegisterSetupWithDrivers(): integer;
external 'RegisterSetupWithDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function ResumeProtectionDrivers(): integer;
external 'ResumeProtectionDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function PauseProtectionDrivers(): integer;
external 'PauseProtectionDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function StartFltDrivers(path:string): integer;
external 'StartFltDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function StopFltDrivers(path:string): integer;
external 'StopFltDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

//lalit 2-3-2015 issue :-During uninstallation if I my UI is running and it asks for close UI but then if I try to cancel the Uninstallation it doesnt happen
function CloseAllApplicationForUninstall(const strAppPath:String): Boolean;
external 'CloseAllApplicationForUninstall@{app}\WRDWIZSETUPDLL.DLL cdecl uninstallonly';

function GetSystemMenu(hWnd: HWND; bRevert: BOOL): HMENU;
external 'GetSystemMenu@user32.dll stdcall';

function DeleteMenu(hMenu: HMENU; uPosition, uFlags: UINT): BOOL;
external 'DeleteMenu@user32.dll stdcall';

function GetMenuItemCount(hMenu: HMENU): Integer;
external 'GetMenuItemCount@user32.dll stdcall';

function StartEPSProductServices(): integer;
external 'StartEPSProductServices@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function CheckNeedOfRestart(): Boolean;
external 'CheckNeedOfRestart@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function RestartNow(): Boolean;
external 'RestartNow@{app}\WRDWIZSETUPDLL.DLL cdecl uninstallonly';

function MoveFileEXtoRestartDlt(const strAppPath:String): Boolean;
external 'MoveFileEXtoRestartDlt@{app}\WRDWIZSETUPDLL.DLL cdecl uninstallonly';

function WriteXMLValIntoINI(NodeName: String; NodeVal:String): Boolean;
external 'WriteXMLValIntoINI@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

var Redraw : Boolean;
var ReStart : Boolean;
ResultForRestart: Boolean;

Procedure StartFLTDrivers4EmailScan();
var
ResultCode: integer;
command: string;
begin
	command := 'WRDWIZFLT';
	Exec(ExpandConstant('{app}')+'\NFREGDRV.EXE ', command, '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;

function LoadValueFromXML(const AFileName, APath: string): string;
var
  XMLNode: Variant;
  XMLDocument: Variant;
  XMLNodeName : string;
  IndexVal : Integer;
begin
  Result := '';
  XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
  try
    XMLDocument.async := False;
    XMLDocument.load(AFileName);
    if (XMLDocument.parseError.errorCode <> 0) then
     begin
       exit;
     end
    else
    begin
      XMLDocument.setProperty('SelectionLanguage', 'XPath');
      XMLNode := XMLDocument.selectSingleNode(APath);
      XMLNodeName := APath;
      IndexVal := length(APath);
      XMLNodeName := Copy(APath, 27 , IndexVal);
      Result := XMLNode.text;
      //RegWriteStringValue(HKEY_LOCAL_MACHINE, 'Software\WardWiz\WardWizClient',XMLNodeName, Result);
      WriteXMLValIntoINI(XMLNodeName, Result);
    end;
  except
    exit;
  end;
end;

function LoadValueFromXMLToRegistry(const AFileName, APath: string): string;
var
  XMLNode: Variant;
  XMLDocument: Variant;
  XMLNodeName : string;
  IndexVal : Integer;
  varSlaveClient : Variant;
begin
  Result := '';
  varSlaveClient := 'SlaveClient';
  XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
  try
    XMLDocument.async := False;
    XMLDocument.load(AFileName);
    if (XMLDocument.parseError.errorCode <> 0) then
     begin
       exit;
     end
    else
    begin
      XMLDocument.setProperty('SelectionLanguage', 'XPath');
      XMLNode := XMLDocument.selectSingleNode(APath);
      XMLNodeName := APath;
      IndexVal := length(APath);
      XMLNodeName := Copy(APath, 27 , IndexVal);
	  if(XMLNodeName = varSlaveClient) then
      begin
       RegWriteDWordValue(HKEY_LOCAL_MACHINE, 'Software\WardWiz','dwUpdtManager', XMLNode.text);
      end
    end;
  except
    exit;
  end;
end;

procedure AddSupportNo();
var
  dwScanLevel: Cardinal;
begin
      if  RegQueryDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Wardwiz Antivirus','dwScanLevel', dwScanLevel)then
      begin
     if (dwScanLevel = 1)then
         begin
            RegWriteStringValue(HKEY_LOCAL_MACHINE, 'Software\WardWiz Antivirus',
            'SupportNo', '{#SupportNumberNC}');
           end

       else
        RegWriteStringValue(HKEY_LOCAL_MACHINE, 'Software\WardWiz Antivirus',
        'SupportNo', '{#SupportNumberClam}');
    end
    else
       RegWriteStringValue(HKEY_LOCAL_MACHINE, 'Software\WardWiz Antivirus',
        'SupportNo', '{#SupportNumberClam}');
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
Params: string;
  ResultCode: Integer;
  website_name: string;
  server_port: string;
begin
    if(CurStep = ssInstall) then
    begin
    //lalit 2-3-2015 issue At the time of installation Cancel button not getting disabled.
   	WizardForm.CancelButton.Enabled:=False;
		ResultCode := GetOSVersion();
     if(ResultCode = 5 ) then
      begin
        ExtractTemporaryFile('{#FPSCANNER}');
        ExtractTemporaryFile('{#PPXPROC}');
        RenameFile(ExpandConstant('{tmp}\{#FPSCANNER}'), ExpandConstant('{app}\DRIVERS\{#FPSCANNER}')) ;
        RenameFile(ExpandConstant('{tmp}\{#PPXPROC}'), ExpandConstant('{app}\DRIVERS\{#PPXPROC}')) ;
      end;

     if (ResultCode = 10 ) then
      begin
       ExtractTemporaryFile('{#FPSCANNER}');
        RenameFile(ExpandConstant('{tmp}\{#FPSCANNER}'), ExpandConstant('{app}\DRIVERS\{#FPSCANNER}')) ;
      end;

      if not ((ResultCode = 10) or (ResultCode = 5)) then
      begin
       ExtractTemporaryFile('{#PPSECURE64}');
       ExtractTemporaryFile('{#FPSCANNER}');
        RenameFile(ExpandConstant('{tmp}\{#FPSCANNER}'), ExpandConstant('{app}\DRIVERS\{#FPSCANNER}')) ;
        RenameFile(ExpandConstant('{tmp}\{#PPSECURE64}'), ExpandConstant('{app}\DRIVERS\{#PPSECURE64}')) ;
      end;

		if(ResultCode = 5 ) then
		begin
			if not ( ResultCode = 0 ) then
			begin
		    RegisterSetupWithDrivers() ;
				WizardForm.StatusLabel.Caption := 'Installing Microsoft C++ Redistributables...'
				ExtractTemporaryFile('{#REDESTRIBUTABLES}');
				if not Exec(AddQuotes(ExpandConstant('{tmp}\{#REDESTRIBUTABLES}')), ' /i /q /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
				MsgBox( ExpandConstant('{cm:CMWWInstallRedistriFailed}') + IntToStr(ResultCode), mbInformation, MB_OK);
				CloseAllApplicationforElite();
			end;
		end;
    end;
   if(CurStep = ssPostInstall) then
   begin
      //AddSupportNo();
      //Issue : 0000154 : Start installing the setup.Without clicking on finish restart/shutdown PC.
      //Now COMSRV & ALUSRV is not getting start & uninstallation is also not happening.
      //Resolved By: Nitin K.
      SetSelectedLanguage(ExpandConstant('{language}') );
      InstallDriverService();
      StartDriverServiceLocal();
      //RemoveInnoUninstaller();
      //StartStartUpApplications(ExpandConstant('{app}'));
      //StartProductServices();
       // To Get MVersion
	   StartFLTDrivers4EmailScan();

      GetMVersion(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus');
      begin
              if (GetOSVersion() > 6) and ( StrToInt(LoadValueFromXMLToRegistry(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/SlaveClient')) = 1) then
              begin
                WizardForm.StatusLabel.Caption := 'Configuring IIS...';
                website_name:= GetIniString('Select', 'website_name', 'www.wardwizelite.com', ExpandConstant('{app}\WRDSETTINGS\EPSSettings.ini'));
                server_port:= GetIniString('Select', 'server_port', '80', ExpandConstant('{app}\WRDSETTINGS\EPSSettings.ini'));
                ExtractTemporaryFile('CONFIG_IIS.ps1');
                Exec('powershell', ExpandConstant('-ExecutionPolicy RemoteSigned -File {tmp}\CONFIG_IIS.ps1 '+website_name+' '+server_port+'  "'+ExpandConstant('{app}\WardWizDev\WardWizEPS')+'"'), '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
              end
      end;
   end;
 end;

procedure RemoveUnnecessaryDriversFile();
var
  RegKey: string;
  RegValue: string;
  ResultCode: Integer;
begin
     	ResultCode := GetOSVersion();

    if(ResultCode = 5 ) then
      begin
     if FileExists(ExpandConstant('{app}\DRIVERS\{#PPSECURE64}'))then
      DeleteFile(ExpandConstant('{app}\DRIVERS\{#PPSECURE64}'));
       end;

     if (ResultCode = 10 ) then
      begin
     if FileExists(ExpandConstant('{app}\DRIVERS\{#PPSECURE64}'))then
      DeleteFile(ExpandConstant('{app}\DRIVERS\{#PPSECURE64}'));

     if FileExists(ExpandConstant('{app}\DRIVERS\{#PPXPROC}'))then
      DeleteFile(ExpandConstant('{app}\DRIVERS\{#PPXPROC}'));
       end;

      if not ((ResultCode = 10) or (ResultCode = 5)) then
      begin
     if FileExists(ExpandConstant('{app}\DRIVERS\{#PPXPROC}'))then
      DeleteFile(ExpandConstant('{app}\DRIVERS\{#PPXPROC}'));
      end ;
end;
// lalit 2-3-2015 If I have With Clam setup and I install without clam setup
//then it does not delete old setup of With clam setup.

procedure ClamToNoClamCleanUp();
var
  RegKey: string;
  RegValue: string;

begin

    RegKey := Format('%s', ['SOFTWARE\Wardwiz Antivirus']);
    RegKey := ExpandConstant(RegKey);
    if RegKeyExists(HKEY_LOCAL_MACHINE,RegKey)=True then
    begin
      if FileExists(ExpandConstant('{app}\WRDWIZSCANNER.EXE'))then
      DeleteFile(ExpandConstant('{app}\WRDWIZSCANNER.EXE'));

      if FileExists(ExpandConstant('{app}\LIBCLAMAV.DLL'))then
      DeleteFile(ExpandConstant('{app}\LIBCLAMAV.DLL'));


      if  FileOrDirExists(ExpandConstant('{app}\MICROSOFT.VC80.CRT'))  then
        DelTree(ExpandConstant('{app}\MICROSOFT.VC80.CRT'),true,true,true);

      if  FileOrDirExists(ExpandConstant('{app}\DB'))  then
        DelTree(ExpandConstant('{app}\DB'),true,true,true);

         // lalit 2-10-2015 dublicate entry in start menu
      if FileExists(ExpandConstant('{commondesktop}\WardWiz Antivirus.lnk'))then
       DeleteFile(ExpandConstant('{commondesktop}\WardWiz Antivirus.lnk'));

	   //Issue:New Logo implementation, delete old logo and copy new logo. Resolved by : Nitin K Date:4th Jan 2016
	    if FileExists(ExpandConstant('{userappdata}\Microsoft\Internet Explorer\Quick Launch\WardWiz Antivirus.lnk'))then
			DeleteFile(ExpandConstant('{userappdata}\Microsoft\Internet Explorer\Quick Launch\WardWiz Antivirus.lnk'));

	    if FileExists(ExpandConstant('{userappdata}\Microsoft\Internet Explorer\Quick Launch\WardWiz.lnk'))then
			DeleteFile(ExpandConstant('{userappdata}\Microsoft\Internet Explorer\Quick Launch\WardWiz.lnk'));

      if FileExists(ExpandConstant('{commondesktop}\WardWiz.lnk'))then
			DeleteFile(ExpandConstant('{commondesktop}\WardWiz.lnk'));

    end;
end;

//Issue: 0000216: Issue while installing the setup. &  On Reinstallation Restart Now message should be within Setup window and not as MessageBox
//Resolved By: Nitin K. Date: 28th April 2015
function NeedRestart(): Boolean;
begin
      Result := ResultForRestart;
end;

procedure RemoveInnoUninstaller();
begin

       if FileExists(ExpandConstant('{app}\unins000.exe'))then
        DeleteFile(ExpandConstant('{app}\unins000.exe'));

       if FileExists(ExpandConstant('{app}\unins000.dat'))then
        DeleteFile(ExpandConstant('{app}\unins000.dat'));

end;

function LicenseAgreement: Boolean;
var
  DefaultTop,
  DefaultLeft,
  DefaultHeight,
  DefaultBackTop,
  DefaultNextTop,
  DefaultCancelTop,
  DefaultBevelTop,
  DefaultOuterHeight: Integer;
  LicenseHeight: Integer;

  begin
  Result := True;
  LicenseHeight := 380;
  DefaultTop := WizardForm.Top;
  DefaultLeft := WizardForm.Left;
  DefaultHeight := WizardForm.Height;
  DefaultBackTop := WizardForm.BackButton.Top;
  DefaultNextTop := WizardForm.NextButton.Top;
  DefaultCancelTop := WizardForm.CancelButton.Top;
  DefaultBevelTop := WizardForm.Bevel.Top;
  DefaultOuterHeight := WizardForm.OuterNotebook.Height;

  WizardForm.InnerPage.Height := WizardForm.InnerPage.Height + (LicenseHeight - DefaultHeight);
  WizardForm.InnerNotebook.Height :=  WizardForm.InnerNotebook.Height + (LicenseHeight - DefaultHeight);
  WizardForm.LicensePage.Height := WizardForm.LicensePage.Height + (LicenseHeight - DefaultHeight);
  WizardForm.LicenseMemo.Height := WizardForm.LicenseMemo.Height + (LicenseHeight - DefaultHeight);
  WizardForm.LicenseNotAcceptedRadio.Top := WizardForm.LicenseNotAcceptedRadio.Top + (LicenseHeight - DefaultHeight);
  WizardForm.LicenseAcceptedRadio.Top := WizardForm.LicenseAcceptedRadio.Top + (LicenseHeight - DefaultHeight);

end;

function NextButtonClick(CurPage: Integer): Boolean;
var
ProgPath:String;
RegKey: string;
CurrentPath: string;
bAddFailed : Boolean;

//Issue No-24 While installing the same setup again it should be "Latest version of Wardwiz is already installed"
CurrentVersion:String;
begin
  Result := True;
  if not FileExists(ExpandConstant('{src}\ServerInfo.XML'))then
  begin
   MsgBox('ServerInfo.XML file not found', mbError, MB_OK)
   ExitProcess(0);
  end;
  if (CurPage = 1) then
   begin
   //ResultForRestart := False;
   //if not Redraw then
    //begin
    //Result := LicenseAgreement;
    //Redraw := True;
    //end;

    if(Result = False) then
    begin
        ExitProcess(0);
    end;
   end
   else if (CurPage = 2) then
   begin
     CurrentVersion:= ExpandConstant('{#AppVer}');
	 //Issue No-24 While installing the same setup again it should be "Latest version of Wardwiz is already installed"
    // CurrentVersion := '{#SetupSetting("AppVersion")}';
      bAddFailed := false;
      if not SendAllStrings(ExpandConstant('{cm:CM_0_WWSetupDllAppRunningUnInstall}')) then
          begin
                bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_1_WWSetupDllAppRunningReInstall}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_2_WWSetupDllOutlookCloseInstall}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_3_WWSetupDllOutlookCloseUnInstall}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_4_WWSetupDllInstallPatches}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_5_WWSetupDllClose}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_6_WWSetupDllUnInstallContinue}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_7_WWSetupDllLatestInstalled}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_8_WWSetupDllLatestInstalled}')) then
          begin
                bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_9_WWSetupDllCustomMsgBoxButtonYes}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStrings(ExpandConstant('{cm:CM_10_WWSetupDllCustomMsgBoxButtonYesToAll}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStrings(ExpandConstant('{cm:CM_11_WWSetupDllCustomMsgBoxButtonNo}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStrings(ExpandConstant('{cm:CM_12_WWSetupDllCustomMsgBoxButtonNoToAll}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStrings(ExpandConstant('{cm:CM_13_WWSetupDllCustomMsgBoxButtonCancel}')) then
          begin
                bAddFailed := true;
          end;
	  if (bAddFailed = true) then
        begin
                MsgBox( ExpandConstant('{cm:CMWWStringConstAddFailed}') , mbInformation, MB_OK)
                ExitProcess(0);
        end;

    ResultForRestart := CheckNeedOfRestart();
    if(ResultForRestart = True)then
    begin
      ReStart := True;
    end;
  end
  //Issue - Wardwiz AV is getting installed at multiple location.
  //Resolved By Nitin K. Date: 02nd - Feb - 2015
  else if (CurPage = 06)then
  begin
     RegKey := Format('%s', ['SOFTWARE\Wardwiz Antivirus']);
     RegKey := ExpandConstant(RegKey);
     if RegKeyExists(HKEY_LOCAL_MACHINE,RegKey) then
     begin
        RegQueryStringValue(HKEY_LOCAL_MACHINE, RegKey, 'AppFolder', ProgPath);
        CurrentPath := ExpandConstant('{app}\');
        if not ( ProgPath = '') then
        begin
          if not( ProgPath = CurrentPath ) then
          begin
              MsgBox( ExpandConstant('{cm:CMWWAlreadyInstalled1}') +'"'+ProgPath+'",'+ ExpandConstant('{cm:CMWWAlreadyInstalled2}') , mbConfirmation, MB_OK);
              ExitProcess(0);
          end;
        end;
     end;
  end
  else if CurPage = 9 then
    begin
      SetApplicationPath(ExpandConstant('{app}\'));
  end
  else if (CurPage = 10)then
  begin

  //issue .Keep that pop-up aside and click on "Install" again. One more pop-up will appear.
 // resolved by lalit kumawat 8-31-2015
   WizardForm.CancelButton.Enabled:=False;
  WizardForm.BackButton.Enabled:=False;
  WizardForm.NextButton.Enabled:=False;

  RegisterSetupWithDrivers();
  PauseProtectionDrivers();
  StopFltDrivers('wrdwizscanner');
  StopFltDrivers('wrdwizsecure64');

   Result := CloseAllApplicationforElite();

  WizardForm.CancelButton.Enabled:=True;
  WizardForm.BackButton.Enabled:=True;
  WizardForm.NextButton.Enabled:=True;
	// lalit 2-3-2015 If I have With Clam setup and I install without clam setup
  // then it does not delete old setup of With clam setup.

    ClamToNoClamCleanUp();
    WizardForm.CancelButton.Enabled:=False;
    if(Result = False) then
    begin
        WizardForm.CancelButton.Enabled:=true;
        MsgBox( ExpandConstant('{cm:CMWWCloseAllWWApp}') , mbInformation, MB_OK)
    end;
  end
  else if(CurPage = 14) then
  begin
  //Commented here because we are adding it in PostInstall section
  //SetSelectedLanguage(ExpandConstant('{language}') );
  PauseProtectionDrivers();
  StopFltDrivers('wrdwizscanner');
  StopFltDrivers('wrdwizsecure64');


    RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{078ABE62-583D-43e6-96D6-5D092883DC82}_is1',
      'QuietUninstallString', '"' + ExpandConstant('{app}') + '\WRDWIZUNINST.exe" /SILENT');

    RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{078ABE62-583D-43e6-96D6-5D092883DC82}_is1',
    'UninstallString', '"' + ExpandConstant('{app}') + '\WRDWIZUNINST.exe"');

  RemoveUnnecessaryDriversFile();
	RemoveInnoUninstaller();
  // Call Remove old Registry Procedure
  OldReg_Remover(HKEY_LOCAL_MACHINE,'SOFTWARE\Wardwiz Antivirus');
  StartEPSStartUpApplications(ExpandConstant('{app}'));

	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/Name');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/Language');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/Antimalware');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/EmailScan');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/DataEncryption');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/RegistryOptimizer');
     LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/RecoverFiles');
     LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/AutorunScan');
     LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/TempFileCleaner');
     LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/USBVaccination');
     LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/Settings');
     LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/Uninstall');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/PowerUser');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/ExchangeProtection');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/Relay');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/Mode');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/ScanBeforeInstalation');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/_isUseCustomInstallationPath');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/Path');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/_isSetPassword');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/ClientPassword');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/ConnectTo');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/ServerMchineIP');
	 LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/ServerMchineName');
     LoadValueFromXML(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/Domain');
     LoadValueFromXMLToRegistry(ExpandConstant('{src}\SERVERINFO.XML'), '//DocumentElement/Package/SlaveClient');
  StartFltDrivers('wrdwizscanner');
	StartFltDrivers('wrdwizsecure64');
  ResumeProtectionDrivers();
  StartEPSProductServices();

   end
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
bReturnVal : Boolean;
begin
case CurUninstallStep of
  usPostUninstall:
      begin
      if DirExists(ExpandConstant('{app}\Quarantine')) then begin
        if MsgBox( ExpandConstant('{cm:CMWWDeleteQuarantineFolder}') , mbConfirmation, MB_YESNO)= idYes then
          DelTree(ExpandConstant('{app}'), True, True, True);
          end
          else   DelTree(ExpandConstant('{app}'), True, True, True);
       end;
     usDone: // lalit 2-3-2015 in silent mode successful uninstallation messge
      begin
       if RegKeyExists(HKEY_CLASSES_ROOT,'WardWiz.PATH.1.10.RES')then
         begin
          RegDeleteKeyIncludingSubkeys(HKEY_CLASSES_ROOT,'WardWiz.PATH.1.10.RES');
         end;

       if RegKeyExists(HKEY_CLASSES_ROOT,'.WWIZ')then
         begin
          RegDeleteKeyIncludingSubkeys(HKEY_CLASSES_ROOT,'.WWIZ');
         end;

       if RegKeyExists(HKEY_CLASSES_ROOT,'.*.WWIZ')then
         begin
          RegDeleteKeyIncludingSubkeys(HKEY_CLASSES_ROOT,'.*.WWIZ');
         end;
	  // resolved by lalit kumawat, issue- After uninstallaion successfull message not coming.
       if not FileExists(ExpandConstant('{app}\WRDWIZSHELLEXT.DLL'))then
          begin
           MsgBox( ExpandConstant('{cm:CMWWRemoveSuccess}') , mbInformation, MB_OK)
          end
        else
         begin
            if( MsgBox( ExpandConstant('{cm:CMWWRestartReq}') , mbConfirmation, MB_YESNO) = IDYES ) then
              begin
               RenameFile(ExpandConstant('{tmp}\WRDWIZSETUPDLL.DLL'),ExpandConstant('{app}\WRDWIZSETUPDLL.DLL')) ;
               MoveFileEXtoRestartDlt(ExpandConstant('{app}\'))  ;
              RestartNow();
              end;
         end
         end;

   end;
end;

function GetUninstallerPath: string;
var
  RegKey: string;
begin
  Result := '';
  if IsWin64  then
  begin
    RegKey := Format('%s_is1', ['SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{{6F8638DF-98DF-4D11-85B0-7BB380EF03AB}']);
    RegKey := ExpandConstant(RegKey);
    if RegKeyExists(HKEY_LOCAL_MACHINE,RegKey) then
    begin
      if MsgBox( ExpandConstant('{cm:CMWWUninstallPrevVer}'),
      mbConfirmation, MB_YESNO) = IDYES then

    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, RegKey, 'UninstallString', Result) then
    RegQueryStringValue(HKEY_CURRENT_USER, RegKey, 'UninstallString', Result);

   end;
   end;
   if not IsWin64  then
    begin
    RegKey := Format('%s_is1', ['SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{{6F8638DF-98DF-4D11-85B0-7BB380EF03AB}']);
    RegKey := ExpandConstant(RegKey);
    if RegKeyExists(HKEY_LOCAL_MACHINE,RegKey) then
    begin
      if MsgBox( ExpandConstant('{cm:CMWWPrevVerInstalled}') ,
      mbConfirmation, MB_YESNO) = IDYES then

    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, RegKey, 'UninstallString', Result) then
    RegQueryStringValue(HKEY_CURRENT_USER, RegKey, 'UninstallString', Result);
     end ;
   end;
 end;

function InitializeSetup: Boolean;
var
  UninstPath: string;
  ResultCode: Integer;
  ExtractResult:Integer;
  ICount : Integer;
  FileContent: AnsiString;
  Version: TWindowsVersion;
begin
  for ICount := 1 to 6 do
  begin
    ExtractTemporaryFile('TurquoiseGray.vsf');
    if LoadStringFromFile(ExpandConstant('{tmp}\TurquoiseGray.vsf'),FileContent) then
	begin
		LoadVCLStyle(ExpandConstant('{tmp}\TurquoiseGray.vsf'));
		break;
    end;
  end;
	Redraw := false;
  ReStart := false;

	if SingleInstanceCheck() then
	begin
		MsgBox( ExpandConstant('{cm:CMWWAnotherInstanceRunning}') , mbError, MB_OK);
		ExitProcess(0);
	end;

	if not IsWin64 then
	begin
		MsgBox( ExpandConstant('{cm:CMWWPackgNotSupported}') , mbError, MB_OK);
		ExitProcess(0);
	end;

    // check for lower version of windows XP SP3 and windows server
  GetWindowsVersionEx(Version);
  //if Version.ProductType = VER_NT_SERVER then
    //begin
      //  MsgBox( ExpandConstant('{cm:CMWWServerEditionNotSupported}'), mbError, MB_OK);
        //Result := False;
        //Exit;
    //end;
    if Version.NTPlatform and
       (Version.Major <= 5) and
       (Version.Minor < 1) and
       (Version.ServicePackMajor < 3) then
    begin
      MsgBox( ExpandConstant('{cm:CMWWOSNotSupported}'), mbError, MB_OK);
      Result := False;
      Exit;
    end;

	Result := True;
	UninstPath := RemoveQuotes(GetUninstallerPath);
	if UninstPath <> '' then
	begin
      begin
       Result := True;
       if not Exec(UninstPath, '', '', SW_SHOW, ewNoWait, ResultCode) then
          MsgBox(FmtMessage(SetupMessage(msgUninstallOpenError), [UninstPath]), mbError, MB_OK);
      end;
	end;
end;

procedure DeinitializeSetup();
begin
	UnLoadVCLStyles;
end;

function Date(param: string) : String;
begin
  result := GetDateTimeString('mm/dd/yyyy', '/', ':');
end;

function Time(param: string) : String;
begin
  result := GetDateTimeString('hh:nn:ss', '-', ':');
end;

procedure RemoveAppDataFiles();
var
 path: string;
begin
      path :=  GetEnv('ALLUSERSPROFILE')
       if FileExists(path+'\WardWiz Antivirus\WRDWIZUSERREG.DB')
       then
       begin
          RenameFile(path+'\WardWiz Antivirus\WRDWIZUSERREG.DB',path+'\WRDWIZUSERREG.DB') ;
          DelTree(path+'\WardWiz Antivirus\*', False, True, True);
           RenameFile(path+'\WRDWIZUSERREG.DB',path+'\WardWiz Antivirus\WRDWIZUSERREG.DB') ;
          end
        else
     DelTree(path+'\WardWiz Antivirus\*', False, True, True);
end;

//lalit 2-3-2015 custom uninstallaiton confirmation message box
function InitializeUninstall() : Boolean;
var
  ResultOfCloseAll: Boolean;
  bAddFailed:Boolean;
begin
 Result := false;
 ResultOfCloseAll := false;
 bAddFailed := false;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_0_WWSetupDllAppRunningUnInstall}')) then
          begin
                bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_1_WWSetupDllAppRunningReInstall}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_2_WWSetupDllOutlookCloseInstall}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_3_WWSetupDllOutlookCloseUnInstall}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_4_WWSetupDllInstallPatches}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_5_WWSetupDllClose}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_6_WWSetupDllUnInstallContinue}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_7_WWSetupDllLatestInstalled}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_8_WWSetupDllLatestInstalled}')) then
        begin
                bAddFailed := true;
          end;
	  if not SendAllStringsuninstall(ExpandConstant('{cm:CM_9_WWSetupDllCustomMsgBoxButtonYes}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStringsuninstall(ExpandConstant('{cm:CM_10_WWSetupDllCustomMsgBoxButtonYesToAll}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStringsuninstall(ExpandConstant('{cm:CM_11_WWSetupDllCustomMsgBoxButtonNo}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStringsuninstall(ExpandConstant('{cm:CM_12_WWSetupDllCustomMsgBoxButtonNoToAll}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStringsuninstall(ExpandConstant('{cm:CM_13_WWSetupDllCustomMsgBoxButtonCancel}')) then
          begin
                bAddFailed := true;
          end;
      if (bAddFailed = true) then
        begin
                MsgBox( ExpandConstant('{cm:CMWWStringConstAddFailed}') , mbInformation, MB_OK)
                ExitProcess(0);
        end;
 Result :=  UninstallSilent();
 if not Result then
    Result := false;

 if  Result then
    begin
      Result := false;
          if MsgBox( ExpandConstant('{cm:CMWWRemoveAll}') , mbConfirmation, MB_YESNO)= idYes then
          Result := true;
    end;

  if Result then
        begin
            ResultOfCloseAll := CloseAllApplicationForUninstall(ExpandConstant('{app}\'));
            if(ResultOfCloseAll = true)then
            begin
              RenameFile(ExpandConstant('{app}\WRDWIZSETUPDLL.DLL'),ExpandConstant('{tmp}\WRDWIZSETUPDLL.DLL')) ;
              RemoveAppDataFiles();
              // UnloadDLL(ExpandConstant('{app}\WRDWIZSETUPDLL.DLL'));

              if(FileExists(ExpandConstant('{app}\WRDWIZSHELLEXT_OLD.DLL')))then
              begin
                UnloadDLL(ExpandConstant('{app}\WRDWIZSHELLEXT_OLD.DLL'));

                if(FileExists(ExpandConstant('{app}\WRDWIZSHELLEXT.DLL')))then
                begin
                    DeleteFile(ExpandConstant('{app}\WRDWIZSHELLEXT.DLL'));
                    RenameFile(ExpandConstant('{app}\WRDWIZSHELLEXT_OLD.DLL'),ExpandConstant('{app}\WRDWIZSHELLEXT.DLL'));
                end
                else
                  RenameFile(ExpandConstant('{app}\WRDWIZSHELLEXT_OLD.DLL'),ExpandConstant('{app}\WRDWIZSHELLEXT.DLL'));
              end
              else
                  if(FileExists(ExpandConstant('{app}\WRDWIZSHELLEXT.DLL')))then
                  begin
                      UnloadDLL(ExpandConstant('{app}\WRDWIZSHELLEXT.DLL'));
                  end;
              end;
         end;
         if(ResultOfCloseAll = False) then
         begin
           Result := false
           MsgBox( ExpandConstant('{cm:CMWWCloseAllForUninstall}'), mbInformation, MB_OK)
         end;
end;

procedure InitializeWizard;
var
  SystemMenu: HMENU;
begin

  WizardForm.DirEdit.Enabled := false
  WizardForm.BackButton.Left := WizardForm.BackButton.Left -10;
  WizardForm.DirBrowseButton.Height := WizardForm.DirBrowseButton.Height -5;
  WizardForm.DirBrowseButton.Top := WizardForm.DirBrowseButton.Top +3;


  SystemMenu := GetSystemMenu(WizardForm.Handle, False);
  DeleteMenu(SystemMenu, 9999, MF_BYCOMMAND);
  DeleteMenu(SystemMenu, GetMenuItemCount(SystemMenu)-1, MF_BYPOSITION);



end;




