; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "WardWiz"
#define MyAppVersion "1.8.3.0"
#define MyAppPublisher "WardWiz"
#define MyAppURL "http://www.wardwiz.com/"
#define MyWardWizAppName "WardWiz"
#define AppVer ReadIni("D:\WardWizDevEPS_4.1\WWBinary.ini", "ProductVersion", "ProductVer", "0.0.0.0")
#define WRDWIZPFPATH "Program Files"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{078ABE62-583D-43e6-96D6-5D092883DC82}
AppName={#MyAppName}
AppVersion={#AppVer}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputDir=.\Output
OutputBaseFilename=incompcheckx86
SetupIconFile=Logo\COMPANYLOGO.ICO
Compression=lzma2/ultra64
SolidCompression=true
;Varada Ikhar, Date:13th May-2015, Issue:000283: In control Panel the version no. should not be mentioned. It should be WardWiz Antivirus.
UninstallDisplayName={#MyWardWizAppName}
UninstallRestartComputer=false
UninstallDisplayIcon={app}\COMPANYLOGO.ICO
UsePreviousAppDir=yes
DisableProgramGroupPage=yes
WizardImageFile=SetupImages\setup_img.bmp
WizardSmallImageFile=SetupImages\logo.bmp
AllowCancelDuringInstall=yes
ShowLanguageDialog =no
UseSetupLdr =yes
VersionInfoVersion ={#AppVer}
AllowNetworkDrive =no
AllowUNCPath =no
AppendDefaultDirName =yes
DisableDirPage =yes
SetupLogging =yes

[Languages]
Name: english; MessagesFile: compiler:Default.isl; LicenseFile: Licence\Enligh-license.txt
Name: german; MessagesFile: compiler:Languages\German.isl; LicenseFile: Licence\German-license.txt
;Name: Spanish; MessagesFile: compiler:Languages\Spanish.isl; LicenseFile: Licence\Enligh-license.txt
;Name: French; MessagesFile: compiler:Languages\French.isl; LicenseFile: Licence\Enligh-license.txt
;Name: Chinese; MessagesFile: compiler:Languages\Chinese.isl; LicenseFile: Licence\Enligh-license.txt

[CustomMessages]
CMWWPackgNotSupported =Installation package is not supported for this OS.  Please download WardWiz 64-bit setup
english.CMWWPackgNotSupported =Installation package is not supported for this OS.  Please download WardWiz 64-bit setup
german.CMWWPackgNotSupported =Die Installation wird von diesem Betriebssystem nicht unterst¸tzt. Bitte laden Sie die WardWiz 64-Bit Setup-Datei herunter.

CMWWServerEditionNotSupported =This program cannot be installed on servers.
english.CMWWServerEditionNotSupported =This program cannot be installed on servers.
german.CMWWServerEditionNotSupported =Dieses Programm kann nicht auf Windows Servern installiert werden

CMWWOSNotSupported =WardWiz recommends to upgrade your OS to a higher version, as Windows XP with Service Pack 3 is the minimum Windows version that meets the WardWiz System Requirements.
english.CMWWOSNotSupported =WardWiz recommends to upgrade your OS to a higher version, as Windows XP with Service Pack 3 is the minimum Windows version that meets the WardWiz System Requirements.
german.CMWWOSNotSupported =WardWiz empfiehlt ein Upgrade auf ein h√∂heres Betriebssystem, da mindestens Windows XP mit Service Pack 3 ben√∂tigt wird, um WardWiz ausf√ºhren zu k√∂nnen.

[LangOptions]
DialogFontSize=8
WelcomeFontName=Verdana
WelcomeFontSize=12
TitleFontName=Arial
TitleFontSize=29
CopyrightFontName=Arial
CopyrightFontSize=8
RightToLeft=no

[Tasks]
;issue default desktop icon and quick launch icon should be enable  resolve by lalit kumawat 3-19-2015
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}
Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; OnlyBelowVersion: 0,6.1


[Dirs]
Name: {app}\LOG
Name: {commonappdata}\{#MyAppName}; attribs: hidden; Flags: uninsalwaysuninstall; Tasks: 
Name: {app}; Flags: uninsalwaysuninstall; Tasks: ; Languages: 
Name: {app}\QUARANTINE; Tasks: ; Languages: 

[Files]
Source: ..\Release\Win32\Binaries\WRDWIZSETUPDLL.DLL; DestDir: {tmp}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\UNINSTALLAVREGISTRY\UNINSTALLAVLIST.xml; DestDir:{tmp};Flags:dontcopy
Source: RequiredFiles\UNINSTALLAVREGISTRY\UNINSTALLAv.cmd; DestDir: {tmp};Flags:dontcopy

[code]

var
GetAvProductx86Name,GetWWIZDriverFolder,Gettempfolder,GetFinal32AvRegInfo,TempAvName,FinalAntivirusName,FinalUninstallFirstParameter,FinalUninstallSecondParameter,GetUninstallString,GetAllUninstallAvList,GetUninstallStringSecondParam,GetUninstallStringFirstParam:String;
UninstallotherAvParam,GetUninstallFirstParam,GetUninstallStringFirstParamString:String;
GetFirstParamUninstallString,GetSecondParamUninstallString,GetAvHKLM32Reg,ISRegKeyPath32Exist,FinalUninstallStringAv,Av_DisplayIcon,Av_DisplayName,Av_Publisher,Av_UninstallString:String;
strArray: TArrayOfString;
Winhwnd:longint;


function XMLListScanningFinished():Boolean;
external 'XMLListScanningFinished@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function GetUninstallAvInfo(const GetUninstallAvDetails:string):Boolean;
external 'GetUninstallAvInfo@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

procedure ExitProcess(exitCode:integer);
external 'ExitProcess@kernel32.dll cdecl setuponly';

function PauseProtectionDrivers(): integer;
external 'PauseProtectionDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function RegisterAvInstallerWithDrivers(const AvSetupName:String): integer;
external 'RegisterAvInstallerWithDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function ProtectFolder(const ProtectFolerPath:String): integer;
external 'ProtectFolder@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function LoadValueFromUninstallOtherAVXML(const AFileName, APath: string): string;
var
  XMLNode: Variant;
  XMLNodeList: Variant;
  XMLDocument: Variant;
  Index:Integer;
begin
  Result := '';
  XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
  try
    XMLDocument.async := False;
    XMLDocument.load(AFileName);
    if (XMLDocument.parseError.errorCode <> 0) then
       begin
		exit;
        end
    else
    begin
      XMLDocument.setProperty('SelectionLanguage', 'XPath');
    XMLNodeList := XMLDocument.SelectNodes('//uninstall_information/productversion_list');
      for Index := 0 to XMLNodeList.length - 1 do
      begin
         XMLNode := XMLNodeList.item[Index];
         Result := XMLNode.text;
         GetAllUninstallAvList:= Result;
     end;
   end;
  except
	exit;
  end;
end;

function GetHKLM: Integer;
begin
if IsWin64 then
begin
   Result := HKLM64;
end
else
    Result := HKLM32;
end;

 procedure AvUninstallStringSplit(var Dest: TArrayOfString; Text: String; Separator: String);
var
  i, p: Integer;
begin
  i := 0;
  repeat
    SetArrayLength(Dest, i+1);
    p := Pos(Separator,Text);
    if p > 0 then begin
      Dest[i] := Copy(Text, 1, p-1);
      Text := Copy(Text, p + Length(Separator), Length(Text));
      if(Text='') then
      begin
           GetUninstallStringFirstParam:= Dest[i];
           GetUninstallStringFirstParamString:=GetUninstallStringFirstParam+'exe';
      end;
      i := i + 1;
    end else begin
      Dest[i] := Text;
      GetUninstallString:= Dest[i];
      GetUninstallStringSecondParam:=GetUninstallString;
      Text:='';
      if( Dest[i]=Dest[0])then
      begin
        GetUninstallStringFirstParam:=GetUninstallStringSecondParam;
        Exit;
      end
      else
         GetUninstallStringFirstParam:=Dest[i-1];
         GetUninstallStringFirstParamString:=GetUninstallStringFirstParam+'exe';
      end;
  until Length(Text)=0;
end;

function CheckAvUninstallString(CurrentUninstallString: String): TArrayOfString;
var
  CheckBitdefenderAvHKLM32Reg:String;
  GettempUninstallcmdFile,GetUninstallCmdFileData:AnsiString;
  UnicodeStr: string;
begin
    FinalUninstallStringAv:=Av_UninstallString;
    UninstallotherAvParam:='exe';
    AvUninstallStringSplit(strArray,FinalUninstallStringAv,UninstallotherAvParam);
    
    CheckBitdefenderAvHKLM32Reg:='SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Bitdefender';
    if(ISRegKeyPath32Exist=CheckBitdefenderAvHKLM32Reg)then
    begin
        ExtractTemporaryFile('UNINSTALLAV.cmd');
        GettempUninstallcmdFile := ExpandConstant('{tmp}\UNINSTALLAV.cmd');
        GetUninstallCmdFileData:='installer.exe';
        if LoadStringFromFile(GettempUninstallcmdFile,GetUninstallCmdFileData) then
        begin
          UnicodeStr := String(GetUninstallCmdFileData);
          if StringChangeEx(UnicodeStr, 'installer.exe',AddQuotes(Av_UninstallString), True) > 0 then
          SaveStringToFile(GettempUninstallcmdFile, AnsiString(UnicodeStr), False);
          FinalUninstallFirstParameter:=ExpandConstant('{tmp}\UNINSTALLAV.cmd')
          GetFirstParamUninstallString:=FinalUninstallFirstParameter;
	      GetSecondParamUninstallString:=FinalUninstallSecondParameter;
        end;
    end
    else
    if(ISRegKeyPath32Exist<>CheckBitdefenderAvHKLM32Reg)then
    begin
        GetUninstallFirstParam:=RemoveQuotes(GetUninstallStringFirstParamString);
        GetUninstallStringSecondParam:=RemoveQuotes(GetUninstallStringSecondParam);
        FinalUninstallFirstParameter:=GetUninstallFirstParam;
        if((FinalUninstallFirstParameter=GetUninstallStringSecondParam)or(GetUninstallFirstParam=GetUninstallStringSecondParam))then
        begin
            GetUninstallStringSecondParam:='';
            FinalUninstallSecondParameter:=GetUninstallStringSecondParam;
        end
        else
            GetFirstParamUninstallString:=AddQuotes(FinalUninstallFirstParameter);
            FinalUninstallSecondParameter:=GetUninstallStringSecondParam;
			CheckBitdefenderAvHKLM32Reg:='SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\InstallWIX_{D891550B-ACFE-4797-B368-BCFC434BBEB1}';
            if(ISRegKeyPath32Exist=CheckBitdefenderAvHKLM32Reg)then
            begin 
            GetSecondParamUninstallString:=GetUninstallStringSecondParam;
            end
            else
            GetSecondParamUninstallString:=FinalUninstallSecondParameter;
        end;
end;

Function UninstallAvInfo(Expression: String; Separator: String): TArrayOfString;
Var
   i: Integer;
   tmpArray : TArrayOfString;
   curString: String;
Begin
    i := 0;
    curString := Expression;

    Repeat
        SetArrayLength(tmpArray, i+1);
        If Pos(Separator,curString) > 0 Then    Begin
            tmpArray[i] := Copy(curString, 1, Pos(Separator, curString)-1);
            TempAvName:=tmpArray[i];
             FinalAntivirusName:=Trim(TempAvName);
            curString := Copy(curString, Pos(Separator,curString) + Length(Separator), Length(curString));
            i := i + 1;
             if(FinalAntivirusName<>'') then
             begin
            GetAvHKLM32Reg:='SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\'+FinalAntivirusName;
                   ISRegKeyPath32Exist:=GetAvHKLM32Reg;
                   if(RegKeyExists(GetHKLM,ISRegKeyPath32Exist)) then
                   begin
                        RegQueryStringValue(GetHKLM,ISRegKeyPath32Exist,'DisplayIcon', Av_DisplayIcon);
                        RegQueryStringValue(GetHKLM,ISRegKeyPath32Exist,'Publisher', Av_Publisher);
                        RegQueryStringValue(GetHKLM,ISRegKeyPath32Exist,'DisplayName', Av_DisplayName);
                        RegQueryStringValue(GetHKLM,ISRegKeyPath32Exist, 'UninstallString', Av_UninstallString);
                        CheckAvUninstallString(Av_UninstallString);
                        if((Av_DisplayIcon='')and(Av_DisplayName='')and(Av_Publisher='')and(Av_UninstallString=''))then
                        begin
                                RegDeleteKeyIncludingSubkeys(GetHKLM,ISRegKeyPath32Exist);
                                Exit;
                         end
                         else
                         begin
							            if(Av_DisplayName='') then
                            begin
                           GetFinal32AvRegInfo:=Av_DisplayIcon+' | '+Av_Publisher+' | '+GetFirstParamUninstallString+' | '+GetSecondParamUninstallString;
                                 end
                                 else
									           GetFinal32AvRegInfo:=Av_DisplayIcon+' | '+Av_DisplayName+' | '+GetFirstParamUninstallString+' | '+GetSecondParamUninstallString;
								 	               end;
                                if(GetFinal32AvRegInfo='')then
                                 begin
                                      ExitProcess(0);
                                 end
                                 else
                                        GetUninstallAvInfo(GetFinal32AvRegInfo);	
								end;	
         end;                                           
        End Else Begin
             tmpArray[i] := curString;
             curString := '';
        End;
    Until Length(curString)=0;
    XMLListScanningFinished();
    Result:= tmpArray;
End;

function GetUninstallerPath: string;
var
  RegKey: string;
begin
  Result := '';
  if IsWin64  then
  begin
    RegKey := Format('%s_is1', ['SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{{6F8638DF-98DF-4D11-85B0-7BB380EF03AB}']);
    RegKey := ExpandConstant(RegKey);
    if RegKeyExists(HKEY_LOCAL_MACHINE,RegKey) then
    begin
      if MsgBox( ExpandConstant('{cm:CMWWUninstallPrevVer}'),
      mbConfirmation, MB_YESNO) = IDYES then

    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, RegKey, 'UninstallString', Result) then
    RegQueryStringValue(HKEY_CURRENT_USER, RegKey, 'UninstallString', Result);

   end;
   end;
   if not IsWin64  then
    begin
    RegKey := Format('%s_is1', ['SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{{6F8638DF-98DF-4D11-85B0-7BB380EF03AB}']);
    RegKey := ExpandConstant(RegKey);
    if RegKeyExists(HKEY_LOCAL_MACHINE,RegKey) then
    begin
      if MsgBox( ExpandConstant('{cm:CMWWPrevVerInstalled}'),
      mbConfirmation, MB_YESNO) = IDYES then

    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, RegKey, 'UninstallString', Result) then
    RegQueryStringValue(HKEY_CURRENT_USER, RegKey, 'UninstallString', Result);

   end ;
   end;

 end;

function InitializeSetup: Boolean;
var
  UninstPath: string;
  ResultCode: Integer;
  Version: TWindowsVersion;
begin

	if IsWin64 then
	begin
		MsgBox( ExpandConstant('{cm:CMWWPackgNotSupported}') , mbError, MB_OK);
		ExitProcess(0);
	end;
	
    // check for lower version of windows XP SP3 and windows server
  GetWindowsVersionEx(Version);
  if Version.ProductType = VER_NT_SERVER then
    begin
        MsgBox( ExpandConstant('{cm:CMWWServerEditionNotSupported}'), mbError, MB_OK);
        Result := False;
        Exit;
    end;
    if Version.NTPlatform and
       (Version.Major <= 5) and
       (Version.Minor <= 1) and
       (Version.ServicePackMajor < 3) then
    begin
      MsgBox( ExpandConstant('{cm:CMWWOSNotSupported}'), mbError, MB_OK);
      Result := False;
      Exit;
    end;

  Result := True;

	UninstPath := RemoveQuotes(GetUninstallerPath);
	if UninstPath <> '' then
	begin
      begin
       Result := True;
       if not Exec(UninstPath, '', '', SW_SHOW, ewNoWait, ResultCode) then
          MsgBox(FmtMessage(SetupMessage(msgUninstallOpenError), [UninstPath]), mbError, MB_OK);
      end;
	end;
end;

procedure InitializeWizard;
begin
  GetWWIZDriverFolder:=ExpandConstant('{sd}\')+ExpandConstant('{#WRDWIZPFPATH}')+'\WARDWIZ\DRIVERS';
	if (DirExists(GetWWIZDriverFolder))then
	begin
				GetAvProductx86Name:=('{#SetupSetting("OutputBaseFilename")}');
				RegisterAvInstallerWithDrivers(GetAvProductx86Name);
				Gettempfolder:=ExpandConstant('{tmp}');		
				ProtectFolder(Gettempfolder);
				ExtractTemporaryFile('UNINSTALLAVLIST.xml');
				LoadValueFromUninstallOtherAVXML(ExpandConstant('{tmp}\UNINSTALLAVLIST.xml'), '//uninstall_information/productversion_list/');
				UninstallAvInfo(GetAllUninstallAvList, ',');
				if(GetFinal32AvRegInfo='') then
	      begin
							UnloadDLL(ExpandConstant('{tmp}\WRDWIZSETUPDLL.DLL'));
							DeleteFile(ExpandConstant('{tmp}\WRDWIZSETUPDLL.DLL'));
							DelTree(ExpandConstant('{tmp}'), True, True, True);
							if FileExists(ExpandConstant('{tmp}\incompcheckx86.tmp')) then
							begin
										DelayDeleteFile(ExpandConstant('{tmp}\incompcheckx86.tmp'), 2);
									DelTree(ExpandConstant('{tmp}'), True, True, True);
							end;
							RemoveDir(ExpandConstant('{tmp}'));
							ExitProcess(0);
				end
				else
						repeat
						Winhwnd:=FindWindowByWindowName('WARDWIZINSTALLER');		
						until Winhwnd=0;
								UnloadDLL(ExpandConstant('{tmp}\WRDWIZSETUPDLL.DLL'));
								DeleteFile(ExpandConstant('{tmp}\WRDWIZSETUPDLL.DLL'));
								DelTree(ExpandConstant('{tmp}'), True, True, True);
								if FileExists(ExpandConstant('{tmp}\incompcheckx86.tmp')) then
								begin
											DelayDeleteFile(ExpandConstant('{tmp}\incompcheckx86.tmp'), 2);
										DelTree(ExpandConstant('{tmp}'), True, True, True);
								end;
								RemoveDir(ExpandConstant('{tmp}'));
								ExitProcess(0);
						end;
	end;