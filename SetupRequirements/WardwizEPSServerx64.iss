; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "WardWiz"
#define MyWardWizEliteAppName "WardWiz Server"
#define MyAppVersion "1.5"
#define MyAppPublisher "WardWiz"
#define MyAppURL "http://www.wardwiz.com/"
#define MyAppExeName "WRDWIZUI.EXE"
#define MyAppExeName1 "WRDWIZAUTORUNSCN.EXE"
#define MyAppExeName2 "WRDWIZTEMPCLR.EXE"
#define MyAppExeName3 "WRDWIZUSBVAC.EXE"
#define MyWardWizAppName "WardWiz"
#define MyWardWizAppNameShortcut "WardWiz Client"
#define MyUtility_1 "AUTORUN SCANNER"
#define MyUtility_2 "TEMPORARY FILE CLEANER"
#define MyUtility_3 "USB VACCINATOR"
#define Utility "Utilities"
#define AppVer ReadIni("D:\WardWizDevEPS_4.1\WWBinary.ini", "ProductVersion", "ProductVer", "0.0.0.0")
#define DataVer ReadIni("D:\WardWizDevEPS_4.1\WWBinary.ini", "DatabaseVersion", "DatabaseVer", "1.1.3.1")
#define DataEncVer ReadIni("D:\WardWizDevEPS_4.1\WWBinary.ini", "DataEncVersion", "DataEncVer", "0.0")
#define ScanEngVer ReadIni("D:\WardWizDevEPS_4.1\WWBinary.ini", "ScanEngineVersion", "ScanEngineVer", "2.5.1.0")
#define REDESTRIBUTABLES "vcredist_x64.exe"
#define ResIconReg "WardWiz.PATH.1.10.RES"
#define ResFileName "WRDWIZRESOURCE.DLL,-1156"

#define ExecuteExeRegEntrySecParam  "%1"
#define ExecuteExeRegEntryThirdParam "-DEC "
#define SupportNo "1800-266-1229"
#define SupportNumberClam ReadIni("D:\WardWizDevEPS_4.1\WWBinary.ini", "SupportNo", "SupportNumberClam", "1800-266-1229")
#define SupportNumberNC ReadIni("D:\WardWizDevEPS_4.1\WWBinary.ini", "SupportNo", "SupportNumberNC", "")

#define PPSECURE64 "WRDWIZREGPROT.SYS"
#define PPXPROC "WRDWIZXPPROC.SYS"
#define FPSCANNER "WRDWIZFILEPROT.SYS"


[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{078ABE62-583D-43e6-96D6-5D092883DC82}
AppName={#MyAppName}
AppVersion={#AppVer}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputDir=.\Output
OutputBaseFilename=WardWizEPSServerSetupx64
SetupIconFile=Logo\COMPANYLOGO.ICO
Compression=lzma2/ultra64
SolidCompression=true
;Varada Ikhar, Date:13th May-2015, Issue:000283: In control Panel the version no. should not be mentioned. It should be WardWiz Antivirus.
UninstallDisplayName={#MyWardWizAppName}
UninstallRestartComputer=false
UninstallDisplayIcon={app}\COMPANYLOGO.ICO
UsePreviousAppDir=yes
DisableProgramGroupPage=yes
WizardImageFile=SetupImages\setup_img.bmp
WizardSmallImageFile=SetupImages\logo.bmp
AllowCancelDuringInstall=yes
ShowLanguageDialog =yes
ArchitecturesAllowed =x64
ArchitecturesInstallIn64BitMode=x64
UseSetupLdr =yes
VersionInfoVersion ={#AppVer}
AllowNetworkDrive = no
AllowUNCPath = no
AppendDefaultDirName = yes
DisableDirPage = yes
SetupLogging = yes



[Languages]
Name: english; MessagesFile: compiler:Default.isl; LicenseFile: Licence\Enligh-license.txt
Name: german; MessagesFile: compiler:Languages\German.isl; LicenseFile: Licence\German-license.txt
;Name: Spanish; MessagesFile: compiler:Languages\Spanish.isl; LicenseFile: Licence\Enligh-license.txt
;Name: French; MessagesFile: compiler:Languages\French.isl; LicenseFile: Licence\Enligh-license.txt
;Name: Chinese; MessagesFile: compiler:Languages\Chinese.isl; LicenseFile: Licence\Enligh-license.txt

[CustomMessages]
CMWWInstallRedistriFailed =Installation of C++ Redestributables failed. Exit code:
english.CMWWInstallRedistriFailed=Installation of C++ Redestributables failed. Exit code:
german.CMWWInstallRedistriFailed=Einbau von C ++ Redestributables fehlgeschlagen. Exit-Code:

CMWWAlreadyInstalled1 =WardWiz is already installed at
english.CMWWAlreadyInstalled1 =WardWiz is already installed at
german.CMWWAlreadyInstalled1 =WardWiz wurde bereits installiert auf

CMWWAlreadyInstalled2 =Please uninstall it from previous path to continue setup installation.
english.CMWWAlreadyInstalled2 =Please uninstall it from previous path to continue setup installation.
german.CMWWAlreadyInstalled2 =Bitte deinstallieren Sie es mit dem vorherigen Pfad um mit der Setup-Installation fortzufahren.

CMWWCloseAllWWApp =Please close all running WardWiz application(s) for reinstallation
english.CMWWCloseAllWWApp =Please close all running WardWiz application(s) for reinstallation
german.CMWWCloseAllWWApp =Bitte schließen Sie alle laufenden WardWiz Anwendung(en) um die Neuinstallation durchführen zu können.

CMWWDeleteQuarantineFolder =Do you want to delete the quarantine folder?
english.CMWWDeleteQuarantineFolder =Do you want to delete the quarantine folder?
german.CMWWDeleteQuarantineFolder =Wollen Sie den Quarantäne-Ordner löschen ?

CMWWRemoveSuccess=WardWiz was successfully removed from your computer. //just in case (should be equal to English)
english.CMWWRemoveSuccess=WardWiz was successfully removed from your computer.
german.CMWWRemoveSuccess=WardWiz wurde erfolgreich von Ihrem Computer entfernt.

CMWWRestartReq =To complete the uninstallation of WardWiz, your computer must be restarted. Would you like to restart now? //just in case (should be equal to English)
english.CMWWRestartReq=To complete the uninstallation of WardWiz, your computer must be restarted. Would you like to restart now?
german.CMWWRestartReq=Ihr Computer muss neu gestartet werden, um die Deinstallation vonWardWiz abzuschließen. Möchten Sie jetzt neu starten ?

CMWWUninstallPrevVer =Do you want to uninstall previous version?
english.CMWWUninstallPrevVer =Do you want to uninstall previous version?
german.CMWWUninstallPrevVer =Wollen Sie die vorherige Version deinstallieren ?

CMWWPrevVerInstalled =Previous version of WardWiz is already installed, Do you want to uninstall previous version?
english.CMWWPrevVerInstalled =Previous version of WardWiz is already installed, Do you want to uninstall previous version?
german.CMWWPrevVerInstalled =Die vorherige Version von WardWiz ist bereits installiert. Wollen Sie die vorherige Version deinstallieren?

CMWWAnotherInstanceRunning =Another instance of WardWiz Setup is already running.
english.CMWWAnotherInstanceRunning =Another instance of WardWiz Setup is already running.
german.CMWWAnotherInstanceRunning =Eine andere Ausführung des WardWiz-Setups läuft bereits.

CMWWPackgNotSupported =Installation package is not supported for this OS.  Please download WardWiz 32-bit setup
english.CMWWPackgNotSupported =Installation package is not supported for this OS.  Please download WardWiz 32-bit setup
german.CMWWPackgNotSupported =Die Installation wird von diesem Betriebssystem nicht unterstützt. Bitte laden Sie die WardWiz 32-Bit Setup-Datei herunter.

CMWWRemoveAll =Are you sure you want to completely remove WardWiz and all of its components?
english.CMWWRemoveAll =Are you sure you want to completely remove WardWiz and all of its components?
german.CMWWRemoveAll =Sind Sie sicher, dass Sie WardWiz und alle damit verbundenen Komponenten vollständig entfernen möchten?

CMWWCloseAllForUninstall =Please close all running WardWiz application(s) and try again for uninstallation
english.CMWWCloseAllForUninstall =Please close all running WardWiz application(s) and try again for uninstallation
german.CMWWCloseAllForUninstall =Bitte schließen Sie alle laufenden WardWiz Anwendungen und versuchen Sie die Deinstallation erneut.

CMWWStringConstAddFailed =Failed to install setup. Please try again.
english.CMWWStringConstAddFailed =Failed to install setup. Please try again.
german.CMWWStringConstAddFailed =Setup-Installation fehlgeschlagen. Bitte versuchen Sie es erneut.

CMWWInstallStatusMSG =Installing WardWiz...
english.CMWWInstallStatusMSG =Installing WardWiz...
german.CMWWInstallStatusMSG =WardWiz wird installiert...

CMWWServerEditionNotSupported =This program cannot be installed on servers.
english.CMWWServerEditionNotSupported =This program cannot be installed on servers.
german.CMWWServerEditionNotSupported =Dieses Programm kann nicht auf Windows Servern installiert werden

CMWWOSNotSupported =WardWiz recommends to upgrade your OS to a higher version, as Windows XP with Service Pack 3 is the minimum Windows version that meets the WardWiz System Requirements.
english.CMWWOSNotSupported =WardWiz recommends to upgrade your OS to a higher version, as Windows XP with Service Pack 3 is the minimum Windows version that meets the WardWiz System Requirements.
german.CMWWOSNotSupported =WardWiz empfiehlt ein Upgrade auf ein höheres Betriebssystem, da mindestens Windows XP mit Service Pack 3 benötigt wird, um WardWiz ausführen zu können.

CM_0_WWSetupDllAppRunningUnInstall =Some of the applications of WardWiz are running. Do you want close in order to continue Uninstallation?
english.CM_0_WWSetupDllAppRunningUnInstall =Some of the applications of WardWiz are running. Do you want close in order to continue Uninstallation?
german.CM_0_WWSetupDllAppRunningUnInstall =Einige WardWiz-Anwendungen laufen gerade. Möchten Sie diese schließen, um die Deinstallation fortsetzen?

CM_1_WWSetupDllAppRunningReInstall =Some of the applications of WardWiz are running. Do you want close in order to continue Re-Installation?
english.CM_1_WWSetupDllAppRunningReInstall =Some of the applications of WardWiz are running. Do you want close in order to continue Re-Installation?
german.CM_1_WWSetupDllAppRunningReInstall =Einige WardWiz-Anwendungen laufen gerade. Möchten Sie diese schließen, um die Re-installation fortsetzen?

CM_2_WWSetupDllOutlookCloseInstall =Outlook application needs to be closed before installing WardWiz. Please close and click on retry button.
english.CM_2_WWSetupDllOutlookCloseInstall =Outlook application needs to be closed before installing WardWiz. Please close and click on retry button.
german.CM_2_WWSetupDllOutlookCloseInstall =Outlook-Anwendung muss vor der Installation von WardWiz geschlossen werden. Bitte schließen Sie die Anwendung und klicken Sie auf "Wiederholen".

CM_3_WWSetupDllOutlookCloseUnInstall =Outlook application needs to be closed before uninstalling WardWiz. Please close and click on retry button.
english.CM_3_WWSetupDllOutlookCloseUnInstall =Outlook application needs to be closed before uninstalling WardWiz. Please close and click on retry button.
german.CM_3_WWSetupDllOutlookCloseUnInstall =Outlook-Anwendung muss vor der Deinstallation WardWiz geschlossen werden. Bitte schließen Sie die Anwendung und klicken Sie auf "Wiederholen".

CM_4_WWSetupDllInstallPatches =WardWiz is running. Do you want to close WardWiz to install patches?
english.CM_4_WWSetupDllInstallPatches =WardWiz is running. Do you want to close WardWiz to install patches?
german.CM_4_WWSetupDllInstallPatches =WardWiz läuft. Möchten Sie WardWiz schließen, um Patches zu installieren ?

CM_5_WWSetupDllClose =WardWiz is running. Do you want to close?
english.CM_5_WWSetupDllClose =WardWiz is running. Do you want to close?
german.CM_5_WWSetupDllClose =WardWiz läuft. Möchten Sie schließen?

CM_6_WWSetupDllUnInstallContinue =Currently the %s version is installed on your machine. Please uninstall it to continue.
english.CM_6_WWSetupDllUnInstallContinue  =Currently the %s version is installed on your machine. Please uninstall it to continue.
german.CM_6_WWSetupDllUnInstallContinue  =Derzeit ist die %s Version auf Ihrem Rechner installiert. Bitte deinstallieren Sie diese, um fortfahren zu können.

CM_7_WWSetupDllLatestInstalled  =Latest version of WardWiz is already installed.
english.CM_7_WWSetupDllLatestInstalled  =Latest version of WardWiz is already installed.
german.CM_7_WWSetupDllLatestInstalled  =Neueste Version von WardWiz ist bereits installiert.

CM_8_WWSetupDllLatestInstalled  =WardWiz is already installed. Do you want to reinstall?
english.CM_8_WWSetupDllLatestInstalled  =WardWiz is already installed. Do you want to reinstall?
german.CM_8_WWSetupDllLatestInstalled  =WardWiz ist bereits installiert. Möchten Sie trotzdem neu installieren ?

CM_9_WWSetupDllCustomMsgBoxButtonYes  =Yes
english.CM_9_WWSetupDllCustomMsgBoxButtonYes =Yes
german.CM_9_WWSetupDllCustomMsgBoxButtonYes =Ja

CM_10_WWSetupDllCustomMsgBoxButtonYesToAll  =Yes to All
english.CM_10_WWSetupDllCustomMsgBoxButtonYesToAll =Yes to All
german.CM_10_WWSetupDllCustomMsgBoxButtonYesToAll =Ja zu allem

CM_11_WWSetupDllCustomMsgBoxButtonNo  =No
english.CM_11_WWSetupDllCustomMsgBoxButtonNo =No
german.CM_11_WWSetupDllCustomMsgBoxButtonNo =Nein

CM_12_WWSetupDllCustomMsgBoxButtonNoToAll  =No to All
english.CM_12_WWSetupDllCustomMsgBoxButtonNoToAll =No to All
german.CM_12_WWSetupDllCustomMsgBoxButtonNoToAll =Nein zu allem

CM_13_WWSetupDllCustomMsgBoxButtonCancel  =Cancel
english.CM_13_WWSetupDllCustomMsgBoxButtonCancel =Cancel
german.CM_13_WWSetupDllCustomMsgBoxButtonCancel =Abbrechen

CM_14_WWCustomMsgInnerFirstPage  =Server Information
english.CM_14_WWCustomMsgInnerFirstPage =Server Information
german.CM_14_WWCustomMsgInnerFirstPage =Server-Informationen

CM_15_WWCustomSecondMsgInnerFirstPage  =Provide the server details
english.CM_15_WWCustomSecondMsgInnerFirstPage =Provide the server details
german.CM_15_WWCustomSecondMsgInnerFirstPage =Geben Sie die Serverdetails an

CM_16_WWCustomThirdMsgInnerFirstPage  =Provide the domain name or IP Address of the target Server where Wardwiz Endpoint Security will be installed.Specify the HTTPport and SSL port.
english.CM_16_WWCustomThirdMsgInnerFirstPage  =Provide the domain name or IP Address of the target Server where Wardwiz Endpoint Security will be installed.Specify the HTTPport and SSL port.
german.CM_16_WWCustomThirdMsgInnerFirstPage  =Geben Sie den DomÃ¤nennamen oder die IP Adresse des Zielservers an,auf dem Wardwiz Endpoint Security installiert werden soll,geben Sie den HTTP und SSL Port an.

CM_17_WWCustomMsgServerInfoDomainNameFirstPage  =DomainName
english.CM_17_WWCustomMsgServerInfoDomainNameFirstPage=DomainName
german.CM_17_WWCustomMsgServerInfoDomainNameFirstPage =DomainName

CM_18_WWCustomMsgServerInfoIPAddressFirstPage  =IP Address
english.CM_18_WWCustomMsgServerInfoIPAddressFirstPage  =IP Address
german.CM_18_WWCustomMsgServerInfoIPAddressFirstPage  =IP-Adresse

CM_19_WWFirstCustomMsgServerInfoFirstPage  =Public Installation(Select if you are installing Wardwiz Endpoint Security on a
english.CM_19_WWFirstCustomMsgServerInfoFirstPage  =Public Installation(Select if you are installing Wardwiz Endpoint Security on a system
german.CM_19_WWFirstCustomMsgServerInfoFirstPage  =Öffentliche Installation(Wählen Sie diese Option wenn Sie Wardwiz Endpoint

CM_20_WWSecondCustomMsgServerInfoFirstPage  =system hosted on the AWS/Azure or similar platforms)choose to protect it by
english.CM_20_WWSecondCustomMsgServerInfoFirstPage  =hosted on the AWS/Azure or similar platforms)choose to protect it by enabling
german.CM_20_WWSecondCustomMsgServerInfoFirstPage  = Securityauf einem Systemdas auf der AWS/Azure oder ähnlichen Plattformengehostet

CM_21_WWThirdCustomMsgServerInfoFirstPage  =enabling password protection for the same.
english.CM_21_WWThirdCustomMsgServerInfoFirstPage =password protection for the same.
german.CM_21_WWThirdCustomMsgServerInfoFirstPage  =wird)wählen Sie,um es zu schützen durch Aktivieren des Passwortschutzes für dasselbe.

CM_22_WWCustomMsgHttpFirstPage  =HTTP
english.CM_22_WWCustomMsgHttpFirstPage =HTTP
german.CM_22_WWCustomMsgHttpFirstPage  =HTTP

CM_23_WWCustomMsgHttpPortFirstPage  =HTTP Port:
english.CM_23_WWCustomMsgHttpPortFirstPage =HTTP Port
german.CM_23_WWCustomMsgHttpPortFirstPage  =HTTP Port

CM_24_WWCustomMsgSslPortMsgFirstPage=Enable Secure Socket Layer
english.CM_24_WWCustomMsgSslPortMsgFirstPage =Enable Secure Socket Layer
german.CM_24_WWCustomMsgSslPortMsgFirstPage  =Secure Socket Layer aktivieren

CM_25_WWCustomMsgSslPortFirstPage=SSL Port
english.CM_25_WWCustomMsgSslPortFirstPage =SSL Port
german.CM_25_WWCustomMsgSslPortFirstPage  =SSL port

CM_26_WWCustomMsgSslFirstPage=SSL
english.CM_26_WWCustomMsgSslFirstPage =SSL
german.CM_26_WWCustomMsgSslFirstPage  =SSL

CM_27_WWFirstCustomMsgSecondPage=Proxy Settings
english.CM_27_WWFirstCustomMsgSecondPage =Proxy Settings
german.CM_27_WWFirstCustomMsgSecondPage  =Proxy-Einstellungen

CM_28_WWCustomMsgSecondPage=Provide proxy settings if any.
english.CM_28_WWCustomMsgSecondPage =Provide proxy settings if any.
german.CM_28_WWCustomMsgSecondPage  =Geben Sie ggf. Proxy-Einstellungen an.

CM_29_WWCustomLongFirstProxyMsgSecondPage=If you are using a proxy to connect to the Internet then provide the Proxy information.Wardwiz Endpoint
english.CM_29_WWCustomLongFirstProxyMsgSecondPage =If you are using a proxy to connect to the Internet then provide the Proxy information.Wardwiz Endpoint
german.CM_29_WWCustomLongFirstProxyMsgSecondPage=Wenn Sie einen Proxy fÃ¼r die Verbindung zum Internet verwenden, geben Sie die Proxy-Informationen Wardwiz Endpoint an.

CM_30_WWCustomLongSecondProxyMsgSecondPage= Security requires these information to register and download the updates.
english.CM_30_WWCustomLongSecondProxyMsgSecondPage = Security requires these information to register and download the updates.
german.CM_30_WWCustomLongSecondProxyMsgSecondPage=Die Sicherheit erfordert diese Informationen, um sich zu registrieren und die Updates herunterzuladen.

CM_31_WWCustomSecondProxyTypeMsgSecondPage=Enable Proxy Settings
english.CM_31_WWCustomSecondProxyTypeMsgSecondPage =Enable Proxy Settings
german.CM_31_WWCustomSecondProxyTypeMsgSecondPage=Proxy-Einstellungen aktivieren

CM_32_WWCustomSecondProxyTypeMsgSecondPage=Proxy Type
english.CM_32_WWCustomSecondProxyTypeMsgSecondPage =Proxy Type
german.CM_32_WWCustomSecondProxyTypeMsgSecondPage=Proxy-Typ

CM_33_WWCustomSecondProxyServerMsgSecondPage=Proxy Server
english.CM_33_WWCustomSecondProxyServerMsgSecondPage =Proxy Server
german.CM_33_WWCustomSecondProxyServerMsgSecondPage=Proxy-Server

CM_34_WWCustomSecondProxyPortMsgSecondPage=Port
english.CM_34_WWCustomSecondProxyPortMsgSecondPage =Port
german.CM_34_WWCustomSecondProxyPortMsgSecondPage=Port

CM_35_WWCustomSecondAuthenticationProxyTypeMsgSecondPage=Authenticate to connect through Proxy
english.CM_35_WWCustomSecondAuthenticationProxyTypeMsgSecondPage =Authenticate to connect through Proxy
german.CM_35_WWCustomSecondAuthenticationProxyTypeMsgSecondPage=Authentifizierung zur Verbindung Ã¼ber Proxy

CM_36_WWCustomSecondProxyTypeMsgSecondPage=Enable Proxy Settings
english.CM_36_WWCustomSecondProxyTypeMsgSecondPage =Enable Proxy Settings
german.CM_36_WWCustomSecondProxyTypeMsgSecondPage=Proxy Einstellungen aktivieren

CM_37_WWCustomSecondUsernameMsgSecondPage=Username
english.CM_37_WWCustomSecondUsernameMsgSecondPage =Username
german.CM_37_WWCustomSecondUsernameMsgSecondPage=Username

CM_38_WWCustomSecondPasswordMsgSecondPage=Password
english.CM_38_WWCustomSecondPasswordMsgSecondPage =Password
german.CM_38_WWCustomSecondPasswordMsgSecondPage=Passwort

CM_39_WWCustomFirstMsgThirdPage=Authentication
english.CM_39_WWCustomFirstMsgThirdPage =Authentication
german.CM_39_WWCustomFirstMsgThirdPage=Authentifizierung

CM_40_WWCustomSecondMsgThirdPage=Perevent unauthorized access
english.CM_40_WWCustomSecondMsgThirdPage =Perevent unauthorized access
german.CM_40_WWCustomSecondMsgThirdPage=Perevent unbefugter Zugriff

CM_41_WWCustomThirdMsgThirdPage= Specify Dministrctor password to access Wardwiz Endpoint Security Webpage.
english.CM_41_WWCustomThirdMsgThirdPage = Specify Dministrctor password to access Wardwiz Endpoint Security Webpage.
german.CM_41_WWCustomThirdMsgThirdPage= Geben Sie das Administratorkennwort an,um auf die Wardwiz Endpoint Security Webseite zuzugreifen.

CM_42_WWCustomEndpointSecurityMsgThirdPage= Endpoint Security Administrator Password
english.CM_42_WWCustomEndpointSecurityMsgThirdPage = Endpoint Security Administrator Password
german.CM_42_WWCustomEndpointSecurityMsgThirdPage= Endgerätesicherheit Administrator-Passwort

CM_43_WWCustomEndpointSecurityPwdMsgThirdPage= Password
english.CM_43_WWCustomEndpointSecurityPwdMsgThirdPage = Password
german.CM_43_WWCustomEndpointSecurityPwdMsgThirdPage= Passwort

CM_44_WWCustomEndpointSecurityConfirmPwdMsgThirdPage= Confirm Password
english.CM_44_WWCustomEndpointSecurityConfirmPwdMsgThirdPage = Confirm Password
german.CM_44_WWCustomEndpointSecurityConfirmPwdMsgThirdPage= Passwort bestätigen

CM_45_WWCustomThirdMsgThirdPage= To protect anti-virsus options from being chnages without your permission,you can choose to protect it by enabling password protection for the same.
english.CM_45_WWCustomThirdMsgThirdPage = To protect anti-virsus options from being chnages without your permission
german.CM_45_WWCustomThirdMsgThirdPage=Um Anti-Viren-Optionen davor zu schützen,ohne Ihre Erlaubnis Chnages zu sein,können

CM_46_WWCustomThirdMsgThirdPage=you can choose to protect it by enabling password protection for the same.
german.CM_46_WWCustomThirdMsgThirdPage=sie schützen, indem Sie den Passwortschutz für diese Option aktivieren.

CM_47_WWCustomThirdMsgThirdPage=Client Password
english.CM_47_WWCustomThirdMsgThirdPage =Client Password
german.CM_47_WWCustomThirdMsgThirdPage= Kundenpasswort

CM_48_WWCustomThirdMsgThirdPage= Password
english.CM_48_WWCustomThirdMsgThirdPage =Password
german.CM_48_WWCustomThirdMsgThirdPage= Passwort

CM_49_WWCustomThirdMsgThirdPage= Confirm Password
english.CM_49_WWCustomThirdMsgThirdPage =Confirm Password
german.CM_49_WWCustomThirdMsgThirdPage= Passwort bestätigen

CM_50_WWCustomFirstMsgFourthPage= Installation of
english.CM_50_WWCustomFirstMsgFourthPage =Installation of
german.CM_50_WWCustomFirstMsgFourthPage= Installation von

CM_51_WWCustomFirstMsgFourthPage= .Net Framework 4.5 and Sql Server 2012
english.CM_51_WWCustomFirstMsgFourthPage =.Net Framework 4.5 and Sql Server 2012
german.CM_51_WWCustomFirstMsgFourthPage= Net Framework 4.5 und Sql Server 2012.

CM_52_WWCustomDotNetShowMsgThirdPage= Installing .NET Framework 4.5 ,This might take a few minutes...
english.CM_52_WWCustomFirstMsgThirdPage =Installing .NET Framework 4.5 ,This might take a few minutes...
german.CM_52_WWCustomFirstMsgThirdPage= Die Installation von .NET Framework 4.5 ,Dies kann einige Minuten dauern...

CM_53_WWCustomSqlServerShowMsgThirdPage= Installing Sql Server 2012 ,This might take a few minutes...
english.CM_53_WWCustomSqlServerShowMsgThirdPage =Installing Sql Server 2012 ,This might take a few minutes...
german.CM_53_WWCustomSqlServerShowMsgThirdPage= Die Installation von Sql Server 2012 ,Dies kann einige Minuten dauern...

CM_54_WWCustomListofSoftwareInstallMsgThirdPage= Below Given External Software Setup List Now Installing Your Machine:
english.CM_54_WWCustomListofSoftwareInstallMsgThirdPage =Below Given External Software Setup List Now Installing Your Machine:
german.CM_54_WWCustomListofSoftwareInstallMsgThirdPage= Nachfolgend die Liste der externen Software-Einstellungen,die jetzt die

CM_55_WWCustomDotNetfrmwrkShowMsgThirdPage= Dot Net Framework 4.5
english.CM_55_WWCustomDotNetfrmwrkShowMsgThirdPage =Dot Net Framework 4.5
german.CM_55_WWCustomDotNetfrmwrkShowMsgThirdPage= Dot Net Framework 4.5

CM_56_WWCustomSqlServerSoftwareInstallThirdPage=Microsoft Sql Server 2012
english.CM_56_WWCustomSqlServerSoftwareInstallThirdPage =Microsoft Sql Server 2012
german.CM_56_WWCustomSqlServerSoftwareInstallThirdPage= Microsoft Sql Server 2012

CM_57_WWCustomAllPasswordEntrieBlankFourthPage=Please Fill out Password  Required.
english.CM_57_WWCustomAllPasswordEntrieBlankFourthPage =Please Fill out Password  Required.
german.CM_57_WWCustomAllPasswordEntrieBlankFourthPage= Bitte geben Sie das erforderliche Passwort ein.

CM_58_WWCustomClientPasswordEntrieBlankFourthPage=Please,Enter Client password Minimum 3 Characters.
english.CM_58_WWCustomClientPasswordEntrieBlankFourthPage =Please,Enter Client password Minimum 3 Characters.
german.CM_58_WWCustomClientPasswordEntrieBlankFourthPage= Bitte geben Sie das Kundenpasswort ein, mindestens 3 Zeichen.

CM_59_WWCustomAdminPasswordEntrieBlankFourthPage=Please,Enter Admin password Minimum 3 Characters.
english.CM_59_WWCustomAdminPasswordEntrieBlankFourthPage =Please,Enter Admin password Minimum 3 Characters.
german.CM_59_WWCustomAdminPasswordEntrieBlankFourthPage= Bitte geben Sie das Admin-Passwort ein, mindestens 3 Zeichen.

CM_60_CustomAdminPasswordEntrieNotSameFourthPage=Please Admin Enter Same Password.
english.CM_60_CustomAdminPasswordEntrieNotSameFourthPage =Please Admin Enter Same Password.
german.CM_60_CustomAdminPasswordEntrieNotSameFourthPage= Bitte geben Sie das gleiche Passwort ein.

CM_61_CustomClientPasswordEntrieNotSameFourthPage=Please Client Enter Same Password.
english.CM_61_CustomClientPasswordEntrieNotSameFourthPage =Please Client Enter Same Password.
german.CM_61_CustomClientPasswordEntrieNotSameFourthPage= Bitte geben Sie das gleiche Passwort ein.

CM_62_CustomClientPasswordEntrieNotSameFourthPage=
german.CM_62_CustomClientPasswordEntrieNotSameFourthPage= Installation Ihres Geräts ermöglicht:

CM_63_CustomServerInformationBlankPortPage=Please Fill the Http Port and Ssl Port Required.
english.CM_63_CustomServerInformationBlankPortPage=Please Fill the Http Port and Ssl Port Required.
german.CM_63_CustomServerInformationBlankPortPage=Bitte füllen Sie den Http Port und den Ssl Port Required aus.

CM_64_CustomServerInformationHttpPortPortPage=Please Fill the Http Port Required.
english.CM_64_CustomServerInformationHttpPortPortPage=Please Fill the Http Port Required.
german.CM_64_CustomServerInformationHttpPortPortPage=Bitte füllen Sie den erforderlichen Http-Port aus.

CM_65_CustomServerInformationSslPortPage=Please Fill the Ssl Port Required.
english.CM_65_CustomServerInformationSslPortPage=Please Fill the Ssl Port Required.
german.CM_65_CustomServerInformationSslPortPage=Bitte füllen Sie den erforderlichen Ssl-Port aus.

CM_66_CustomServerInformationNotValidHttpPortPage=Please,Enter HttpPort Minimum 2 Digit Numbers!
english.CM_66_CustomServerInformationBlankPortPage=Please,Enter HttpPort Minimum 2 Digit Numbers!
german.CM_66_CustomServerInformationBlankPortPage=Bitte geben Sie HttpPort mindestens 2-stellige Zahlen ein!

CM_67_CustomServerInformationNotValidPortPage=Please,Enter SslPort Minimum 2 Digit Numbers!
english.CM_67_CustomServerInformationBlankPortPage=Please,Enter SslPort Minimum 2 Digit Numbers!
german.CM_67_CustomServerInformationBlankPortPage=Bitte geben Sie SslPort mindestens 2-stellige Zahlen ein!

CM_68_CustomProxyInformationBlankSecondPage=Please Fill Proxy Settings Information Required.
english.CM_68_CustomProxyInformationBlankSecondPage=Please Fill Proxy Settings Information Required.
german.CM_68_CustomProxyInformationBlankSecondPage=Bitte füllen Sie die erforderlichen Informationen zu den Proxy-Einstellungen aus.

CM_69_CustomProxyPortSecondPage=Please Fill the Proxy  Port Required.
english.CM_69_CustomProxyPortSecondPage=Please Fill the Proxy  Port Required.
german.CM_69_CustomProxyPortSecondPage=Bitte füllen Sie den erforderlichen Proxy-Port aus.

CM_70_CustomProxyServerSecondPage=Please Fill the Proxy Server Required.
english.CM_70_CustomProxyServerSecondPage=Please Fill the Proxy Server Required.
german.CM_70_CustomProxyServerSecondPage=Bitte füllen Sie den erforderlichen Proxy-Server aus.

CM_71_CustomProxyUsernameSecondPage=Please Fill the Proxy Username Required.
english.CM_71_CustomProxyUsernameSecondPage=Please Fill the Proxy Username Required.
german.CM_71_CustomProxyUsernameSecondPage=Bitte füllen Sie den erforderlichen Proxy-Benutzernamen aus.

CM_72_CustomProxyPasswordSecondPage=Please Fill the Proxy Password Required.
english.CM_72_CustomProxyPasswordSecondPage=Please Fill the Proxy Password Required.
german.CM_72_CustomProxyPasswordSecondPage=Bitte füllen Sie das erforderliche Proxy-Passwort aus.

CM_73_CustomProxyPortSecondPage=Please,Enter Proxy Port Minimum 2 Digit Numbers!
english.CM_73_CustomProxyPortSecondPage=Please,Enter Proxy Port Minimum 2 Digit Numbers!
german.CM_73_CustomProxyPortSecondPage=Bitte geben Sie mindestens 2-stellige Proxy-Port-Nummern ein!

CM_74_CustomProxyServerSecondPage=Please,Enter Proxy Server Minimum 4 Characters!
english.CM_74_CustomProxyServerSecondPage=Please,Enter Proxy Server Minimum 4 Characters!
german.CM_74_CustomProxyServerSecondPage=Bitte geben Sie Proxy Server mindestens 4 Zeichen ein!

CM_75_CustomProxyUsernameSecondPage=Please,Enter Proxy Username Minimum 5 Characters!
english.CM_75_CustomProxyUsernameSecondPage=Please,Enter Proxy Username Minimum 5 Characters!
german.CM_75_CustomProxyUsernameSecondPage=Bitte geben Sie den Proxy-Benutzernamen ein, mindestens 5 Zeichen!

CM_76_CustomProxyPasswordSecondPage=Please,Enter Proxy Password Minimum 4 Characters!
english.CM_76_CustomProxyPasswordSecondPage=Please,Enter Proxy Password Minimum 4 Characters!
german.CM_76_CustomProxyPasswordSecondPage=Bitte geben Sie das Proxy-Passwort ein, mindestens 4 Zeichen!

[LangOptions]
DialogFontSize=8
WelcomeFontName=Verdana
WelcomeFontSize=12
TitleFontName=Arial
TitleFontSize=29
CopyrightFontName=Arial
CopyrightFontSize=8
RightToLeft=no

[Tasks]
;issue default desktop icon and quick launch icon should be enable  resolve by lalit kumawat 3-19-2015
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}
Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; OnlyBelowVersion: 0,6.1

[Dirs]
Name: {app}\LOG
Name: {commonappdata}\{#MyAppName}; attribs: hidden; Flags: uninsalwaysuninstall; Tasks: 
Name: {app}; Flags: uninsalwaysuninstall; Tasks: ; Languages: 
Name: {app}\QUARANTINE; Tasks: ; Languages: 

[Files]

Source: RequiredFiles\PROTECTION\64\{#FPSCANNER}; DestDir: {app}\DRIVERS; Flags: ignoreversion
Source: RequiredFiles\PROTECTION\64\{#PPSECURE64}; DestDir: {app}\DRIVERS; Flags: ignoreversion
;Source: RequiredFiles\PROTECTION\32\{#PPXPROC}; DestDir: {app}\DRIVERS; Flags: ignoreversion
Source: RequiredFiles\DRIVERS\TDI\AMD64\WRDWIZFLT.SYS; DestDir: {win}\System32\DRIVERS; Flags: ignoreversion onlyifdoesntexist
Source: RequiredFiles\DRIVERS\WFP\WINDOWS7\AMD64\WRDWIZFLT07.SYS; DestDir: {win}\System32\DRIVERS; Flags: ignoreversion 64bit
Source: RequiredFiles\DRIVERS\WFP\WINDOWS8\AMD64\WRDWIZFLT08.SYS; DestDir: {win}\System32\DRIVERS; Flags: ignoreversion 64bit
Source: RequiredFiles\DRIVERS\WFP\WINDOWS10\AMD64\WRDWIZFLT10.SYS; DestDir: {win}\System32\DRIVERS; Flags: ignoreversion 64bit

Source: RequiredFiles\CPPRESTRIBUTABLES\{#REDESTRIBUTABLES}; Flags: dontcopy nocompression
Source: VCL Styles\VclStylesinno.dll; DestDir: {app}; Flags: dontcopy overwritereadonly
Source: VCL Styles\TurquoiseGray.vsf; DestDir: {app}; Flags: dontcopy overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZUI.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZUSBDETECTUI.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZCOMMSRV.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZTRAY.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\Win32\Binaries\WRDWIZSETUPDLL.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZUSBDETECT.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZSCANDLL.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZINDEX.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZREPAIRDLL.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZREGISTRATION.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZREGISTERDATA.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZRKSCN.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZRESOURCE.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZCLOSEALL.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZALUSRV.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZHASH.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZEXTRACT.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
;Source: ..\Release\x64\Binaries\WRDCRASHSENDER.EXE; DestDir: {app}; Flags: ignoreversion
;Source: ..\Release\x64\Binaries\WRDWIZCRASHRPT.DLL; DestDir: {app}; Flags: ignoreversion
Source: ..\Release\x64\Binaries\WRDWIZSHELLEXT.DLL; DestDir: {app}; Flags: ignoreversion regserver noregerror  overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZUNINST.exe; DestDir: {app}; Flags: ignoreversion
Source: ..\Release\x64\Binaries\WARDWIZUNINSTCON.EXE; DestDir: {app}; Flags: ignoreversion
Source: ..\Release\x64\Binaries\WRDWIZHEUSCN.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZAUTORUNSCN.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZTEMPCLR.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZUSBVAC.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZUTILITY.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZCRYPT.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZOFFLINEREG.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZBOOTSCN.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZUPDATE.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZRESCUEDISK.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: SETTINGS\ELITESETTING\PRODUCTSETTINGS.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion overwritereadonly onlyifdoesntexist
Source: SETTINGS\CHINESE.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion overwritereadonly
Source: SETTINGS\ENGLISH.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion overwritereadonly
Source: SETTINGS\FRENCH.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion overwritereadonly
Source: SETTINGS\GERMAN.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion overwritereadonly
Source: SETTINGS\HINDI.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion  overwritereadonly
Source: SETTINGS\SPANISH.INI; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion  overwritereadonly
Source: SETTINGS\ENGLISHTIPS.txt; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion 32bit overwritereadonly
Source: SETTINGS\HINDITIPS.txt; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion 32bit overwritereadonly
Source: SETTINGS\CHINESETIPS.TXT; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion 32bit overwritereadonly
Source: SETTINGS\FRENCHTIPS.TXT; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion 32bit overwritereadonly
Source: SETTINGS\GERMANTIPS.TXT; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion 32bit overwritereadonly
Source: SETTINGS\SPANISHTIPS.TXT; DestDir: {app}\WRDSETTINGS; Flags: ignoreversion 32bit overwritereadonly
Source: Logo\COMPANYLOGO.ICO; DestDir: {app}; Flags: ignoreversion   overwritereadonly
Source: RequiredFiles\EVALREGDLLS\x64\WRDWIZEVALREG.DLL; DestDir: {app}; Flags: ignoreversion onlyifdoesntexist overwritereadonly
Source: RequiredFiles\WAVFILES\THREATSFOUND.WAV; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\WAVFILES\SCANFINISHED.WAV; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\WRDWIZHELP\WRDWIZESS\WRDWIZESSENTIAL.CHM; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\WRDWIZHELP\WRDWIZESS\WRDWIZESSENTIALGERMAN.CHM; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\WRDWIZDB\*; DestDir: {app}\WRDWIZDATABASE; Flags: ignoreversion recursesubdirs createallsubdirs  overwritereadonly
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: RequiredFiles\WRDWIZSECURITYNEWS\WRDWIZSECURITYNEWS.TXT; DestDir: {app}; Flags: ignoreversion recursesubdirs createallsubdirs overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZMD5SCN.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\UNRAR\x64\UNRAR.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\SCITERDLL\64\SCITER64.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\SQLITE\64\SQLITE3.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\SQLITE\64\SQLITE3_32.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\SQLITE\64\TISCRIPT-SQLITE.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: Output\WARDWIZEPSCLIENTX64.exe; DestDir: {app}\Wardwizdev\WardWizEPS\PackageFile\Setup; Flags: ignoreversion overwritereadonly
Source: Output\WARDWIZEPSCLIENTX86.exe; DestDir: {app}\Wardwizdev\WardWizEPS\PackageFile\Setup; Flags: ignoreversion overwritereadonly
Source: ..\Release\x64\Binaries\WRDWIZDPLSRV.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly; Languages: 
Source: ..\Release\x64\Binaries\WRDWIZCLIENTAGENT.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\cpprest120_2_9.dll; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\CPPREST120_XP_2_9.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\libssl-1_1-x64.dll; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\libcrypto-1_1-x64.dll; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\libssh2.dll; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\libcurl.dll; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\MFC120UD.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\MSVCP100.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\MSVCP120.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\MSVCP120D.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\MSVCR120.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\MSVCR120D.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\CPPRESET\x64\ZLIB1.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\POWERSHELLSCRIPTS\CONFIG_IIS_FIRST.ps1; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\POWERSHELLSCRIPTS\CONFIG_IIS_SECOND.ps1; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\POWERSHELLSCRIPTS\DISABLE_IIS.ps1; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\DOTNETFRAMEWORK\x64_CONFIGURATIONFILE.INI; DestDir: {tmp}; Flags: dontcopy
Source: RequiredFiles\DOTNETFRAMEWORK\SQLEXPR_x86_ENU.exe; DestDir: {app};  Flags:ignoreversion overwritereadonly
Source: RequiredFiles\DOTNETFRAMEWORK\dotnetfx45_full_x86_x64.exe;DestDir: {tmp}; Flags:dontcopy
Source: RequiredFiles\DOTNETFRAMEWORK\Login.sql; DestDir: {tmp};Flags:dontcopy
Source: RequiredFiles\DOTNETFRAMEWORK\wardwizeps.sql; DestDir: {tmp};Flags:dontcopy
Source: RequiredFiles\DOTNETFRAMEWORK\SERVERINFO.XML; DestDir: {app}\Wardwizdev\WardWizEPS\PackageFile\Setup; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\DOTNETFRAMEWORK\WardWizEPS\*; DestDir: {app}\Wardwizdev\WardWizEPS; Flags: ignoreversion recursesubdirs
Source: RequiredFiles\DOTNETFRAMEWORK\webserverinfo.XML; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\DOTNETFRAMEWORK\x64_CONFIGUNINSTALLSQLSERVERCMDFILE.INI; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\TPDLLS\x64\NFAPI.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\TPDLLS\x64\PROTOCOLFILTERS.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\TPDLLS\x64\LIBEAY32.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\TPDLLS\x64\SSLEAY32.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\TPAPPS\x64\NFREGDRV.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\TPDLLS\x64\7-ZIP32.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly regserver
Source: RequiredFiles\TPDLLS\x64\7Z.DLL; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\TPAPPS\x64\7Z.EXE; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\SETUPDB\RLOC.DB; DestDir: {app}; Flags: ignoreversion overwritereadonly
Source: RequiredFiles\UNINSTALLAVREGISTRY\InnoCallback.dll; DestDir: {tmp}; Flags: dontcopy


[Icons]
;Issue:New Logo implementation, delete old logo and copy new logo. Resolved by : Nitin K Date:4th Jan 2016
Name: {group}\{#MyWardWizAppNameShortcut}; Filename: {app}\{#MyAppExeName}; IconFilename: {app}\COMPANYLOGO.ICO
Name: {commondesktop}\{#MyWardWizEliteAppName};Filename:http://{code:GETWWIZEPSURLPATH}/login.aspx; Tasks: desktopicon; IconFilename: {app}\COMPANYLOGO.ICO
;Neha Gharge to add utilities and its sub menus.
Name: {group}\{#Utility}\{#MyUtility_1}; Filename: {app}\{#MyAppExeName1}; Flags: excludefromshowinnewinstall; IconFilename: {app}\COMPANYLOGO.ICO
Name: {group}\{#Utility}\{#MyUtility_2}; Filename: {app}\{#MyAppExeName2}; Flags: excludefromshowinnewinstall; IconFilename: {app}\COMPANYLOGO.ICO
Name: {group}\{#Utility}\{#MyUtility_3}; Filename: {app}\{#MyAppExeName3}; Flags: excludefromshowinnewinstall; IconFilename: {app}\COMPANYLOGO.ICO
;lalit 2-3-2015 silent mode uninstallation
Name: {group}\{cm:UninstallProgram,{#MyWardWizAppName}}; Filename: {app}\WRDWIZUNINST.exe; Parameters: /SILENT;  IconFilename: {app}\COMPANYLOGO.ICO
Name: {commondesktop}\{#MyWardWizAppNameShortcut}; Filename: {app}\{#MyAppExeName}; Tasks: desktopicon; WorkingDir :{app};IconFilename:{app}\COMPANYLOGO.ICO
Name: {userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyWardWizAppNameShortcut}; Filename: {app}\{#MyAppExeName}; Tasks: quicklaunchicon ; WorkingDir :{app};IconFilename:{app}\COMPANYLOGO.ICO

[Run]
;neha Gharge nowait remove it will wait till proper installation is not done
;Issue: After launching Main UI Custom scan Drag drop not working properly, If we close UI and Start again from Desktop then It works Resolved by : Nitin K Date: 23rd April 2015
Filename: {app}\{#MyAppExeName}; Parameters: "-SHOWREG"; Description: {cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}; Flags: nowait postinstall skipifsilent
Filename: REG.exe; Parameters: "ADD ""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{{078ABE62-583D-43e6-96D6-5D092883DC82}_is1"" /V ""UninstallString"" /T ""REG_SZ"" /D ""\""{app}\WRDWIZUNINST.exe\"" /SILENT"" /F"; StatusMsg: {cm:CMWWInstallStatusMSG}; Flags: RunHidden WaitUntilTerminated
Filename: REG.exe; Parameters: "ADD ""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{{078ABE62-583D-43e6-96D6-5D092883DC82}_is1"" /V ""QuietUninstallString"" /T ""REG_SZ"" /D ""\""{app}\WRDWIZUNINST.exe\"" /SILENT"" /F"; StatusMsg: {cm:CMWWInstallStatusMSG}; Flags: RunHidden WaitUntilTerminated
[UninstallRun]
Filename: {app}\WRDWIZCLOSEALL.EXE; Flags: runminimized runhidden

[Registry]
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: AppFolder; ValueData: {app}\; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz\WardWizServer; ValueType: string; ValueName: AppFolder; ValueData: {app}\WardWizServer\; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: AppVersion; ValueData: {#AppVer}; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: DataBaseVersion; ValueData: {code:GetDataBaseVersion|1.1.3.1}; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: DataEncVersion; ValueData: {#DataEncVer}; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: LastScandt; ValueData: {code:GetLastScandt|00/00/00 00:00:00}; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: LastLiveupdatedt; ValueData: {code:Date} {code:Time}; Flags: uninsdeletekey noerror; Tasks: ; Languages: 
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: LastLiveupdatetm; ValueData: {code:Time}; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: DWORD; ValueName: ScanType; ValueData: {code:GetScanType| -1}; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: DWORD; ValueName: VirusFound; ValueData: {code:GetVirusFound| 0}; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwAutoDefUpdate; ValueData: {code:GetdwAutoDefUpdate| 1}; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwAutoProductUpdate; ValueData: {code:GetdwAutoProductUpdate| 1}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwDeleteOldReports; ValueData: {code:GetdwDeleteOldReports| 1}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwEnableSound; ValueData: {code:GetdwEnableSound| 1}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwShowStartupTips; ValueData: {code:GetdwShowStartupTips| 1}; Flags: uninsdeletekey noerror dontcreatekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwShowTrayPopup; ValueData: {code:GetdwShowTrayPopup| 1}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwStartUpScan; ValueData: {code:GetdwStartUpScan| 0}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwUpdateReboot; ValueData: {code:GetdwUpdateReboot| 0}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwUsbScan; ValueData: {code:GetdwUsbScan| 1}; Flags: uninsdeletekey noerror dontcreatekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwDaysToDelRep; ValueData: {code:GetdwDaysToDelRep| 30}; Flags: uninsdeletekey noerror dontcreatekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwShowSecNews; ValueData: {code:GetdwShowSecNews| 1}; Flags: uninsdeletekey noerror dontcreatekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwDaysToDelRep; ValueData: {code:GetdwDaysToDelRep| 30}; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwProductID; ValueData: 3; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwLoggingLevel; ValueData: {code:GetdwLoggingLevel| 2}; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwScanLevel; ValueData: 1; Flags: uninsdeletekey
;Varada Ikhar, Date: 13th May-2015, New Implementation : 'Release Note' message pop-up should be displayed after successful product update.
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwRelNotesShow; ValueData:{code:GetdwRelNotesShow| 0}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKCR; Subkey: .WWIZ; ValueType: string; ValueName: ; ValueData: {#ResIconReg}; Flags: uninsdeletekey
Root: HKCR; Subkey: .*.WWIZ; ValueType: string; ValueName: ; ValueData: {#ResIconReg}; Flags: uninsdeletekey
Root: HKCR; Subkey: {#ResIconReg}\DefaultIcon; ValueType: string; ValueName: ; ValueData: {app}\{#ResFileName}; Flags: uninsdeletekey
Root: HKCR; Subkey: {#ResIconReg}\shell\open\command; ValueType: string; ValueName: ; ValueData: """{app}\{#MyAppExeName}""{#ExecuteExeRegEntryThirdParam}{#ExecuteExeRegEntrySecParam}"; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwCrKeepOrg; ValueData: {code:GetdwCrKeepOrg| 0}; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: SupportNo; ValueData: {#SupportNo}; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwIsOffline; ValueData: {code:GetdwIsOffline| 1}; Flags: uninsdeletekey noerror
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwLocID; ValueData:0; Flags: uninsdeletekey noerror
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwQuarantineOption; ValueData: 1; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwHeuScan; ValueData: 1; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwActiveScanOption; ValueData: 1; Flags: uninsdeletekey noerror createvalueifdoesntexist
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwBackgroundCaching; ValueData: 0; Flags: uninsdeletekey noerror
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwCachingMethod; ValueData: 0; Flags: uninsdeletekey noerror
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: string; ValueName: ScanEngineVersion; ValueData: {#ScanEngVer}; Flags: uninsdeletekey
Root: HKCU; Subkey: Control Panel\Desktop; ValueType: string; ValueName: AutoEndTasks; ValueData: 1; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\Wardwiz; ValueType: dword; ValueName: dwUpdtManager; ValueData: {code:GetdwUpdtManager| 1}; Flags: uninsdeletekey createvalueifdoesntexist

[UninstallDelete]
Type: files; Name: {app}\*.*
Type: filesandordirs; Name: {app}\Log
Type: files; Name: {app}
Type: files; Name: {app}\DRIVERS

[InstallDelete]
;lalit 2-10-2015 issue-doblicate icon in start menu
Type: files; Name: {group}\*.*

[Code]
type
 TTimerProc=procedure(h:longword; msg:longword; idevent:longword; dwTime:longword);
  
 var      
      Page,SecondPage,ThirdPage,FourthPage: TInputQueryWizardPage;
	  GetIpAddressDetails,GetClientConfirmPassword,GetClientPassword,GetAdminConfirmPassword,GetAdminPassword,GetProxyUserPassword:String;
	  IsAlredyDotNetInstalled,IsSqlServerAlredyInstalled,IsValidateClientPassword,IsValiadateAdminPassword,GetVisiblePROXYPORT,GetVisibleSSLPORT :Boolean;
	  GetSSLPortLabelVisible:String;
      PasswordTextBox,ClientConfirmPasswordTextBox,ClientPasswordTextBox,AdminConfirmPasswordTextBox,AdminPasswordTextBox:TPasswordEdit;
	  ProxyTypeComboBox : TNewComboBox;
      Bevel: TBevel;
      Caption : TLabel;
	  SqlServerMiddleStaticMsgText,DotNetFramWrkMiddleStaticMsgText,DotNetANDSqlServerSoftInstall: TNewStaticText;
	  HttpPortTextBox,SSLPortTextBox,UserNameTextBox,PortTextBox,ProxyServerTextBox: TEdit;
	  ProxyInformationCheckBox,SSLInformationCheckBox,ServerInformationCheckBox: TNewCheckBox;
	  GetProxyUserName,GetPortNumber,GetProxyServerNumber,GetHttpportNumber,GetSslPortNumber:String;
	  CurrentPageID: Integer;
      DotNetInstallProgressBar,SqlServerInstallProgressBar: TNewProgressBar;
      DotNetForm,SqlServerForm: TSetupForm;
      CheckSqlandDotnetListBox :TNewListBox;
      GetClientPwdTemp,GetClientConfirmPwdtemp,GetAdminPwdTemp,GetAdminConfirmPwdTemp:String;
      IsInstallSqlServer:Boolean;
      GetTimer:Integer;
	  
function WrapTimerProc(callback:TTimerProc; paramcount:integer):longword;
  external 'wrapcallback@files:innocallback.dll stdcall';
  
function SetTimer(hWnd: LongWord; nIDEvent, uElapse: LongWord;lpTimerFunc: LongWord): LongWord;
  external 'SetTimer@user32.dll stdcall';
 
function KillTimer(hWnd, nIDEvent: LongWord): LongWord;
external 'KillTimer@User32.dll stdcall';

function GETWWIZEPSURLPATH(param:String): String;
var
GetIPAddressfromIni,GetHttpportFromIni,FinalUrlWizEPSWeb,FinalIpHttpPort,EPSServerIniFileName: string;
ErrCode:Integer;
begin
	  EPSServerIniFileName:=ExpandConstant('{app}\WRDSETTINGS\EPSSETTINGS.ini');
      GetIPAddressfromIni:=GetIniString('WRDSETTINGS','ServerMchineIP',GetIpAddressDetails, EPSServerIniFileName);
      GetHttpportFromIni:=GetIniString('WRDSETTINGS','HTTPPORT',GetHttpportNumber,EPSServerIniFileName);
      FinalIpHttpPort:=ExpandConstant(GetIPAddressfromIni+':'+GetHttpportFromIni);
      Result:= FinalIpHttpPort;
      FinalUrlWizEPSWeb:=ExpandConstant('http://'+GetIPAddressfromIni+':'+GetHttpportFromIni+'/login.aspx');
      ShellExec(FinalUrlWizEPSWeb,'', '', '', SW_SHOWNORMAL, ewNoWait, ErrCode);
end;

function AlredySqlServerInstalled: Boolean;
var
   S_ver:string;
begin
	RegQueryStringValue(HKLM,'SOFTWARE\Microsoft\Microsoft SQL Server\WARDWIZ\MSSQLServer\CurrentVersion', 'CurrentVersion', S_ver);
	if (S_ver = '11.0.2100.60') then
begin
         IsSqlServerAlredyInstalled:=True;
         WizardForm.CancelButton.Enabled:=False;
			   WizardForm.BackButton.Enabled:=False;
				 WizardForm.NextButton.Enabled:=True;
				 Exit;
			  end
			  else
           IsSqlServerAlredyInstalled:=False;
				  Exit;
			 end;


procedure ShowSqlServerDilaog(h:longword; msg:longword; idevent:longword; dwTime:longword);
begin
	 SqlServerForm.Show;
    end;

function CallbackSqlServerShowDilaog:Boolean;
var
   ShowSqlServerCallback:longword;
begin
      ShowSqlServerCallback:=WrapTimerProc(@ShowSqlServerDilaog,4);
      GetTimer:=settimer(0,0,1,ShowSqlServerCallback);
      IsInstallSqlServer := True;
end;
  
function SQLFrameworkIsNotInstalled: Boolean;
var
   GetSqlCmd,GetSqlParamCmd,GetSqlServerConfigFileCmd,GetsqlCmdPath,GetSqlFirstCmd,GetSqlSecondCmd,GetSqlThirdCmd,GetSqlFourthCmd,S_ver,ConfigIniFileName,tempiniEntry,GetIniEntry: string;
   ErrorCode: Integer;
begin
	RegQueryStringValue(HKLM,'SOFTWARE\Microsoft\Microsoft SQL Server\WARDWIZ\MSSQLServer\CurrentVersion', 'CurrentVersion', S_ver);
	if (S_ver = '11.0.2100.60') then
    		begin
				 WizardForm.CancelButton.Enabled:=False;
				 WizardForm.BackButton.Enabled:=False;
				 WizardForm.NextButton.Enabled:=True;
					Exit;      
    		end
    else
		begin
      CallbackSqlServerShowDilaog;
			WizardForm.CancelButton.Enabled:=False;
			WizardForm.BackButton.Enabled:=False;
			WizardForm.NextButton.Enabled:=False;
			ExtractTemporaryFile('SQLEXPR_x86_ENU.exe'); 
      ExtractTemporaryFile('x64_CONFIGURATIONFILE.INI');
      ConfigIniFileName := ExpandConstant('{tmp}\x64_CONFIGURATIONFILE.ini');
			GetIniEntry:=GetIniString('OPTIONS','SQLSYSADMINACCOUNTS','' , ConfigIniFileName);
      SetIniString('OPTIONS','SQLSYSADMINACCOUNTS','"' + GetUserNameString + '"',ConfigIniFileName);
      GetSqlCmd:=ExpandConstant('{tmp}\SQLEXPR_x86_ENU.exe');
      GetSqlServerConfigFileCmd:='"'+ExpandConstant('{tmp}\x64_CONFIGURATIONFILE.ini')+'"';
      GetSqlParamCmd:=ExpandConstant('/Q /IACCEPTSQLSERVERLICENSETERMS=1 /'+'ConfigurationFile='+GetSqlServerConfigFileCmd);
      WizardForm.BackButton.Enabled:=False;
      WizardForm.NextButton.Enabled:=False;
      WizardForm.CancelButton.Enabled:=False;
      ShellExec('',GetSqlCmd, GetSqlParamCmd,'',SW_HIDE, ewWaitUntilTerminated, ErrorCode);
      WizardForm.CancelButton.Enabled:=False;
      WizardForm.BackButton.Enabled:=False;
      WizardForm.NextButton.Enabled:=False;
      KillTimer(0, GetTimer);
      SqlServerForm.Close;
	  ExtractTemporaryFiles('{tmp}\*.sql');
      GetsqlCmdPath:=ExpandConstant('{pf32}')+'\Microsoft SQL Server\110\Tools\Binn\SQLCMD.EXE';
      GetSqlFirstCmd :='-S  '+ExpandConstant(GetComputerNameString)+'\WARDWIZ -d  master  -i "'+ExpandConstant('{tmp}')+'\Login.sql"'+' -o "C:\Program Files (x86)\Microsoft SQL Server\WWIZINSTSQLDBLOG.txt"';
      GetSqlSecondCmd:='-U sa -P sql@123 -S '+ExpandConstant(GetComputerNameString)+'\WARDWIZ -Q "'+'CREATE DATABASE wardwizepsweb"'+' -o "C:\Program Files (x86)\Microsoft SQL Server\WWIZINSTSQLDBLOG.txt"';
      GetSqlThirdCmd :='-U sa -P sql@123 -S '+ExpandConstant(GetComputerNameString)+'\WARDWIZ -Q "'+'Alter DATABASE wardwizepsweb set auto_close off with no_wait"'+' -o "C:\Program Files (x86)\Microsoft SQL Server\WWIZINSTSQLDBLOG.txt"';
      GetSqlFourthCmd:='-U sa -P sql@123 -S '+ExpandConstant(GetComputerNameString)+'\WARDWIZ -d wardwizepsweb  -i "'+ExpandConstant('{tmp}')+'\wardwizeps.sql"'+' -o "C:\Program Files (x86)\Microsoft SQL Server\WWIZINSTSQLDBLOG.txt"';
      
      ShellExec('',GetsqlCmdPath, GetSqlFirstCmd,'',SW_HIDE, ewWaitUntilTerminated, ErrorCode);
      ShellExec('',GetsqlCmdPath, GetSqlSecondCmd,'',SW_HIDE, ewWaitUntilTerminated, ErrorCode);
      ShellExec('',GetsqlCmdPath, GetSqlThirdCmd,'',SW_HIDE, ewWaitUntilTerminated, ErrorCode);
      ShellExec('',GetsqlCmdPath, GetSqlFourthCmd,'',SW_HIDE, ewWaitUntilTerminated, ErrorCode);

		WizardForm.CancelButton.Enabled:=False;
		WizardForm.BackButton.Enabled:=False;
		WizardForm.NextButton.Enabled:=True;
    end;
 end;
  function AlredyDotNetFramrWrkInstalled: Boolean;
 var
S_DotNet_Release,S_DotNet_Install:Cardinal;
   begin
      RegQueryDWordValue(HKLM,'Software\Microsoft\NET Framework Setup\NDP\v4\Full','Release', S_DotNet_Release);
		  RegQueryDWordValue(HKLM,'Software\Microsoft\NET Framework Setup\NDP\v4\Full','Install', S_DotNet_Install);
		  if ((S_DotNet_Release=378389)or(S_DotNet_Release=378675)or(S_DotNet_Release=378758)or(S_DotNet_Release=379893)
        or(S_DotNet_Release=393295)or(S_DotNet_Release=393297)or(S_DotNet_Release=394254)or(S_DotNet_Release=394271)
        or(S_DotNet_Release=394802)or(S_DotNet_Release=394806)or(S_DotNet_Release=460798)or(S_DotNet_Release=460805)
        or(S_DotNet_Release=461308)or(S_DotNet_Release=461310)or(S_DotNet_Release=461808)or(S_DotNet_Release=461814))
        AND(S_DotNet_Install=1)then
		begin
            IsAlredyDotNetInstalled:=True;
            WizardForm.CancelButton.Enabled := False;
            WizardForm.BackButton.Enabled := False;
            WizardForm.NextButton.Enabled := True;
				Exit;			 
		end
    else
           IsAlredyDotNetInstalled:=False;
           Exit;
    end;
	
function DotNetFrameworkIsNotInstalled: Boolean;
 var
	 GetDotNetFrmWrkCmd:String;
   S_DotNet_Release,S_DotNet_Install:Cardinal;
   ErrorCode:Integer;
   begin
      RegQueryDWordValue(HKLM,'Software\Microsoft\NET Framework Setup\NDP\v4\Full','Release', S_DotNet_Release);
		  RegQueryDWordValue(HKLM,'Software\Microsoft\NET Framework Setup\NDP\v4\Full','Install', S_DotNet_Install);
		  if ((S_DotNet_Release=378389)or(S_DotNet_Release=378675)or(S_DotNet_Release=378758)or(S_DotNet_Release=379893)
        or(S_DotNet_Release=393295)or(S_DotNet_Release=393297)or(S_DotNet_Release=394254)or(S_DotNet_Release=394271)
        or(S_DotNet_Release=394802)or(S_DotNet_Release=394806)or(S_DotNet_Release=460798)or(S_DotNet_Release=460805)
        or(S_DotNet_Release=461308)or(S_DotNet_Release=461310)or(S_DotNet_Release=461808)or(S_DotNet_Release=461814))
        AND(S_DotNet_Install=1)then
		begin
            WizardForm.CancelButton.Enabled := False;
            WizardForm.BackButton.Enabled := False;
            WizardForm.NextButton.Enabled := True;
			 Exit;	
		end
  else
		begin
			 WizardForm.CancelButton.Enabled:=False;
			 WizardForm.BackButton.Enabled:=False;
			 WizardForm.NextButton.Enabled:=False;
          DotNetForm.Show;
          ExtractTemporaryFile('dotnetfx45_full_x86_x64.exe');
          GetDotnetFrmWrkCmd:=ExpandConstant('{tmp}\dotnetfx45_full_x86_x64.exe');
          ShellExec('',GetDotnetFrmWrkCmd,'/Q /norestart','', SW_HIDE, ewWaitUntilTerminated, ErrorCode);
     end;
          DotNetForm.Close;
end;
                                     // Funtions for String Data

   // Funtion for GetAppVersion
function GetAppVersion(Value_Name : string):string;
         var S_ver : string;
   begin
    RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'AppVersion', S_ver);

     if (S_ver = '') then
     begin
     Result := ExpandConstant('{#AppVer}');
     end
     else
      Result := S_ver;
   end;

//Procedure to create array from DBVersion for comparison
procedure Explode(var Dest: TArrayOfString; Text: String; Separator: String);
      var i, p: Integer;
begin
      i := 0;
      repeat
		SetArrayLength(Dest, i+1);
        p := Pos(Separator,Text);
        if p > 0 then begin
          Dest[i] := Copy(Text, 1, p-1);
          Text := Copy(Text, p + Length(Separator), Length(Text));
          i := i + 1;
        end else begin
          Dest[i] := Text;
          Text := '';
        end;
      until Length(Text)=0;
end;

// Funtion for GetDBVersion
function GetDataBaseVersion(Value_Name : string):string;
      var db,db_wwizav : string;
      var strArray,strArray_wwiz_av,strArrayDB : TArrayOfString;
      var i : integer;
      var check,check_db : Boolean;
begin
    check := RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'DataBaseVersion', db_wwizav);
    check_db := RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz', 'DataBaseVersion',db);
    if(check_db  = false) then
    begin
        Result := ExpandConstant('{#DataVer}');
        exit;
    end
    else
    begin
        Explode(strArray,db,'.');
    end;
    if(check  = true) then
    begin
        Explode(strArray_wwiz_av,db_wwizav,'.');
        for i := 0 to GetArrayLength(strArray_wwiz_av) - 1 do
        begin
            if strArray_wwiz_av[i] > strArray[i] then
            begin
              Result := db_wwizav;
              exit;
            end
            else if strArray_wwiz_av[i] < strArray[i] then
            begin
              Result := db;
              exit;
            end;
        end;
    end;
    Explode(strArrayDB,ExpandConstant('{#DataVer}'),'.');
    for i := 0 to GetArrayLength(strArray) - 1 do
    begin
      if strArray[i] > strArrayDB[i] then
      begin
        Result := db;
        exit;
      end
      else if strArray[i] < strArrayDB[i] then
      begin
        Result := ExpandConstant('{#DataVer}');
		exit;
	  end;
	end;
     if(db = '')  then
     begin
      Result := ExpandConstant('{#DataVer}');
     end
     else
      Result := db;
end;

// Funtion for GetDataEncVersion
function GetDataEncVersion(Value_Name : string):string;
         var encv : string;
   begin
    RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'DataEncVersion', encv);

     if(encv = '') then
     begin
      Result := ExpandConstant('{#DataEncVer}');
     end
      else
       Result := encv;
   end;

// Funtion for GetLastScandt
function GetLastScandt(Value_Name : string):string;
         var Ldate : string;
   begin
    RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'LastScandt', Ldate);
    if(Ldate = '') then
    begin
     Result :=  '00/00/00 00:00:00';
    end
       else
    Result := Ldate;
   end;

// Funtion for GetSupportNo
function GetSupportNo(Value_Name : string):string;
         var num : string;
   begin
     RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'SupportNo', num);

     if(num = '') then
      begin
       Result := ExpandConstant('{#SupportNo}');
      end
      else
       Result := num;
  end;

                                  // Functions for DWORD Data

 // Function to GetdwShowSecNews
function GetdwShowSecNews(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwShowSecNews', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
      Result := temp_data;
 end;

 // Function to GetScanType
function GetScanType(Value_Name : string): string;
         var Value_Data : string;
         var temp_data : string;
         var check : Boolean;
 begin
      check:= RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'ScanType', Value_Data);
      temp_data := Value_Data;

      if(check  = false) then
      begin
       Result := '-1';
      end
      else
       Result := Value_Data;

      if(Value_Data > '10') then
      begin
          Result := '-1';
      end;
 end;

// Function to GetVirusFound
function GetVirusFound(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;

 begin
     check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus','VirusFound', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(0);
      end
      else
        Result := temp_data;
 end;

// Function to Auto Defination Update
function GetdwAutoDefUpdate(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;
 begin
     check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwAutoDefUpdate', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
       Result := temp_data;
 end;

// Function to GetdwAutoProductUpdate
function GetdwAutoProductUpdate(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;
  begin
      check:= RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwAutoProductUpdate', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
       Result := temp_data;
 end;

// Function to GetdwDeleteOldReports
function GetdwDeleteOldReports(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwDeleteOldReports', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
      Result := temp_data;
 end;

// Function to GetdwEnableSound Data
function GetdwEnableSound(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwEnableSound', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
      Result := temp_data;
 end;

// Function to GetdwShowStartupTips
function GetdwShowStartupTips(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;

   begin
     check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwShowStartupTips', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
       Result := temp_data;
  end;

// Function to a Tray Popup
function GetdwShowTrayPopup(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;

 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwShowTrayPopup', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
       Result := temp_data;
 end;

// Function to  GetdwStartUpScan Data
function GetdwStartUpScan(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;
     begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwStartUpScan', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(0);
      end
      else
       Result := temp_data;
 end;

// Function to GetdwUpdateReboot
function GetdwUpdateReboot(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;

 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwUpdateReboot', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(0);
      end
      else
      Result := temp_data;
 end;

// Function to GetdwUsbScan
function GetdwUsbScan(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;
 begin
     check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwUsbScan', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
      Result := temp_data;
 end;

// Function to GetdwDaysToDelRep
function GetdwDaysToDelRep(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwDaysToDelRep', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(30);
      end
      else
      Result := temp_data;
 end;

// Function to GetdwProductID
function GetdwProductID(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwProductID', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
       Result := temp_data;
 end;

// Function to GetdwLoggingLevel
function GetdwLoggingLevel(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwLoggingLevel', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(2);
      end
      else
       Result := temp_data;
 end;

// Function to GetdwScanLevel
function GetdwScanLevel(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwScanLevel', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
      Result := temp_data;
 end;

// Function to GetdwRelNotesShow
function GetdwRelNotesShow(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;
 begin
     check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwRelNotesShow', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(0);
      end
      else
      Result := temp_data;
 end;

 // Function to GetdwCrKeepOrg
function GetdwCrKeepOrg(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
          var check : Boolean;
 begin
      check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwCrKeepOrg', Value_Data);
      temp_data := IntToStr(Value_Data);
      Result := temp_data;
 end;

 // Function to GetdwIsOffline
function GetdwIsOffline(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;
 begin
     check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwIsOffline', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
       Result := temp_data;
 end;

 // Function to GetdwLocID
function GetdwLocID(Value_Name : string): string;
         var Value_Data : Cardinal;
         var Locid : string;
         var check : Boolean;
 begin
     check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwLocID', Value_Data);
      Locid := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(0);
      end
      else
       Result := Locid;
 end;

    //Function to Copy a String Data as Default
function GetStringData(Value_Name : string):string;
         var str_Value_Data : string;
   begin
    if(Value_Name = 'Default') then
        Value_Name := '';

    RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', Value_Name, str_Value_Data);
    Result := str_Value_Data;
  end;

   // Function to Get Update Manager
function GetdwUpdtManager(Value_Name : string): string;
         var Value_Data : Cardinal;
         var temp_data : string;
         var check : Boolean;
 begin
     check := RegQueryDWordValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'dwUpdtManager', Value_Data);
      temp_data := IntToStr(Value_Data);

      if(check  = false) then
      begin
       Result := IntToStr(1);
      end
      else
       Result := temp_data;
 end;

  // Procedure to Get MVersion
Procedure GetMVersion(RegKey: integer; SubkeyName: String);
 var M_Ver : string;
 begin
     if (RegValueExists(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'MVersion')) then
       begin
        RegQueryStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus', 'MVersion', M_Ver);
		     if not(M_Ver = '') then
        RegWriteStringValue(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz', 'MVersion',M_Ver);
      end;
 end;

  // Procedure to Remove old Registry
Procedure OldReg_Remover(RegKey: integer; SubkeyName: String);
    begin
    if RegKeyExists(RegKey, SubkeyName) then
   RegDeleteKeyIncludingSubkeys(RegKey ,SubkeyName);
  end;

const
  MF_BYCOMMAND = $00000000;
  MF_BYPOSITION = $00000400;

type
  HMENU = THandle;

// Import the LoadVCLStyle function from VclStylesInno.DLL
procedure LoadVCLStyle(VClStyleFile: String); external 'LoadVCLStyleW@files:VclStylesInno.dll stdcall';
// Import the UnLoadVCLStyles function from VclStylesInno.DLL
procedure UnLoadVCLStyles; external 'UnLoadVCLStyles@files:VclStylesInno.dll stdcall';
function CloseAllApplication(): Boolean;
external 'CloseAllApplication@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

procedure StartEPSStartUpApplications(path:string);
external 'StartEPSStartUpApplications@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function SetSelectedLanguage(const strlanguage:String): Boolean;
external 'SetSelectedLanguage@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function SendAllStrings(const StringName:String): Boolean;
external 'SendAllStrings@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function SendAllStringsuninstall(const StringName:String): Boolean;
external 'SendAllStrings@{app}\WRDWIZSETUPDLL.DLL cdecl uninstallonly';

//Issue No-24 While installing the same setup again it should be "Latest version of Wardwiz is already installed"
function CheckForPreviousVersion(const FileName:String; CurrentVersion:String ; Ispatch:Boolean): Boolean;
external 'CheckForPreviousVersion@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function SetApplicationPath(const strAppPath:String): Boolean;
external 'SetApplicationPath@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function SingleInstanceCheck(): Boolean;
external 'SingleInstanceCheck@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function InstallService(path:string): Boolean;
external 'InstallService@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function RemoveService(): Boolean;
external 'RemoveService@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

procedure ExitProcess(exitCode:integer);
external 'ExitProcess@kernel32.dll cdecl setuponly';

function GetOSVersion(): integer;
external 'GetOSVersion@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function InstallDriverService(): integer;
external 'InstallDriverService@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function StartDriverServiceLocal(): integer;
external 'StartDriverServiceLocal@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function RegisterSetupWithDrivers(): integer;
external 'RegisterSetupWithDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function ResumeProtectionDrivers(): integer;
external 'ResumeProtectionDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function PauseProtectionDrivers(): integer;
external 'PauseProtectionDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function StartFltDrivers(path:string): integer;
external 'StartFltDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function StopFltDrivers(path:string): integer;
external 'StopFltDrivers@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

//lalit 2-3-2015 issue :-During uninstallation if I my UI is running and it asks for close UI but then if I try to cancel the Uninstallation it doesnt happen
function CloseAllApplicationForUninstall(const strAppPath:String): Boolean;
external 'CloseAllApplicationForUninstall@{app}\WRDWIZSETUPDLL.DLL cdecl uninstallonly';

function GetSystemMenu(hWnd: HWND; bRevert: BOOL): HMENU;
external 'GetSystemMenu@user32.dll stdcall';

function DeleteMenu(hMenu: HMENU; uPosition, uFlags: UINT): BOOL;
external 'DeleteMenu@user32.dll stdcall';

function GetMenuItemCount(hMenu: HMENU): Integer;
external 'GetMenuItemCount@user32.dll stdcall';

function StartEPSProductServices(): integer;
external 'StartEPSProductServices@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function CheckNeedOfRestart(): Boolean;
external 'CheckNeedOfRestart@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

function RestartNow(): Boolean;
external 'RestartNow@{app}\WRDWIZSETUPDLL.DLL cdecl uninstallonly';

function MoveFileEXtoRestartDlt(const strAppPath:String): Boolean;
external 'MoveFileEXtoRestartDlt@{app}\WRDWIZSETUPDLL.DLL cdecl uninstallonly';

function GetIPAddress(strIPAddress:String): Boolean;
external 'GetIPAddress@files:WRDWIZSETUPDLL.DLL cdecl setuponly';

var Redraw : Boolean;
var ReStart : Boolean;
ResultForRestart: Boolean;

Procedure StartFLTDrivers4EmailScan();
var 
ResultCode: integer;
command: string;
begin
	command := 'WRDWIZFLT';
	Exec(ExpandConstant('{app}')+'\NFREGDRV.EXE ', command, '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;

procedure AddSupportNo();
var
  dwScanLevel: Cardinal;
begin
      if  RegQueryDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Wardwiz Antivirus','dwScanLevel', dwScanLevel)then
      begin
     if (dwScanLevel = 1)then
         begin
            RegWriteStringValue(HKEY_LOCAL_MACHINE, 'Software\WardWiz Antivirus',
            'SupportNo', '{#SupportNumberNC}');
           end

       else
        RegWriteStringValue(HKEY_LOCAL_MACHINE, 'Software\WardWiz Antivirus',
        'SupportNo', '{#SupportNumberClam}');
    end
    else
       RegWriteStringValue(HKEY_LOCAL_MACHINE, 'Software\WardWiz Antivirus',
        'SupportNo', '{#SupportNumberClam}');
end;

 function ValidateServerinfo_NextButtonClick(Page: TWizardPage): Boolean;
 var
   	GetHttportTemp,GetSSLportTemp : String;
begin
   GetHttportTemp:=HttpPortTextBox.Text;
   GetSSLportTemp:=SSLPortTextBox.Text ;
 if((HttpPortTextBox.Text='')or(SSLPortTextBox.Text=''))
     and
     ((HttpPortTextBox.Text='')and(SSLPortTextBox.Text=''))then
     begin
     Msgbox(ExpandConstant('{cm:CM_63_CustomServerInformationBlankPortPage}'),mberror,mb_ok);
     Result := false;
     Exit;
     end  else
     begin
      if(HttpPortTextBox.Text='') then
      begin
        Msgbox(ExpandConstant('{cm:CM_64_CustomServerInformationHttpPortPortPage}'),mberror,mb_ok);
        Result := false;
        Exit;
      end
      else
      if(SSLPortTextBox.Text='') then
      begin
        Msgbox(ExpandConstant('{cm:CM_65_CustomServerInformationSslPortPage}'),mberror,mb_ok);;
       Result := false;
       Exit;
      end
      else
				  if ((Length(GetHttportTemp)<= 1)and(Length(GetSSLportTemp)<= 1)) then
                   begin
                      WizardForm.BackButton.Enabled:=False;
                      WizardForm.NextButton.Enabled:=True;
                      WizardForm.CancelButton.Enabled:=False;
                      if(Length(GetHttportTemp)<= 1)then
					  begin
					  Msgbox(ExpandConstant('{cm:CM_66_CustomServerInformationNotValidHttpPortPage}'),mberror,mb_ok);
                      Result:=False;
					  Exit;
					  end
					  else if(Length(GetSSLportTemp)<= 1) then
					  begin
					  Msgbox(ExpandConstant('{cm:CM_67_CustomServerInformationNotValidPortPage}'),mberror,mb_ok);
                      Result:=False;
					  Exit;
					  end;
                  end
                  else
                  if((Length(GetHttportTemp)>=2)and(Length(GetSSLportTemp)>=2)) then
                  begin
                        GetHttpportNumber := GetHttportTemp;
                        GetSslPortNumber := GetSSLportTemp;
                        WizardForm.BackButton.Enabled:=True;
                        WizardForm.NextButton.Enabled:=True;
                        WizardForm.CancelButton.Enabled:=True;
                        Result:=True;
                        Exit;
                  end
                else
                    if(Length(GetHttportTemp)<= 1)then
					          begin
					               WizardForm.BackButton.Enabled:=True;
                         WizardForm.NextButton.Enabled:=True;
                         WizardForm.CancelButton.Enabled:=True;
                         Result := false;
                         Msgbox(ExpandConstant('{cm:CM_66_CustomServerInformationNotValidHttpPortPage}'),mberror,mb_ok);
                         Exit;
					         end
					          else if(Length(GetSSLportTemp)<= 1) then
begin
					               WizardForm.BackButton.Enabled:=True;
                         WizardForm.NextButton.Enabled:=True;
                         WizardForm.CancelButton.Enabled:=True;
                         Result := false;
                         Msgbox(ExpandConstant('{cm:CM_67_CustomServerInformationNotValidPortPage}'),mberror,mb_ok);
                         Exit;
					          end;
		     end;
end;

procedure OnChangeHttpPort(Sender: TObject);
var 
	GetHttportTemp : String;
	HttpPortTextLength:Integer;

begin

   GetHttportTemp:=HttpPortTextBox.Text ;
		    for HttpPortTextLength := 1 to Length(GetHttportTemp) do
begin
		           if (Length(GetHttportTemp)<= 1) then
	 begin 
                      WizardForm.BackButton.Enabled:=True;
                      WizardForm.NextButton.Enabled:=True;
                      WizardForm.CancelButton.Enabled:=True;
                      Exit;
	 end
	 else
                  if(Length(GetHttportTemp)>= 1) then
			begin
                     GetHttpportNumber := GetHttportTemp;
                     WizardForm.BackButton.Enabled:=True;
                     WizardForm.NextButton.Enabled:=True;
                     WizardForm.CancelButton.Enabled:=True;
				           Exit;
                  end
                else
                      WizardForm.BackButton.Enabled:=True;
                      WizardForm.NextButton.Enabled:=True;
                 WizardForm.CancelButton.Enabled:=True;
                  Continue;
            end;
                      WizardForm.BackButton.Enabled:=True;
				 WizardForm.NextButton.Enabled:=True;
                      WizardForm.CancelButton.Enabled:=True;
 end;

 procedure EditHttpPortPress(Sender: TObject; var Key: Char);
var
  KeyCode: Integer;
begin
  KeyCode := Ord(Key);
  if not ((KeyCode = 8) or ((KeyCode >= 48) and (KeyCode <= 57))) then
    Key := #0;
			end;

procedure OnChangeSslPort(Sender1: TObject);
var
	GetSSLportTemp : String;
  HttpPortTextLength:Integer;
begin
    GetSSLportTemp:=SSLPortTextBox.Text ;
   WizardForm.NextButton.Enabled := SSLPortTextBox.Text <> '';
		    for HttpPortTextLength := 1 to Length(GetSSLportTemp) do
			begin
		           if (Length(GetSSLportTemp)<= 1) then
	 begin 
                      WizardForm.BackButton.Enabled:=True;
                      WizardForm.NextButton.Enabled:=True;
                      WizardForm.CancelButton.Enabled:=True;
                      Exit;
                  end
            else
                  if(Length(GetSSLportTemp)>= 1) then
          begin
                   GetSslPortNumber := GetSSLportTemp;
                      WizardForm.BackButton.Enabled:=True;
                      WizardForm.NextButton.Enabled:=True;
                      WizardForm.CancelButton.Enabled:=True;
			   Exit;
          end
          else
                      WizardForm.BackButton.Enabled:=True;
                      WizardForm.NextButton.Enabled:=True;
                      WizardForm.CancelButton.Enabled:=True;
                  Continue;
            end;
                      WizardForm.BackButton.Enabled:=True;
				WizardForm.NextButton.Enabled:=True;
                      WizardForm.CancelButton.Enabled:=True;
    end;

procedure EditSslPortPress(Sender: TObject; var Key: Char);
var
  KeyCode: Integer;
begin
  KeyCode := Ord(Key);
  if not ((KeyCode = 8) or ((KeyCode >= 48) and (KeyCode <= 57))) then
    Key := #0;
 end;
        
 function ValidateProxySettingsInfo_NextButtonClick(Page: TWizardPage): Boolean;
var 
   GetProxyUserName,GetProxyUserPwd,GetProxyPort,GetProxyServer: String;
begin
    if(GetVisiblePROXYPORT=False) then
    begin
	    WizardForm.BackButton.Enabled:=True;
	    WizardForm.NextButton.Enabled:=True;
	    WizardForm.CancelButton.Enabled:=True;
		Result := True;
		Exit;
    end
    else
			GetProxyUserName:=UserNameTextBox.Text;
			GetProxyUserPwd:=PasswordTextBox.Text;
			GetProxyPort:=PortTextBox.Text;
			GetProxyServer:=ProxyServerTextBox.Text;
			if((PortTextBox.Text='')or(ProxyServerTextBox.Text='')or(UserNameTextBox.Text='')or(PasswordTextBox.Text=''))
			and
			((PortTextBox.Text='')and(ProxyServerTextBox.Text='')and(UserNameTextBox.Text='')and(PasswordTextBox.Text=''))then
			begin
			Result := false;
			 Msgbox(ExpandConstant('{cm:CM_68_CustomProxyInformationBlankSecondPage}'),mberror,mb_ok);
			Exit;
			end  else
			begin
			if(PortTextBox.Text='') then
			begin
				Result := false;
				Msgbox(ExpandConstant('{cm:CM_69_CustomProxyPortSecondPage}'),mberror,mb_ok);
				Exit;
			end
			else
			if(ProxyServerTextBox.Text='') then
			begin
				Result := false;
				Msgbox(ExpandConstant('{cm:CM_70_CustomProxyServerSecondPage}'),mberror,mb_ok);
				Exit;
			end
			else
			if(UserNameTextBox.Text='') then
			begin
			Result := false;
			Msgbox(ExpandConstant('{cm:CM_71_CustomProxyUsernameSecondPage}'),mberror,mb_ok);
			Exit;
			end
			else
			if(PasswordTextBox.Text='') then
			begin
			Result := false;
			Msgbox(ExpandConstant('{cm:CM_72_CustomProxyPasswordSecondPage}'),mberror,mb_ok);
			Exit;
			end
			else
						if ((Length(GetProxyPort)<= 1)and(Length(GetProxyServer)<= 4)and(Length(GetProxyUserName)<= 5)and(Length(GetProxyUserPwd)<= 3)) then
						begin
							WizardForm.BackButton.Enabled:=True;
							WizardForm.NextButton.Enabled:=True;
							WizardForm.CancelButton.Enabled:=True;
							if(Length(GetProxyPort)<= 1)then
								begin
											Result := false;
							Msgbox(ExpandConstant('{cm:CM_73_CustomProxyPortSecondPage}'),mberror,mb_ok);
											Exit;
								end
								else if(Length(GetProxyServer)<= 3) then
								begin
							Result := false;
							Msgbox(ExpandConstant('{cm:CM_74_CustomProxyServerSecondPage}'),mberror,mb_ok);
							Exit;
								end
								else if(Length(GetProxyUserName)<= 4) then
begin
									Result := false;
							Msgbox(ExpandConstant('{cm:CM_75_CustomProxyUsernameSecondPage}'),mberror,mb_ok);
									Exit;
								end
								else if(Length(GetProxyUserPwd)<= 3) then
		begin 
									Result := false;
							Msgbox(ExpandConstant('{cm:CM_76_CustomProxyPasswordSecondPage}'),mberror,mb_ok);
									Exit;
								end;
		end
	 else
						if((Length(GetProxyPort)>=2)and(Length(GetProxyServer)>= 4)and(Length(GetProxyUserName)>= 5)and(Length(GetProxyUserPwd)>=4)) then
		begin
							GetPortNumber := GetProxyPort;
										GetProxyServerNumber := GetProxyServer;
										GetProxyUserName := GetProxyUserName;
										GetProxyUserPassword := GetProxyUserPwd;
							WizardForm.BackButton.Enabled:=True;
							WizardForm.NextButton.Enabled:=True;
			WizardForm.CancelButton.Enabled:=True;
							Result:=True;
							Exit;
						end
					else if(Length(GetProxyPort)<= 1)then
								begin
									WizardForm.BackButton.Enabled:=True;
		    WizardForm.NextButton.Enabled:=True;
						WizardForm.CancelButton.Enabled:=True;
						Result := false;
						Msgbox(ExpandConstant('{cm:CM_73_CustomProxyPortSecondPage}'),mberror,mb_ok);
						Exit;
								end
								else if(Length(GetProxyServer)<= 3) then
	   begin 
											WizardForm.BackButton.Enabled:=True;
											WizardForm.NextButton.Enabled:=True;
											WizardForm.CancelButton.Enabled:=True;
											Result := false;
											Msgbox(ExpandConstant('{cm:CM_74_CustomProxyServerSecondPage}'),mberror,mb_ok);
											Exit;
								end
								else if(Length(GetProxyUserName)<= 4) then
          begin
									WizardForm.BackButton.Enabled:=True;
						WizardForm.NextButton.Enabled:=True;
						WizardForm.CancelButton.Enabled:=True;
						Result := false;
						Msgbox(ExpandConstant('{cm:CM_75_CustomProxyUsernameSecondPage}'),mberror,mb_ok);
			   Exit;
          end
								else if(Length(GetProxyUserPwd)<= 3) then
								begin
									WizardForm.BackButton.Enabled:=True;
                WizardForm.NextButton.Enabled:=True;
							WizardForm.CancelButton.Enabled:=True;
							Result := false;
							Msgbox(ExpandConstant('{cm:CM_76_CustomProxyPasswordSecondPage}'),mberror,mb_ok);
							Exit;
								end;
          end;
 end;
 
procedure OnChangeProxyServer(Sender3: TObject);
var 
	GetProxyportTemp : String;
begin
     GetProxyportTemp:= ProxyServerTextBox.Text;
	 GetProxyServerNumber := GetProxyportTemp;
end;

procedure OnChangeProxyPort(Sender4: TObject);
var 
	GetportTemp : String;
    ProxyportLength:Integer;
begin
      GetportTemp:=PortTextBox.Text;
		    for ProxyportLength := 1 to Length(GetportTemp) do
			begin
		           if (Length(GetportTemp)<= 1) then
		begin 
                      WizardForm.BackButton.Enabled:=True;
                      WizardForm.NextButton.Enabled:=True;
                      WizardForm.CancelButton.Enabled:=True;
                      Exit;
		end
	 else
                  if(Length(GetportTemp)>= 1) then
		begin
                   GetPortNumber := GetportTemp;
                   WizardForm.BackButton.Enabled:=True;
                   WizardForm.NextButton.Enabled:=True;
                   WizardForm.CancelButton.Enabled:=True;
				   Exit;
                  end
                else
                   WizardForm.BackButton.Enabled:=True;
                   WizardForm.NextButton.Enabled:=True;
			WizardForm.CancelButton.Enabled:=True;
                  Continue;
            end;
                   WizardForm.BackButton.Enabled:=True;
		    WizardForm.NextButton.Enabled:=True;
                   WizardForm.CancelButton.Enabled:=True;
   end;

procedure EditProxyPortPress(Sender: TObject; var Key: Char);
var
  KeyCode: Integer;
begin
  KeyCode := Ord(Key);
  if not ((KeyCode = 8) or ((KeyCode >= 48) and (KeyCode <= 57))) then
    Key := #0;
		end;


procedure OnChangeProxyUserName(Sender5: TObject);
var
	GetProxyUserNameTemp: String;
   GetTempProxyUserName,ProxyUserNameLength:Integer;
begin
   GetProxyUserNameTemp:=UserNameTextBox.Text;;
   if(GetProxyUserNameTemp='') then
   begin
                   WizardForm.BackButton.Enabled:=True;
                   WizardForm.NextButton.Enabled:=True;
                   WizardForm.CancelButton.Enabled:=True;
                   Exit;
   end
   else
                   WizardForm.BackButton.Enabled:=True;
                   WizardForm.NextButton.Enabled:=True;
                   WizardForm.CancelButton.Enabled:=True;
   GetTempProxyUserName:=Length(GetProxyUserNameTemp);
		for ProxyUserNameLength := 0 to GetTempProxyUserName do
	   begin 
              if((GetTempProxyUserName)>4) then
          begin
                          GetProxyUserName := GetProxyUserNameTemp;
                          WizardForm.BackButton.Enabled:=True;
                          WizardForm.NextButton.Enabled:=True;
                          WizardForm.CancelButton.Enabled:=True;
			   Exit;
          end
          else
                   WizardForm.BackButton.Enabled:=True;
                WizardForm.NextButton.Enabled:=True;
                   WizardForm.CancelButton.Enabled:=True;
                  Continue;
              end;
          end;

procedure EditProxyUserNamePress(Sender: TObject; var Key: Char);
var
  KeyCode: Integer;
begin
  KeyCode := Ord(Key);
  if not ((KeyCode = 8) or ((KeyCode >= 48) and (KeyCode <= 57)) or ((KeyCode >= 64) and (KeyCode <= 122))) then
    Key := #0;
    Exit;
   end;


procedure OnChangeProxyUserPassword(Sender6: TObject);
var 
	GetProxyUserPwdTemp: String;
  GetTempProxyUserPwd,ProxyUserPwdLength:Integer;
begin
    GetProxyUserPwdTemp:=PasswordTextBox.Text;
   if(GetProxyUserPwdTemp='') then
		begin 
         WizardForm.BackButton.Enabled:=True;
         WizardForm.NextButton.Enabled:=True;
         WizardForm.CancelButton.Enabled:=True;
         Exit;
		end
	 else
        WizardForm.BackButton.Enabled:=True;
        WizardForm.NextButton.Enabled:=True;
        WizardForm.CancelButton.Enabled:=True;
	    GetTempProxyUserPwd:=Length(GetProxyUserPwdTemp);
		for ProxyUserPwdLength := 0 to GetTempProxyUserPwd do
	    begin
              if((GetTempProxyUserPwd)>=4) then
		begin
                          GetProxyUserPassword := GetProxyUserPwdTemp;
                          WizardForm.BackButton.Enabled:=True;
                          WizardForm.NextButton.Enabled:=True;
			WizardForm.CancelButton.Enabled:=True;
                          Exit;
                 end
                else
                   WizardForm.BackButton.Enabled:=True;
		    WizardForm.NextButton.Enabled:=True;
                   WizardForm.CancelButton.Enabled:=True;
                  Continue;
            end;
		end;

procedure EditProxyUserPWdPress(Sender: TObject; var Key: Char);
var
  KeyCode: Integer;
begin
  KeyCode := Ord(Key);
  if not (((KeyCode = 8) or ((KeyCode >= 48) and (KeyCode <= 57)) or ((KeyCode >= 65) and (KeyCode <= 122))))  then
    Key := #0;
    Exit;
end;

function ValiadateAdminPassword(var GetFirstAdminPwd:String;var GetSecondAdminPwd:String):Boolean;
begin
  if (CompareStr(GetFirstAdminPwd,GetSecondAdminPwd) = 0) then
  begin
      IsvaliadateAdminPassword:=True;
      Exit;
  end
  else
    IsValiadateAdminPassword:=False;
    Exit;
		end;

function ValidateClientPassword(var GetClientPwd:String;var GetConfirmClientPwd:String):Boolean;
	   begin 
  if (CompareStr(GetClientPwd,GetConfirmClientPwd) = 0) then
          begin
      IsValidateClientPassword:=True;
			   Exit;
          end
          else
	  IsValidateClientPassword:=False;
      Exit;
          end;

procedure EditAdminPasswordPress(Sender1: TObject; var NewKey: Char);
var
  KeyCode: Integer;
begin
 KeyCode := Ord(NewKey);
  if not ((KeyCode = 8) or ((KeyCode >= 48) and (KeyCode <= 57)) or ((KeyCode >= 64) and (KeyCode <= 122))) then
    NewKey := #0;
	Exit;
end;

 function ValidateAdminAndClientPwd_NextButtonClick(Page: TWizardPage): Boolean;
var 
  GetAdminPwd,GetAdminConfrimPwd,GetClientPwd,GetClientConfirmPwd:Integer;
begin

   if((AdminPasswordTextBox.Text='')or(AdminConfirmPasswordTextBox.Text='')or(ClientPasswordTextBox.Text='')or(ClientConfirmPasswordTextBox.Text=''))
     and
     ((AdminPasswordTextBox.Text='')and(AdminConfirmPasswordTextBox.Text='')and(ClientPasswordTextBox.Text='')and(ClientConfirmPasswordTextBox.Text=''))then
     begin
     Msgbox(ExpandConstant('{cm:CM_57_WWCustomAllPasswordEntrieBlankFourthPage}'), mbError, MB_OK);
     Result := false;
     Exit;
     end  else
     begin
      if((AdminPasswordTextBox.Text='')or(AdminConfirmPasswordTextBox.Text='')) then
      begin
        MsgBox(ExpandConstant('{cm:CM_59_WWCustomAdminPasswordEntrieBlankFourthPage}'), mbError, MB_OK);
        Result := false;
        Exit;
      end
      else
      if((ClientPasswordTextBox.Text='')or(ClientConfirmPasswordTextBox.Text='')) then
      begin
        MsgBox(ExpandConstant('{cm:CM_58_WWCustomClientPasswordEntrieBlankFourthPage}'), mbError, MB_OK);
       Result := false;
       Exit;
      end
      else
                       GetAdminPassword := GetAdminPwdTemp;
                       GetAdminPwd:=Length(GetAdminPwdTemp);
                       GetAdminConfrimPwd:=Length(GetAdminConfirmPwdtemp);
                       GetClientPwd:=Length(GetClientPwdTemp);
                       GetClientConfirmPwd:=Length(GetClientConfirmPwdTemp);
                       if((Length(GetAdminPwdTemp)>=3)and(Length(GetAdminConfirmPwdtemp)>=3)and(Length(GetClientPwdTemp)>=3)and(Length(GetClientConfirmPwdTemp)>=3))then
begin
                           ValiadateAdminPassword(GetAdminPwdTemp,GetAdminConfirmPwdtemp);
                            if(IsvaliadateAdminPassword=False) then
		begin 
                               Msgbox(ExpandConstant('{cm:CM_60_CustomAdminPasswordEntrieNotSameFourthPage}'),mberror,mb_ok);
                               Result := false;
                               Exit;
		end
	 else
							   ValidateClientPassword(GetClientPwdTemp,GetClientConfirmPwdTemp);
                                if(IsValidateClientPassword=False) then
		begin
                                    Msgbox(ExpandConstant('{cm:CM_61_CustomClientPasswordEntrieNotSameFourthPage}'),mberror,mb_ok);
                                    Result := false;
                                    Exit;
                                end
								else
								   WizardForm.BackButton.Enabled:=False;
                                   WizardForm.NextButton.Enabled:=True;
			WizardForm.CancelButton.Enabled:=True;
                                   Result := True;
                                   Exit;
						        end
                      else
                          if(Length(GetAdminPwdTemp)<= 2)  then
								          begin
									           WizardForm.BackButton.Enabled:=True;
		    WizardForm.NextButton.Enabled:=True;
						                 WizardForm.CancelButton.Enabled:=True;
						                 Result := false;
						                 MsgBox(ExpandConstant('{cm:CM_59_WWCustomAdminPasswordEntrieBlankFourthPage}'), mbError, MB_OK);
						                 Exit;
								         end
							 	         else if(Length(GetAdminConfirmPwdtemp)<= 2) then
	   begin 
										        	WizardForm.BackButton.Enabled:=True;
											        WizardForm.NextButton.Enabled:=True;
											        WizardForm.CancelButton.Enabled:=True;
											        Result := false;
											        MsgBox(ExpandConstant('{cm:CM_59_WWCustomAdminPasswordEntrieBlankFourthPage}'), mbError, MB_OK);
											        Exit;
								         end
								         else if(Length(GetClientPwdTemp)<= 2) then
          begin
									            WizardForm.BackButton.Enabled:=True;
						                  WizardForm.NextButton.Enabled:=True;
						                  WizardForm.CancelButton.Enabled:=True;
						                  Result := false;
						                  MsgBox(ExpandConstant('{cm:CM_58_WWCustomClientPasswordEntrieBlankFourthPage}'), mbError, MB_OK);
			   Exit;
          end
								         else if(Length(GetClientConfirmPwdTemp)<= 2) then
								         begin
									            WizardForm.BackButton.Enabled:=True;
                WizardForm.NextButton.Enabled:=True;
						                	WizardForm.CancelButton.Enabled:=True;
							                Result := false;
							                MsgBox(ExpandConstant('{cm:CM_58_WWCustomClientPasswordEntrieBlankFourthPage}'), mbError, MB_OK);
							                Exit;
								          end;
          end;	 
      Result := false;
      WizardForm.BackButton.Enabled:=False;
      WizardForm.NextButton.Enabled:=True;
      WizardForm.CancelButton.Enabled:=False;
      Msgbox(ExpandConstant('{cm:CM_60_CustomAdminPasswordEntrieNotSameFourthPage}'),mberror,mb_ok);
      Exit;
end;

procedure OnChangeAdminPassword(Sender7: TObject);
var 
   iTextLength:Integer;
   GetTempLengthPwd:Integer;
begin
  GetAdminPwdTemp:=AdminPasswordTextBox.Text;
  GetAdminConfirmPwdtemp:=AdminConfirmPasswordTextBox.Text;
        GetTempLengthPwd:=Length(GetAdminPwdTemp);
          for iTextLength := 0 to GetTempLengthPwd do
begin
                  if((GetTempLengthPwd)<3) then
		begin 
					             WizardForm.BackButton.Enabled:=True;
                       WizardForm.NextButton.Enabled:=True;
                       WizardForm.CancelButton.Enabled:=True;
                       Exit;
		end
	 else
							        GetAdminPassword := GetAdminPwdTemp;
                      if((Length(GetAdminPwdTemp))=(Length(GetAdminConfirmPwdtemp))) then
                      begin
                           ValiadateAdminPassword(GetAdminPwdTemp,GetAdminConfirmPwdtemp);
                           if(IsvaliadateAdminPassword=True)then
		begin
                               if((Length(GetClientPwdTemp))=(Length(GetClientConfirmPwdTemp))) then
	   begin 
								                    ValidateClientPassword(GetClientPwdTemp,GetClientConfirmPwdTemp);
                                     if(IsValidateClientPassword=True)then
          begin
                                          WizardForm.BackButton.Enabled:=True;
                                          WizardForm.NextButton.Enabled:=True;
                                          WizardForm.CancelButton.Enabled:=True;
			   Exit;
                                     end;
          end
          else
                                WizardForm.BackButton.Enabled:=True;
                                WizardForm.NextButton.Enabled:=True;
                                WizardForm.CancelButton.Enabled:=True;
                                Exit;
                         end;
                  end;
                   WizardForm.BackButton.Enabled:=True;
                WizardForm.NextButton.Enabled:=True;
                   WizardForm.CancelButton.Enabled:=True;
           end;
          end;	 

procedure EditAdminConfrmPwdPress(Sender1: TObject; var NewKey: Char);
var
  KeyCode: Integer;
begin
  KeyCode := Ord(NewKey);
  if not ((KeyCode = 8) or ((KeyCode >= 48) and (KeyCode <= 57)) or ((KeyCode >= 64) and (KeyCode <= 122)))  then
    NewKey := #0;
	Exit;
end;

procedure OnChangeAdminConfrmPwd(Sender8: TObject);
var 
	  iTextLength,GetTempLengthPwd:Integer;
begin
    GetAdminPwdTemp:=AdminPasswordTextBox.Text;
    GetAdminConfirmPwdtemp:=AdminConfirmPasswordTextBox.Text;
    GetTempLengthPwd:=Length(GetAdminConfirmPwdtemp);
    for iTextLength := 0 to GetTempLengthPwd do
		begin 
          if((GetTempLengthPwd)<3) then
		begin
				          WizardForm.BackButton.Enabled:=True;
		    WizardForm.NextButton.Enabled:=True;
                  WizardForm.CancelButton.Enabled:=True;
                  Exit;
             end
             else
                   GetAdminConfirmPassword := GetAdminConfirmPwdTemp;
		end;
                 if((Length(GetAdminPwdTemp))=(Length(GetAdminConfirmPwdtemp))) then
	   begin 
							          ValiadateAdminPassword(GetAdminPwdTemp,GetAdminConfirmPwdtemp);
                         if(IsValiadateAdminPassword=True) then
          begin
                            if((Length(GetClientPwdTemp))=(Length(GetClientConfirmPwdTemp))) then
                            begin
								             ValidateClientPassword(GetClientPwdTemp,GetClientConfirmPwdTemp);
											         if(IsValidateClientPassword=True)then
                                               begin
                                                   WizardForm.BackButton.Enabled:=True;
                                                   WizardForm.NextButton.Enabled:=True;
                                                   WizardForm.CancelButton.Enabled:=True;
			   Exit;
                                               end;
          end
          else
										             WizardForm.BackButton.Enabled:=True;
                WizardForm.NextButton.Enabled:=True;
                                 WizardForm.CancelButton.Enabled:=True;
										             Exit;
          end;
     end;
				              WizardForm.BackButton.Enabled:=True;
                      WizardForm.NextButton.Enabled:=True;
                      WizardForm.CancelButton.Enabled:=True;
				              Exit;
           end;

procedure EditClientPwdPress(Sender1: TObject; var NewKey: Char);
var
 KeyCode: Integer;
begin
 KeyCode := Ord(NewKey);
 if not ((KeyCode = 8) or ((KeyCode >= 48) and (KeyCode <= 57)) or ((KeyCode >= 64) and (KeyCode <= 122)))  then
   NewKey := #0;
Exit;
end;

procedure OnChangeClientPwd(Sender9: TObject);
var 
 iTextLength:Integer;
  GetTempLengthPwd:Integer;
begin
  GetClientPwdTemp:=ClientPasswordTextBox.Text;
  GetClientConfirmPwdtemp:=ClientConfirmPasswordTextBox.Text;
       GetTempLengthPwd:=Length(GetClientPwdTemp);
         for iTextLength := 0 to GetTempLengthPwd do
		begin 
                 if((GetTempLengthPwd)<3) then
		begin
                       WizardForm.BackButton.Enabled:=True;
		    WizardForm.NextButton.Enabled:=True;
                       WizardForm.CancelButton.Enabled:=True;
                       Exit;
                  end
                  else
				               GetClientPassword := GetClientPwdTemp;
		end;
                     if((Length(GetClientPwdTemp))=(Length(GetClientConfirmPwdTemp))) then
	   begin 
							            ValidateClientPassword(GetClientPwdTemp,GetClientConfirmPwdTemp);
								         if(IsValidateClientPassword=True)then
          begin
									            if((Length(GetAdminPwdTemp))=(Length(GetAdminConfirmPwdtemp))) then
                              begin
                                        ValiadateAdminPassword(GetAdminPwdTemp,GetAdminConfirmPwdtemp);
                                        if(IsValiadateAdminPassword=True) then
                                         begin
                                               WizardForm.BackButton.Enabled:=True;
                                               WizardForm.NextButton.Enabled:=True;
                                               WizardForm.CancelButton.Enabled:=True;
			   Exit;
                                               end;
          end
          else
										             WizardForm.BackButton.Enabled:=True;
				WizardForm.NextButton.Enabled:=True;
                                 WizardForm.CancelButton.Enabled:=True;
										             Exit;
          end;	 
end;
				              WizardForm.BackButton.Enabled:=True;
                      WizardForm.NextButton.Enabled:=True;
                      WizardForm.CancelButton.Enabled:=True;
				              Exit;
           end;

procedure OnChangeClientConfrmPwd(Sender10: TObject);
var 
    iTextLength:Integer;
    GetTempLengthPwd:Integer;
begin
    GetClientPwdTemp:=ClientPasswordTextBox.Text;
    GetClientConfirmPwdTemp:=ClientConfirmPasswordTextBox.Text;
        GetTempLengthPwd:=Length(GetClientConfirmPwdTemp);
          for iTextLength := 0 to GetTempLengthPwd do
		begin 
                  if((GetTempLengthPwd)<3) then
                  begin
                       WizardForm.BackButton.Enabled:=True;
                       WizardForm.NextButton.Enabled:=True;
                       WizardForm.CancelButton.Enabled:=True;
                       Exit;
		end
	 else
                         GetClientConfirmPassword := GetClientConfirmPwdTemp;
                              if((Length(GetClientPwdTemp))=(Length(GetClientConfirmPwdTemp))) then
		begin
                               WizardForm.BackButton.Enabled:=True;
		    WizardForm.NextButton.Enabled:=True;
                               WizardForm.CancelButton.Enabled:=True;
							                ValidateClientPassword(GetClientPwdTemp,GetClientConfirmPwdTemp);
				                     if(IsValidateClientPassword=True)then
	   begin 
                                  if((Length(GetAdminPwdTemp))=(Length(GetAdminConfirmPwdtemp))) then
          begin
								                     ValiadateAdminPassword(GetAdminPwdTemp,GetAdminConfirmPwdtemp);
                                     if(IsValiadateAdminPassword=True) then
                                      begin
                                            WizardForm.BackButton.Enabled:=True;
                                            WizardForm.NextButton.Enabled:=True;
                                            WizardForm.CancelButton.Enabled:=True;
			   Exit;
                                               end;
          end
          else
										            WizardForm.BackButton.Enabled:=True;
                WizardForm.NextButton.Enabled:=True;
                                WizardForm.CancelButton.Enabled:=True;
										             Exit;
        end;
    end;
				              WizardForm.BackButton.Enabled:=True;
                      WizardForm.NextButton.Enabled:=True;
                      WizardForm.CancelButton.Enabled:=True;
				              Exit;
           end;
  end;
	procedure EditClientConfrmPwdPress(Sender1: TObject; var NewKey: Char);
var
  KeyCode: Integer;
begin
  KeyCode := Ord(NewKey);
  if not ((KeyCode = 8) or ((KeyCode >= 48) and (KeyCode <= 57)) or ((KeyCode >= 64) and (KeyCode <= 122)))  then
    NewKey := #0;
	Exit;
end;

procedure OnClick(Sender1: TObject);
var 
	SSLPORTTempValueVisible : Boolean;
begin
   SSLPORTTempValueVisible := TNewCheckBox(Sender1).Checked;
	if(SSLPORTTempValueVisible= True) then
		begin
          SSLPortTextBox.Enabled := True;
		  GetVisibleSSLPORT:=SSLPORTTempValueVisible;
		end
		else
				SSLPortTextBox.Enabled := False;
				GetVisibleSSLPORT:=SSLPORTTempValueVisible;
			end;  

procedure OnProxyClick(Sender2: TObject);
var
  PROXYPORTTempValueVisible : Boolean;
begin
   PROXYPORTTempValueVisible := TNewCheckBox(Sender2).Checked;
  if(PROXYPORTTempValueVisible= True) then
			begin
					  UserNameTextBox.Enabled := True;
					  PortTextBox.Enabled := True;
					  ProxyServerTextBox.Enabled := True;
					  PasswordTextBox.Enabled:=True;
					  ProxyTypeComboBox.Enabled := True;
            GetVisiblePROXYPORT := PROXYPORTTempValueVisible;
			end
		else
			begin
					UserNameTextBox.Enabled := False;
					PortTextBox.Enabled := False;
					ProxyServerTextBox.Enabled := False;
					PasswordTextBox.Enabled :=False;
					ProxyTypeComboBox.Enabled := False;
            GetVisiblePROXYPORT := PROXYPORTTempValueVisible;
			end; 
end;

function GetCustomPageInfo:Integer;
 var
      DomainNameRadioButton: TNewRadioButton;
      IPAddressRadioButton: TNewRadioButton;
      DomainComboBox,ServerComboBox: TNewComboBox;
      ClientConfirmPasswordStaticText,ClientPasswordStaticText,AdminConfirmPasswordStaticText,AdminPasswordStaticText,AuthenticateMiddleMSgSecondStaticText,AuthenticateMiddleMSgStaticText,PasswordStaticText,UsernameStaticText,AuthenticateStaticText,PortStaticText,ProxyServerStaticText,ProxyTypeStaticText,ServerInfoMiddleMsgLastStaticText,ServerInfoMiddleMsgStaticText,ServerInfoMsgStaticText,SSLStaticText,HTTPStaticText: TNewStaticText;
      GetFinalDotNetANDSqlServerSoftInstall,GetSecondPageTitles,GetAuthenticationMiddleMsg,GetIPresult: string;
begin
	   Page := CreateInputQueryPage(CurrentPageID,ExpandConstant('{cm:CM_14_WWCustomMsgInnerFirstPage}'), ExpandConstant('{cm:CM_15_WWCustomSecondMsgInnerFirstPage}'),
    ExpandConstant('{cm:CM_16_WWCustomThirdMsgInnerFirstPage}'))

  Bevel := TBevel.Create(Page);
  with Bevel do
  begin
    Parent := Page.Surface;
    Shape := bsFrame;
    Left := ScaleX(0);
    Top := ScaleY(35);
    Width := ScaleX(418);
    Height := ScaleY(105);
end;
                 
  Caption := TLabel.Create(Page);
  with Caption do
  begin
    Parent := Page.Surface;
    Left := Bevel.Left + ScaleX(8);
    Top := Bevel.Top - ScaleY(6);
    Transparent := False;
    Caption := ExpandConstant('{cm:CM_14_WWCustomMsgInnerFirstPage}');

    DomainNameRadioButton := TNewRadioButton.Create(Page);
    DomainNameRadioButton.Parent := Page.Surface;
    DomainNameRadioButton.Top := Page.SurfaceWidth div 2 - ScaleX(157);
    DomainNameRadioButton.Left := ScaleY(20);
    DomainNameRadioButton.Height := ScaleY(20);
    DomainNameRadioButton.Width :=  Page.SurfaceWidth div 2;
    DomainNameRadioButton.Caption := ExpandConstant('{cm:CM_17_WWCustomMsgServerInfoDomainNameFirstPage}');
    DomainNameRadioButton.Checked := true;

    DomainComboBox := TNewComboBox.Create(Page);
    DomainComboBox.Top := DomainNameRadioButton.Top + ScaleX(0);
    DomainComboBox.Width := Page.SurfaceWidth div 3;
    DomainComboBox.Parent := Page.Surface;
    DomainComboBox.Left := DomainComboBox.Width;
    DomainComboBox.Style := csDropDownList;
    DomainComboBox.Items.Add(GetComputerNameString);
    DomainComboBox.ItemIndex := 0;

    IPAddressRadioButton := TNewRadioButton.Create(Page);
    IPAddressRadioButton.Parent := Page.Surface;
    IPAddressRadioButton.Top := Page.SurfaceWidth div 3 - ScaleX(69);
    IPAddressRadioButton.Left := ScaleY(20);
    IPAddressRadioButton.Height := ScaleY(20);
    IPAddressRadioButton.Caption := ExpandConstant('{cm:CM_18_WWCustomMsgServerInfoIPAddressFirstPage}');

    GetIPresult := '192.168.255.255';

	  ServerComboBox := TNewComboBox.Create(Page);
	  ServerComboBox.Top := IPAddressRadioButton.Top  + ScaleY(6);
	  ServerComboBox.Width := Page.SurfaceWidth div 3;
	  ServerComboBox.Parent := Page.Surface;
	  ServerComboBox.Left := ServerComboBox.Width;
	  ServerComboBox.Style := csDropDownList;
	  GetIPAddress(GetIPresult);
	  GetIpAddressDetails := GetIPresult;
    ServerComboBox.Items.Add((GetIPresult));
    ServerComboBox.ItemIndex := 0;

	  ServerInformationCheckBox := TNewCheckBox.Create(Page);
	  ServerInformationCheckBox.Parent := Page.Surface;
	  ServerInformationCheckBox.Top :=Page.SurfaceWidth div 2 - ScaleX(115);
	  ServerInformationCheckBox.Left := ScaleY(1);
	  ServerInformationCheckBox.Height := ScaleY(15);


		ServerInfoMsgStaticText := TNewStaticText.Create(Page);
		ServerInfoMsgStaticText.Parent := Page.Surface;
		ServerInfoMsgStaticText.Left :=  ScaleY(16);
		ServerInfoMsgStaticText.Font.Size := 8;
		ServerInfoMsgStaticText.Top := Page.SurfaceWidth div 2 - ScaleX(115);
	  ServerInfoMsgStaticText.Caption := ExpandConstant('{cm:CM_19_WWFirstCustomMsgServerInfoFirstPage}');

		ServerInfoMiddleMsgStaticText := TNewStaticText.Create(Page);
		ServerInfoMiddleMsgStaticText.Parent := Page.Surface;
		ServerInfoMiddleMsgStaticText.Left :=  ScaleY(2);
		ServerInfoMiddleMsgStaticText.Font.Size := 8;
		ServerInfoMiddleMsgStaticText.Top := Page.SurfaceWidth div 2 - ScaleX(102);
		ServerInfoMiddleMsgStaticText.Caption := ExpandConstant('{cm:CM_20_WWSecondCustomMsgServerInfoFirstPage}');

		ServerInfoMiddleMsgLastStaticText := TNewStaticText.Create(Page);
		ServerInfoMiddleMsgLastStaticText.Parent :=  Page.Surface;
		ServerInfoMiddleMsgLastStaticText.Top := Page.SurfaceWidth div 2 - ScaleX(89);
		ServerInfoMiddleMsgLastStaticText.Font.Size := 8;
		ServerInfoMiddleMsgLastStaticText.Left :=  ScaleY(3);
		ServerInfoMiddleMsgLastStaticText.Caption := ExpandConstant('{cm:CM_21_WWThirdCustomMsgServerInfoFirstPage}');

  end;

  Bevel := TBevel.Create(Page);
  with Bevel do
  begin
    Parent := Page.Surface;
    Shape := bsFrame;
    Left := ScaleX(0);
    Top := ScaleY(149);
    Width := ScaleX(417);
    Height := ScaleY(35);
  end;

  Caption := TLabel.Create(Page);
  with Caption do
  begin
    Parent := Page.Surface;
    Left := Bevel.Left + ScaleX(8);
    Top := Bevel.Top - ScaleY(6);
    Transparent := False;
    Caption :=ExpandConstant('{cm:CM_22_WWCustomMsgHttpFirstPage}');

	  HTTPStaticText := TNewStaticText.Create(Page);
	  HTTPStaticText.Parent := Page.Surface;
	  HTTPStaticText.Left :=  ScaleY(40);
	  HTTPStaticText.Top := Page.SurfaceWidth div 2 - ScaleX(54);
	  HTTPStaticText.Caption :=ExpandConstant('{cm:CM_23_WWCustomMsgHttpPortFirstPage}');

	  HttpPortTextBox := TEdit.Create(Page);
	  HttpPortTextBox.Parent := Page.Surface;
	  HttpPortTextBox.Text := '80';
	  HttpPortTextBox.MaxLength:=4;
	  GetHttpportNumber := HttpPortTextBox.Text ;
	  HttpPortTextBox.OnChange:=@OnChangeHttpPort;
    HttpPortTextBox.OnKeyPress := @EditHttpPortPress;
	  Name:='HTTPPORT';
	  HttpPortTextBox.Top := Page.SurfaceWidth div 2 - ScaleX(54);
	  HttpPortTextBox.Left := ScaleY(145);


 end;

 Bevel := TBevel.Create(Page);
  with Bevel do
  begin
    Parent := Page.Surface;
    Shape := bsFrame;
    Left := ScaleX(0);
    Top := ScaleY(186);
    Width := ScaleX(417);
    Height := ScaleY(49);
  end;

  Caption := TLabel.Create(Page);
  with Caption do
  begin
    Parent := Page.Surface;
    Left := Bevel.Left + ScaleX(8);
    Top := Bevel.Top - ScaleY(6);
    Transparent := False;
    Caption := ExpandConstant('{cm:CM_26_WWCustomMsgSslFirstPage}');

	  SSLInformationCheckBox := TNewCheckBox.Create(Page);
	  SSLInformationCheckBox.Parent := Page.Surface;
	  SSLInformationCheckBox.Top :=Page.SurfaceWidth div 2 - ScaleX(20);
    SSLInformationCheckBox.Left := ScaleY(40);
	  SSLInformationCheckBox.Height := ScaleY(19);
    SSLInformationCheckBox.Width :=Page.SurfaceWidth div 2;
	  SSLInformationCheckBox.Font.Style := [fsBold];
	  SSLInformationCheckBox.Font.Size := 7;
	  SSLInformationCheckBox.OnClick:=@OnClick;
	  SSLInformationCheckBox.Caption := ExpandConstant('{cm:CM_24_WWCustomMsgSslPortMsgFirstPage}');
	  Name := 'ISSSL';


	  SSLStaticText := TNewStaticText.Create(Page);
	  SSLStaticText.Parent :=  Page.Surface;
	  SSLStaticText.Left := ScaleY(45);
	  SSLStaticText.Top := Page.SurfaceWidth div 2 - ScaleX(1);
	  SSLStaticText.Caption := ExpandConstant('{cm:CM_25_WWCustomMsgSslPortFirstPage}');
	  GetSSLPortLabelVisible := SSLStaticText.Caption;



     SSLPortTextBox := TEdit.Create(Page);
     SSLPortTextBox.Parent := Page.Surface;
	   SSLPortTextBox.Enabled := False;
     SSLPortTextBox.Text := '9106';
	   SSLPortTextBox.MaxLength:=4;
	   GetSslPortNumber := SSLPortTextBox.Text;
	   SSLPortTextBox.OnChange:=@OnChangeSslPort;
     SSLPortTextBox.OnKeyPress := @EditSslPortPress;
     Name:='SSLPORT';
     SSLPortTextBox.Top := Page.SurfaceWidth div 2 - ScaleX(1);
     SSLPortTextBox.Left := ScaleY(145);
   with Page do
  begin
    OnNextButtonClick := @ValidateServerInfo_NextButtonClick;
  end;
   end;


  GetSecondPageTitles:= ExpandConstant('{cm:CM_29_WWCustomLongFirstProxyMsgSecondPage}')+ExpandConstant('{cm:CM_30_WWCustomLongSecondProxyMsgSecondPage}');
  SecondPage := CreateInputQueryPage(Page.ID,ExpandConstant('{cm:CM_27_WWFirstCustomMsgSecondPage}'), ExpandConstant('{cm:CM_28_WWCustomMsgSecondPage}'),
                GetSecondPageTitles);

  Bevel := TBevel.Create(SecondPage);
  with Bevel do
  begin
    Parent := SecondPage.Surface;
    Shape := bsFrame;
    Left := ScaleX(0);
    Top := ScaleY(44);
    Width := ScaleX(417);
    Height := ScaleY(185);
  end;

  Caption := TLabel.Create(SecondPage);
  with Caption do
  begin
    Parent := SecondPage.Surface;
    Left := Bevel.Left + ScaleX(8);
    Top := Bevel.Top - ScaleY(6);
    Transparent := False;
    Caption := ExpandConstant('{cm:CM_27_WWFirstCustomMsgSecondPage}');

			  ProxyInformationCheckBox := TNewCheckBox.Create(SecondPage);
			  ProxyInformationCheckBox.Parent := SecondPage.Surface;
			  ProxyInformationCheckBox.Top :=SecondPage.SurfaceWidth div 2 - ScaleX(154);
			  ProxyInformationCheckBox.Left := ScaleY(40);
			  ProxyInformationCheckBox.Height := ScaleY(19);
			  ProxyInformationCheckBox.Width :=SecondPage.SurfaceWidth div 2;
			  ProxyInformationCheckBox.Font.Style := [fsBold];
			  ProxyInformationCheckBox.Font.Size := 7;
			  ProxyInformationCheckBox.OnClick:=@OnProxyClick;
			  Name := 'ISPROXY';
			  ProxyInformationCheckBox.Caption := ExpandConstant('{cm:CM_31_WWCustomSecondProxyTypeMsgSecondPage}');

	          ProxyTypeStaticText := TNewStaticText.Create(SecondPage);
			  ProxyTypeStaticText.Parent :=  SecondPage.Surface;
			  ProxyTypeStaticText.Left := ScaleY(60);
			  ProxyTypeStaticText.Top := SecondPage.SurfaceWidth div 2 - ScaleX(136);
			  ProxyTypeStaticText.Caption := ExpandConstant('{cm:CM_32_WWCustomSecondProxyTypeMsgSecondPage}');

			  ProxyTypeComboBox := TNewComboBox.Create(SecondPage);
			  ProxyTypeComboBox.Top := ProxyTypeStaticText.Top;
			  ProxyTypeComboBox.Width := SecondPage.SurfaceWidth div 3;
			  ProxyTypeComboBox.Parent := SecondPage.Surface;
			  ProxyTypeComboBox.Left := DomainComboBox.Width;
			  ProxyTypeComboBox.Style := csDropDownList;
			  ProxyTypeComboBox.Items.Add(ExpandConstant('{sysuserinfoname}'));
			  ProxyTypeComboBox.ItemIndex := 0;
			  ProxyTypeComboBox.Enabled := False;


			  ProxyServerStaticText := TNewStaticText.Create(SecondPage);
			  ProxyServerStaticText.Parent := SecondPage.Surface;
			  ProxyServerStaticText.Left :=  ScaleY(60);
			  ProxyServerStaticText.Top := SecondPage.SurfaceWidth div 2 - ScaleX(112);
			  ProxyServerStaticText.Caption := ExpandConstant('{cm:CM_33_WWCustomSecondProxyServerMsgSecondPage}');

			  ProxyServerTextBox := TEdit.Create(SecondPage);
			  ProxyServerTextBox.Parent := SecondPage.Surface;
			  ProxyServerTextBox.Top := SecondPage.SurfaceWidth div 2 - ScaleX(110);
			  ProxyServerTextBox.Left := ScaleY(144);
			  GetProxyServerNumber := ProxyServerTextBox.Text;
			  ProxyServerTextBox.OnChange:=@OnChangeProxyServer;
			  Name:='ProxyServer';
			  ProxyServerTextBox.Enabled := False;

			  PortStaticText := TNewStaticText.Create(SecondPage);
			  PortStaticText.Parent := SecondPage.Surface;
			  PortStaticText.Left :=  ScaleY(60);
			  PortStaticText.Top := SecondPage.SurfaceWidth div 2 - ScaleX(90);
			  PortStaticText.Caption := ExpandConstant('{cm:CM_34_WWCustomSecondProxyPortMsgSecondPage}');

			  PortTextBox := TEdit.Create(SecondPage);
			  PortTextBox.Parent := SecondPage.Surface;
			  PortTextBox.Text := '3480';
			  PortTextBox.Top := SecondPage.SurfaceWidth div 2 - ScaleX(85);
			  PortTextBox.Left := ScaleY(144);
			  PortTextBox.MaxLength:=4;
			  GetPortNumber := PortTextBox.Text;
			  PortTextBox.OnChange:=@OnChangeProxyPort;
			  PortTextBox.OnKeyPress := @EditProxyPortPress;
			  Name:='Port';
			  PortTextBox.Enabled := False;

			  AuthenticateStaticText := TNewStaticText.Create(SecondPage);
			  AuthenticateStaticText.Parent := SecondPage.Surface;
			  AuthenticateStaticText.Left :=  ScaleY(4);
			  AuthenticateStaticText.Font.Style := [fsBold];
			  AuthenticateStaticText.Top := SecondPage.SurfaceWidth div 2 - ScaleX(65);
			  AuthenticateStaticText.Caption := ExpandConstant('{cm:CM_35_WWCustomSecondAuthenticationProxyTypeMsgSecondPage}');

			  UsernameStaticText := TNewStaticText.Create(SecondPage);
			  UsernameStaticText.Parent := SecondPage.Surface;
			  UsernameStaticText.Left :=  ScaleY(60);
			  UsernameStaticText.Top := SecondPage.SurfaceWidth div 2 - ScaleX(40);
			  UsernameStaticText.Caption := ExpandConstant('{cm:CM_37_WWCustomSecondUsernameMsgSecondPage}');

			  UserNameTextBox := TEdit.Create(SecondPage);
			  UserNameTextBox.Parent := SecondPage.Surface;
			  UserNameTextBox.Top := SecondPage.SurfaceWidth div 2 - ScaleX(40);
			  UserNameTextBox.Left := ScaleY(144);
			  GetProxyUserName := UserNameTextBox.Text;
			  UserNameTextBox.MaxLength:=14;
			  UserNameTextBox.OnChange:=@OnChangeProxyUserName;
			  UserNameTextBox.OnKeyPress:=@EditProxyUserNamePress;
			  Name:='UserName';
			  UserNameTextBox.Enabled := False;

			  PasswordStaticText := TNewStaticText.Create(SecondPage);
			  PasswordStaticText.Parent := SecondPage.Surface;
			  PasswordStaticText.Left :=  ScaleY(60);
			  PasswordStaticText.Top := SecondPage.SurfaceWidth div 2 - ScaleX(10);
			  PasswordStaticText.Caption := ExpandConstant('{cm:CM_38_WWCustomSecondPasswordMsgSecondPage}');

			  PasswordTextBox := TPasswordEdit.Create(SecondPage);
			  PasswordTextBox.Parent := SecondPage.Surface;
			  PasswordTextBox.Top := SecondPage.SurfaceWidth div 2 - ScaleX(10);
			  PasswordTextBox.Left := ScaleY(144);
			  PasswordTextBox.MaxLength:=12;
			  GetProxyUserPassword := PasswordTextBox.Text;
			  PasswordTextBox.OnChange:=@OnChangeProxyUserPassword;
			  PasswordTextBox.OnKeyPress:=@EditProxyUserPWdPress;
			  Name:='Password';
			  PasswordTextBox.Enabled := False;
        with SecondPage do
  begin
    OnNextButtonClick := @ValidateProxySettingsInfo_NextButtonClick;
  end;
 end;


  ThirdPage := CreateInputQueryPage(SecondPage.ID,
    ExpandConstant('{cm:CM_39_WWCustomFirstMsgThirdPage}'), ExpandConstant('{cm:CM_40_WWCustomSecondMsgThirdPage}'),
    ExpandConstant('{cm:CM_41_WWCustomThirdMsgThirdPage}'));

	Bevel := TBevel.Create(ThirdPage);
  with Bevel do
  begin
    Parent := ThirdPage.Surface;
    Shape := bsFrame;
    Left := ScaleX(0);
    Top := ScaleY(30);
    Width := ScaleX(417);
    Height := ScaleY(80);
  end;

  Caption := TLabel.Create(ThirdPage);
  with Caption do
  begin
    Parent := ThirdPage.Surface;
    Left := Bevel.Left + ScaleX(8);
    Top := Bevel.Top - ScaleY(6);
    Transparent := False;
    Caption := ExpandConstant('{cm:CM_42_WWCustomEndpointSecurityMsgThirdPage}');

			  AdminPasswordStaticText := TNewStaticText.Create(ThirdPage);
			  AdminPasswordStaticText.Parent := ThirdPage.Surface;
			  AdminPasswordStaticText.Left :=  ScaleY(20);
			  AdminPasswordStaticText.Top := ThirdPage.SurfaceWidth div 2 - ScaleX(165);
			  AdminPasswordStaticText.Caption := ExpandConstant('{cm:CM_43_WWCustomEndpointSecurityPwdMsgThirdPage}');

			  AdminPasswordTextBox := TPasswordEdit.Create(ThirdPage);
			  AdminPasswordTextBox.Parent := ThirdPage.Surface;
			  AdminPasswordTextBox.Top := ThirdPage.SurfaceWidth div 2 - ScaleX(165);
			  AdminPasswordTextBox.Left := ScaleY(144);
        AdminPasswordTextBox.MaxLength:=12;
			  GetAdminPassword := AdminPasswordTextBox.Text;
			  AdminPasswordTextBox.OnChange:=@OnChangeAdminPassword;
			  AdminPasswordTextBox.OnKeyPress:=@EditAdminPasswordPress;
			  Name:='AdminPassword';

			  AdminConfirmPasswordStaticText := TNewStaticText.Create(ThirdPage);
			  AdminConfirmPasswordStaticText.Parent := ThirdPage.Surface;
			  AdminConfirmPasswordStaticText.Left :=  ScaleY(20);
			  AdminConfirmPasswordStaticText.Top := ThirdPage.SurfaceWidth div 2 - ScaleX(140);
			  AdminConfirmPasswordStaticText.Caption := ExpandConstant('{cm:CM_44_WWCustomEndpointSecurityConfirmPwdMsgThirdPage}');

			  AdminConfirmPasswordTextBox := TPasswordEdit.Create(ThirdPage);
			  AdminConfirmPasswordTextBox.Parent := ThirdPage.Surface;
			  AdminConfirmPasswordTextBox.Top := ThirdPage.SurfaceWidth div 2 - ScaleX(140);
			  AdminConfirmPasswordTextBox.Left := ScaleY(144);
			  AdminConfirmPasswordTextBox.MaxLength:=12;
			  GetAdminConfirmPassword := AdminConfirmPasswordTextBox.Text;
			  AdminConfirmPasswordTextBox.OnChange:=@OnChangeAdminConfrmPwd;
			  AdminConfirmPasswordTextBox.OnKeyPress:=@EditAdminConfrmPwdPress;
			  Name:='AdminConfirmPassword';
   end;

			  AuthenticateMiddleMSgStaticText := TNewStaticText.Create(ThirdPage);
			  AuthenticateMiddleMSgStaticText.Parent := ThirdPage.Surface;
			  AuthenticateMiddleMSgStaticText.Left :=  ScaleY(0);
			  AuthenticateMiddleMSgStaticText.Font.Size := 8;
			  AuthenticateMiddleMSgStaticText.Top := ThirdPage.SurfaceWidth div 2 - ScaleX(90);
			  AuthenticateMiddleMSgStaticText.Caption := ExpandConstant('{cm:CM_45_WWCustomThirdMsgThirdPage}');


			  AuthenticateMiddleMSgSecondStaticText := TNewStaticText.Create(ThirdPage);
			  AuthenticateMiddleMSgSecondStaticText.Parent := ThirdPage.Surface;
			  AuthenticateMiddleMSgSecondStaticText.Left :=  ScaleY(0);
			  AuthenticateMiddleMSgSecondStaticText.Font.Size := 8;
			  AuthenticateMiddleMSgSecondStaticText.Top := ThirdPage.SurfaceWidth div 2 - ScaleX(75);
        GetAuthenticationMiddleMsg:=ExpandConstant('{cm:CM_46_WWCustomThirdMsgThirdPage}');
			  AuthenticateMiddleMSgSecondStaticText.Caption := GetAuthenticationMiddleMsg;


  Bevel := TBevel.Create(ThirdPage);
  with Bevel do
		  begin
			Parent := ThirdPage.Surface;
			Shape := bsFrame;
			Left := ScaleX(0);
			Top := ScaleY(156);
			Width := ScaleX(417);
			Height := ScaleY(80);
		  end;
		  Caption := TLabel.Create(ThirdPage);
		  with Caption do
begin
	    Parent := ThirdPage.Surface;
		Left := Bevel.Left + ScaleX(8);
		Top := Bevel.Top - ScaleY(6);
		Transparent := False;
		Caption := ExpandConstant('{cm:CM_47_WWCustomThirdMsgThirdPage}');

		ClientPasswordStaticText := TNewStaticText.Create(ThirdPage);
		ClientPasswordStaticText.Parent := ThirdPage.Surface;
		ClientPasswordStaticText.Left :=  ScaleY(20);
		ClientPasswordStaticText.Top := ThirdPage.SurfaceWidth div 2 - ScaleX(35);
		ClientPasswordStaticText.Caption := ExpandConstant('{cm:CM_48_WWCustomThirdMsgThirdPage}');

	    ClientPasswordTextBox := TPasswordEdit.Create(ThirdPage);
		ClientPasswordTextBox.Parent := ThirdPage.Surface;
		ClientPasswordTextBox.Top := ThirdPage.SurfaceWidth div 2 - ScaleX(35);
		ClientPasswordTextBox.Left := ScaleY(144);
        ClientPasswordTextBox.MaxLength:=12;
	    GetClientPassword := ClientPasswordTextBox.Text;
		Name:='ClientPassword';
		ClientPasswordTextBox.OnChange:=@OnChangeClientPwd;
		ClientPasswordTextBox.OnKeyPress:=@EditClientPwdPress;

	    ClientConfirmPasswordStaticText := TNewStaticText.Create(ThirdPage);
		ClientConfirmPasswordStaticText.Parent := ThirdPage.Surface;
		ClientConfirmPasswordStaticText.Left :=  ScaleY(20);
	    ClientConfirmPasswordStaticText.Top := ThirdPage.SurfaceWidth div 2 - ScaleX(5);
		ClientConfirmPasswordStaticText.Caption := ExpandConstant('{cm:CM_49_WWCustomThirdMsgThirdPage}');

		ClientConfirmPasswordTextBox := TPasswordEdit.Create(ThirdPage);
		ClientConfirmPasswordTextBox.Parent := ThirdPage.Surface;
		ClientConfirmPasswordTextBox.Top := ThirdPage.SurfaceWidth div 2 - ScaleX(5);
		ClientConfirmPasswordTextBox.Left := ScaleY(144);
        ClientConfirmPasswordTextBox.MaxLength:=12;
		GetClientConfirmPassword := ClientConfirmPasswordTextBox.Text;
		Name:='ClientConfirmPassword';
		ClientConfirmPasswordTextBox.OnChange:=@OnChangeClientConfrmPwd;
		ClientConfirmPasswordTextBox.OnKeyPress:=@EditClientConfrmPwdPress;

     with ThirdPage do
  begin
    OnNextButtonClick := @ValidateAdminAndClientPwd_NextButtonClick;
  end;
   end;


   FourthPage := CreateInputQueryPage(ThirdPage.ID,
    ExpandConstant('{cm:CM_50_WWCustomFirstMsgFourthPage}'),ExpandConstant('{cm:CM_51_WWCustomFirstMsgFourthPage}'),
    '');
   DotNetForm := CreateCustomForm();
   DotNetForm.ClientWidth := ScaleX(450);
   DotNetForm.ClientHeight := ScaleY(200);
   DotNetForm.Position := poDefault;
   DotNetForm.BorderStyle :=bsDialog;
   DotNetForm.BorderIcons:=[];
   DotNetForm.BorderStyle := bsNone;
   DotNetFramWrkMiddleStaticMsgText := TNewStaticText.Create(DotNetForm);
   DotNetFramWrkMiddleStaticMsgText.Parent := DotNetForm;
   DotNetFramWrkMiddleStaticMsgText.Left :=  ScaleY(30);
   DotNetFramWrkMiddleStaticMsgText.Font.Size := 8;
   DotNetFramWrkMiddleStaticMsgText.Top := DotNetForm.ClientWidth div 2-ScaleX(190);
   DotNetFramWrkMiddleStaticMsgText.Caption := ExpandConstant('{cm:CM_52_WWCustomDotNetShowMsgThirdPage}');
   DotNetFramWrkMiddleStaticMsgText.Font.Style := [fsBold];

   DotNetInstallProgressBar := TNewProgressBar.Create(DotNetForm);
   DotNetInstallProgressBar.Top := DotNetForm.ClientWidth div 2 - ScaleX(170);
   DotNetInstallProgressBar.Width := DotNetForm.ClientWidth;
   DotNetInstallProgressBar.Height := ScaleY(18);
   DotNetInstallProgressBar.Parent := DotNetForm;
   DotNetInstallProgressBar.Style := npbstMarquee;
   DotNetForm.CenterInsideControl(WizardForm, true);
   DotNetForm.Hide;

   SqlServerForm := CreateCustomForm();
   SqlServerForm.ClientWidth := ScaleX(450);
   SqlServerForm.ClientHeight := ScaleY(200);
   SqlServerForm.Position := poDefault;
   SqlServerForm.BorderStyle :=bsDialog;
   SqlServerForm.BorderIcons:=[];
   SqlServerForm.BorderStyle := bsNone;
   SqlServerMiddleStaticMsgText := TNewStaticText.Create(SqlServerForm);
   SqlServerMiddleStaticMsgText.Parent := SqlServerForm;
   SqlServerMiddleStaticMsgText.Left :=  ScaleY(50);
   SqlServerMiddleStaticMsgText.Font.Size := 8;
   SqlServerMiddleStaticMsgText.Top := SqlServerForm.ClientWidth div 2-ScaleX(190);
   SqlServerMiddleStaticMsgText.Caption := ExpandConstant('{cm:CM_53_WWCustomSqlServerShowMsgThirdPage}');
   SqlServerMiddleStaticMsgText.Font.Style := [fsBold];

   SqlServerInstallProgressBar := TNewProgressBar.Create(SqlServerForm);
   SqlServerInstallProgressBar.Top := SqlServerForm.ClientWidth div 2 - ScaleX(170);
   SqlServerInstallProgressBar.Width := SqlServerForm.ClientWidth;
   SqlServerInstallProgressBar.Height := ScaleY(18);
   SqlServerInstallProgressBar.Parent := SqlServerForm;
   SqlServerInstallProgressBar.Style := npbstMarquee;
   SqlServerForm.CenterInsideControl(WizardForm, true);
   SqlServerForm.Hide;

   CheckSqlandDotnetListBox := TNewListBox.Create(FourthPage);
   CheckSqlandDotnetListBox.Parent := FourthPage.Surface;
   CheckSqlandDotnetListBox.Width := FourthPage.SurfaceWidth;
   CheckSqlandDotnetListBox.Height := ScaleY(77);
   CheckSqlandDotnetListBox.Font.Size := 8;
   CheckSqlandDotnetListBox.Font.Style := [fsBold];
   CheckSqlandDotnetListBox.Top := FourthPage.SurfaceWidth div 2 -ScaleX(145);
   CheckSqlandDotnetListBox.Items.Add(ExpandConstant('{cm:CM_55_WWCustomDotNetfrmwrkShowMsgThirdPage}'));
   CheckSqlandDotnetListBox.Items.Add(ExpandConstant('{cm:CM_56_WWCustomSqlServerSoftwareInstallThirdPage}'));
   CheckSqlandDotnetListBox.Enabled := False;

   DotNetANDSqlServerSoftInstall := TNewStaticText.Create(FourthPage);
   DotNetANDSqlServerSoftInstall.Parent := FourthPage.Surface;
   DotNetANDSqlServerSoftInstall.Left :=  ScaleY(2);
   DotNetANDSqlServerSoftInstall.Font.Size := 8;
   DotNetANDSqlServerSoftInstall.Top := FourthPage.SurfaceWidth div 2 - ScaleX(175);
   GetFinalDotNetANDSqlServerSoftInstall:= ExpandConstant('{cm:CM_54_WWCustomListofSoftwareInstallMsgThirdPage}')+#13#10+ExpandConstant('{cm:CM_62_CustomClientPasswordEntrieNotSameFourthPage}');
   DotNetANDSqlServerSoftInstall.Caption := GetFinalDotNetANDSqlServerSoftInstall;
   DotNetANDSqlServerSoftInstall.Font.Style := [fsBold];
end;


function LoadValueFromWEBSERVERINFOXML(const AFileName, APath: string): string;
var
  XMLNode: Variant;
  XMLDocument: Variant;
begin
  Result := '';
  XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
  try
    XMLDocument.async := False;
    XMLDocument.load(AFileName);
    if (XMLDocument.parseError.errorCode <> 0) then
     begin
	 //MsgBox('The XML file could not be parsed. ' +
     //   XMLDocument.parseError.reason, mbError, MB_OK)
    Exit;
	end
	else
    begin
      XMLDocument.setProperty('SelectionLanguage', 'XPath');
      XMLNode := XMLDocument.selectSingleNode(APath);
      Result := XMLNode.text;
    end;
  except
        Exit;
		//MsgBox('An error occured!' + #13#10 + GetExceptionMessage, mbError, MB_OK);
  end;
end;

procedure SaveAttributeValueToXML(const AFileName, APath,AValue: string);
var
  XMLNode: Variant;
  XMLDocument: Variant;
begin
  XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
  try
    XMLDocument.async := False;
    XMLDocument.load(AFileName);
    if (XMLDocument.parseError.errorCode <> 0) then
	begin
	 //MsgBox('The XML file could not be parsed. ' +
        //XMLDocument.parseError.reason, mbError, MB_OK)
         Exit;
	end
   else
	begin                                                                      
      XMLDocument.setProperty('SelectionLanguage', 'XPath');
      XMLNode := XMLDocument.selectSingleNode(APath);
      XMLNode.text := AValue;
      XMLDocument.save(AFileName);
     end;
  except
    Exit;
	//MsgBox('An error occured!' + #13#10 + GetExceptionMessage, mbError, MB_OK);
	end;
end;


procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode: Integer;
  IniFileName: string;
 begin
    if(CurStep = ssInstall) then
    begin
    //lalit 2-3-2015 issue At the time of installation Cancel button not getting disabled.
   	WizardForm.CancelButton.Enabled:=False;
		ResultCode := GetOSVersion();
     if(ResultCode = 5 ) then
      begin
        ExtractTemporaryFile('{#FPSCANNER}');
        ExtractTemporaryFile('{#PPXPROC}');
        RenameFile(ExpandConstant('{tmp}\{#FPSCANNER}'), ExpandConstant('{app}\DRIVERS\{#FPSCANNER}')) ;
        RenameFile(ExpandConstant('{tmp}\{#PPXPROC}'), ExpandConstant('{app}\DRIVERS\{#PPXPROC}')) ;
      end;

     if (ResultCode = 10 ) then
      begin
       ExtractTemporaryFile('{#FPSCANNER}');
        RenameFile(ExpandConstant('{tmp}\{#FPSCANNER}'), ExpandConstant('{app}\DRIVERS\{#FPSCANNER}')) ;
      end;

      if not ((ResultCode = 10) or (ResultCode = 5)) then
      begin
       ExtractTemporaryFile('{#PPSECURE64}');
       ExtractTemporaryFile('{#FPSCANNER}');
        RenameFile(ExpandConstant('{tmp}\{#FPSCANNER}'), ExpandConstant('{app}\DRIVERS\{#FPSCANNER}')) ;
        RenameFile(ExpandConstant('{tmp}\{#PPSECURE64}'), ExpandConstant('{app}\DRIVERS\{#PPSECURE64}')) ;
      end;

		if(ResultCode = 5 ) then
		begin
			if not ( ResultCode = 0 ) then
			begin
        RegisterSetupWithDrivers() ;
				WizardForm.StatusLabel.Caption := 'Installing Microsoft C++ Redistributables...'
				ExtractTemporaryFile('{#REDESTRIBUTABLES}');
				if not Exec(AddQuotes(ExpandConstant('{tmp}\{#REDESTRIBUTABLES}')), ' /i /q /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
				MsgBox( ExpandConstant('{cm:CMWWInstallRedistriFailed}') + IntToStr(ResultCode), mbInformation, MB_OK);
				CloseAllApplication();
			end;
		end;    
    end;
   if(CurStep = ssPostInstall) then
   begin
	     IniFileName := ExpandConstant('{app}\WRDSETTINGS\EPSSETTINGS.ini');
	     SetIniString('WRDSETTINGS','ServerMchineIP',GetIpAddressDetails, IniFileName);
		 SetIniString('WRDSETTINGS','ServerMchineName',GetComputerNameString , IniFileName);
      //AddSupportNo();
      //Issue : 0000154 : Start installing the setup.Without clicking on finish restart/shutdown PC.
      //Now COMSRV & ALUSRV is not getting start & uninstallation is also not happening.
      //Resolved By: Nitin K.         
      SetSelectedLanguage(ExpandConstant('{language}') );
      InstallDriverService();
      StartDriverServiceLocal();
      //RemoveInnoUninstaller();
      //StartStartUpApplications(ExpandConstant('{app}'));
      //StartProductServices();
       // To Get MVersion
	   StartFLTDrivers4EmailScan();
      GetMVersion(HKEY_LOCAL_MACHINE ,'SOFTWARE\Wardwiz Antivirus');
      begin
              if (GetOSVersion() > 6) then
              begin
                WizardForm.StatusLabel.Caption := 'Configuring IIS, This might take a Several minutes....';
                ExtractTemporaryFile('CONFIG_IIS_FIRST.ps1');
                ExtractTemporaryFile('CONFIG_IIS_SECOND.ps1');
                Exec('powershell', ExpandConstant('-ExecutionPolicy RemoteSigned -file {tmp}\CONFIG_IIS_FIRST.ps1 '+GetHttpportNumber), '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
                Exec('powershell', ExpandConstant('-ExecutionPolicy RemoteSigned -file {tmp}\CONFIG_IIS_SECOND.ps1'), '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
              end
      end;  
    end;
  end;

procedure RemoveUnnecessaryDriversFile();
var
  ResultCode: Integer;
begin
     	ResultCode := GetOSVersion();

    if(ResultCode = 5 ) then
      begin
     if FileExists(ExpandConstant('{app}\DRIVERS\{#PPSECURE64}'))then
      DeleteFile(ExpandConstant('{app}\DRIVERS\{#PPSECURE64}'));
       end;

     if (ResultCode = 10 ) then
      begin
     if FileExists(ExpandConstant('{app}\DRIVERS\{#PPSECURE64}'))then
      DeleteFile(ExpandConstant('{app}\DRIVERS\{#PPSECURE64}'));

     if FileExists(ExpandConstant('{app}\DRIVERS\{#PPXPROC}'))then
      DeleteFile(ExpandConstant('{app}\DRIVERS\{#PPXPROC}'));
       end;

      if not ((ResultCode = 10) or (ResultCode = 5)) then
      begin
     if FileExists(ExpandConstant('{app}\DRIVERS\{#PPXPROC}'))then
      DeleteFile(ExpandConstant('{app}\DRIVERS\{#PPXPROC}'));
      end ;
end;
// lalit 2-3-2015 If I have With Clam setup and I install without clam setup
//then it does not delete old setup of With clam setup.

procedure ClamToNoClamCleanUp();
var
  RegKey: string;
begin

    RegKey := Format('%s', ['SOFTWARE\Wardwiz Antivirus']);
    RegKey := ExpandConstant(RegKey);
    if RegKeyExists(HKEY_LOCAL_MACHINE,RegKey)=True then
    begin
      if FileExists(ExpandConstant('{app}\WRDWIZSCANNER.EXE'))then
      DeleteFile(ExpandConstant('{app}\WRDWIZSCANNER.EXE'));

      if FileExists(ExpandConstant('{app}\LIBCLAMAV.DLL'))then
      DeleteFile(ExpandConstant('{app}\LIBCLAMAV.DLL'));


      if  FileOrDirExists(ExpandConstant('{app}\MICROSOFT.VC80.CRT'))  then
        DelTree(ExpandConstant('{app}\MICROSOFT.VC80.CRT'),true,true,true);

      if  FileOrDirExists(ExpandConstant('{app}\DB'))  then
        DelTree(ExpandConstant('{app}\DB'),true,true,true);

         // lalit 2-10-2015 dublicate entry in start menu
      if FileExists(ExpandConstant('{commondesktop}\WardWiz Antivirus.lnk'))then
       DeleteFile(ExpandConstant('{commondesktop}\WardWiz Antivirus.lnk'));

	   //Issue:New Logo implementation, delete old logo and copy new logo. Resolved by : Nitin K Date:4th Jan 2016
	    if FileExists(ExpandConstant('{userappdata}\Microsoft\Internet Explorer\Quick Launch\WardWiz Antivirus.lnk'))then
			DeleteFile(ExpandConstant('{userappdata}\Microsoft\Internet Explorer\Quick Launch\WardWiz Antivirus.lnk'));

	    if FileExists(ExpandConstant('{userappdata}\Microsoft\Internet Explorer\Quick Launch\WardWiz.lnk'))then
			DeleteFile(ExpandConstant('{userappdata}\Microsoft\Internet Explorer\Quick Launch\WardWiz.lnk'));

      if FileExists(ExpandConstant('{commondesktop}\WardWiz.lnk'))then
			DeleteFile(ExpandConstant('{commondesktop}\WardWiz.lnk'));

    end;
end;

//Issue: 0000216: Issue while installing the setup. &  On Reinstallation Restart Now message should be within Setup window and not as MessageBox
//Resolved By: Nitin K. Date: 28th April 2015
function NeedRestart(): Boolean;
begin
      Result := ResultForRestart;
end;

procedure RemoveInnoUninstaller();
begin

       if FileExists(ExpandConstant('{app}\unins000.exe'))then
        DeleteFile(ExpandConstant('{app}\unins000.exe'));

       if FileExists(ExpandConstant('{app}\unins000.dat'))then
        DeleteFile(ExpandConstant('{app}\unins000.dat'));

end;

function LicenseAgreement: Boolean;
var
  DefaultTop,
  DefaultLeft,
  DefaultHeight,
  DefaultBackTop,
  DefaultNextTop,
  DefaultCancelTop,
  DefaultBevelTop,
  DefaultOuterHeight: Integer;
  LicenseHeight: Integer;

  begin
  Result := True;
  LicenseHeight := 380;
  DefaultTop := WizardForm.Top;
  DefaultLeft := WizardForm.Left;
  DefaultHeight := WizardForm.Height;
  DefaultBackTop := WizardForm.BackButton.Top;
  DefaultNextTop := WizardForm.NextButton.Top;
  DefaultCancelTop := WizardForm.CancelButton.Top;
  DefaultBevelTop := WizardForm.Bevel.Top;
  DefaultOuterHeight := WizardForm.OuterNotebook.Height;

  WizardForm.InnerPage.Height := WizardForm.InnerPage.Height + (LicenseHeight - DefaultHeight);
  WizardForm.InnerNotebook.Height :=  WizardForm.InnerNotebook.Height + (LicenseHeight - DefaultHeight);
  WizardForm.LicensePage.Height := WizardForm.LicensePage.Height + (LicenseHeight - DefaultHeight);
  WizardForm.LicenseMemo.Height := WizardForm.LicenseMemo.Height + (LicenseHeight - DefaultHeight);
  WizardForm.LicenseNotAcceptedRadio.Top := WizardForm.LicenseNotAcceptedRadio.Top + (LicenseHeight - DefaultHeight);
  WizardForm.LicenseAcceptedRadio.Top := WizardForm.LicenseAcceptedRadio.Top + (LicenseHeight - DefaultHeight);

end;

function ShouldSkipPage(CurPage: Integer): Boolean;
begin
  if(CurPage=103) then
  begin
     if((IsAlredyDotNetInstalled=True)AND(IsSqlServerAlredyInstalled=True)) then
    begin
    Result := True;
    Exit;
    end
    else
      Exit;
    end;
end;

function NextButtonClick(CurPage: Integer): Boolean;
var
ProgPath:String;
RegKey: string;
CurrentPath: string;
bAddFailed : Boolean;
IniFileName: string;
GetIPBaseUrlOldString,GetIPBaseUrlNewString,GetXmlFormatIPAddress,GetIPBaseUrlString,GetServerNameOldString,GetServerNameNewString: string;
GetServerMachineIPOldString,GetServerMachineIPNewString,GetServerInfoXmlIPAddress,GetServerInfoXmlServerNameOldString,GetServerInfoXmlServerNameNewString: string;
//Issue No-24 While installing the same setup again it should be "Latest version of Wardwiz is already installed"
CurrentVersion:String;
begin
  Result := True;
   if(CurPage=103) then
   begin
    DotNetFrameworkIsNotInstalled;
    WizardForm.BackButton.Enabled:=False;
    WizardForm.NextButton.Enabled:=False;
    WizardForm.CancelButton.Enabled:=False;
    SQLFrameworkIsNotInstalled;
    end;
      if(CurPage=102) then
    begin
  AlredyDotNetFramrWrkInstalled;
                AlredySqlServerInstalled;
                if((IsAlredyDotNetInstalled=True)AND(IsSqlServerAlredyInstalled=True)) then
      begin
                 ShouldSkipPage(103);
                 Exit;
      end	       
              else
                Exit;
    end;
  if(CurPage=2) then
  begin
     CurrentPageID:=CurPage;
     GetCustomPageInfo();
  end;
  if (CurPage = 1) then
   begin
   //ResultForRestart := False;
   //if not Redraw then
   // begin
   // Result := LicenseAgreement;
   // Redraw := True;
   // end;

    if(Result = False) then
    begin
        ExitProcess(0);
    end;
   end
   else if (CurPage = 5) then
   begin
     CurrentVersion:= ExpandConstant('{#AppVer}');
	 //Issue No-24 While installing the same setup again it should be "Latest version of Wardwiz is already installed"
    // CurrentVersion := '{#SetupSetting("AppVersion")}';
      bAddFailed := false;
      if not SendAllStrings(ExpandConstant('{cm:CM_0_WWSetupDllAppRunningUnInstall}')) then
          begin
                bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_1_WWSetupDllAppRunningReInstall}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_2_WWSetupDllOutlookCloseInstall}')) then
          begin
                 bAddFailed := true;
         end;
      if not SendAllStrings(ExpandConstant('{cm:CM_3_WWSetupDllOutlookCloseUnInstall}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_4_WWSetupDllInstallPatches}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_5_WWSetupDllClose}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_6_WWSetupDllUnInstallContinue}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_7_WWSetupDllLatestInstalled}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_8_WWSetupDllLatestInstalled}')) then
          begin
                bAddFailed := true;
          end;
      if not SendAllStrings(ExpandConstant('{cm:CM_9_WWSetupDllCustomMsgBoxButtonYes}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStrings(ExpandConstant('{cm:CM_10_WWSetupDllCustomMsgBoxButtonYesToAll}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStrings(ExpandConstant('{cm:CM_11_WWSetupDllCustomMsgBoxButtonNo}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStrings(ExpandConstant('{cm:CM_12_WWSetupDllCustomMsgBoxButtonNoToAll}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStrings(ExpandConstant('{cm:CM_13_WWSetupDllCustomMsgBoxButtonCancel}')) then
          begin
                bAddFailed := true;
          end;
	  if (bAddFailed = true) then
        begin
                MsgBox( ExpandConstant('{cm:CMWWStringConstAddFailed}') , mbInformation, MB_OK)
                ExitProcess(0);
        end;

    Result := CheckForPreviousVersion('ELITE',CurrentVersion ,false);
    ResultForRestart := CheckNeedOfRestart();
    if(ResultForRestart = True)then
    begin
      ReStart := True;
    end;
    if(Result = False) then
    begin
        ExitProcess(0);
    end;
  end
  //Issue - Wardwiz AV is getting installed at multiple location.
  //Resolved By Nitin K. Date: 02nd - Feb - 2015
  else if (CurPage = 06)then
  begin
     RegKey := Format('%s', ['SOFTWARE\Wardwiz Antivirus']);
     RegKey := ExpandConstant(RegKey);
     if RegKeyExists(HKEY_LOCAL_MACHINE,RegKey) then
     begin
        RegQueryStringValue(HKEY_LOCAL_MACHINE, RegKey, 'AppFolder', ProgPath);
        CurrentPath := ExpandConstant('{app}\');
        if not ( ProgPath = '') then
        begin
          if not( ProgPath = CurrentPath ) then
          begin
              MsgBox( ExpandConstant('{cm:CMWWAlreadyInstalled1}') +'"'+ProgPath+'",'+ ExpandConstant('{cm:CMWWAlreadyInstalled2}') , mbConfirmation, MB_OK);
              ExitProcess(0);
          end;
        end;
     end;
  end
  else if CurPage = 9 then
    begin
      SetApplicationPath(ExpandConstant('{app}\'));
  end
  else if (CurPage = 10)then
  begin

  //issue .Keep that pop-up aside and click on "Install" again. One more pop-up will appear.
 // resolved by lalit kumawat 8-31-2015
   WizardForm.CancelButton.Enabled:=False;
  WizardForm.BackButton.Enabled:=False;
  WizardForm.NextButton.Enabled:=False;

  RegisterSetupWithDrivers();
  PauseProtectionDrivers();
  StopFltDrivers('wrdwizscanner');
  StopFltDrivers('wrdwizsecure64');

  Result := CloseAllApplication();

  WizardForm.CancelButton.Enabled:=True;
  WizardForm.BackButton.Enabled:=True;
  WizardForm.NextButton.Enabled:=True;
	// lalit 2-3-2015 If I have With Clam setup and I install without clam setup
  // then it does not delete old setup of With clam setup.

    ClamToNoClamCleanUp();
    WizardForm.CancelButton.Enabled:=False;
    if(Result = False) then
    begin
        WizardForm.CancelButton.Enabled:=true;
        MsgBox( ExpandConstant('{cm:CMWWCloseAllWWApp}') , mbInformation, MB_OK)
    end;
  end
  else if(CurPage = 14) then
  begin
  //Commented here because we are adding it in PostInstall section
  //SetSelectedLanguage(ExpandConstant('{language}') );
  PauseProtectionDrivers();
  StopFltDrivers('wrdwizscanner');
  StopFltDrivers('wrdwizsecure64');


    RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{078ABE62-583D-43e6-96D6-5D092883DC82}_is1',
      'QuietUninstallString', '"' + ExpandConstant('{app}') + '\WRDWIZUNINST.exe" /SILENT');

    RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{078ABE62-583D-43e6-96D6-5D092883DC82}_is1',
    'UninstallString', '"' + ExpandConstant('{app}') + '\WRDWIZUNINST.exe"');

  RemoveUnnecessaryDriversFile();
	RemoveInnoUninstaller();
  // Call Remove old Registry Procedure
  OldReg_Remover(HKEY_LOCAL_MACHINE,'SOFTWARE\Wardwiz Antivirus');
  StartEPSStartUpApplications(ExpandConstant('{app}'));
    IniFileName := ExpandConstant('{app}\WRDSETTINGS\EPSSETTINGS.ini');
	SetIniString('WRDSETTINGS','Name','DefaultPackge' , IniFileName);
    SetIniString('WRDSETTINGS','Language','1' , IniFileName);
	SetIniString('WRDSETTINGS','Antimalware','1' , IniFileName);
	SetIniString('WRDSETTINGS','EmailScan','1' , IniFileName);
	SetIniString('WRDSETTINGS','DataEncryption','1' , IniFileName);
	SetIniString('WRDSETTINGS','Registryoptimizer','1' , IniFileName);
	SetIniString('WRDSETTINGS','poweruser','1' , IniFileName);
	SetIniString('WRDSETTINGS','ExchangeProtection','0' , IniFileName);
	SetIniString('WRDSETTINGS','Relay','0' , IniFileName);
	SetIniString('WRDSETTINGS','Mode','1' , IniFileName);
	SetIniString('WRDSETTINGS','ScanBeforeInstalation','0' , IniFileName);
	SetIniString('WRDSETTINGS','_isUseCustomInstallationPath','0' , IniFileName);
	SetIniString('WRDSETTINGS','Path','NA' , IniFileName);
	SetIniString('WRDSETTINGS','_isSetPassword','1' , IniFileName);
	SetIniString('WRDSETTINGS','ConnectTo','0' , IniFileName);
	SetIniString('WRDSETTINGS','ServerMchineIP',GetIpAddressDetails, IniFileName);
	SetIniString('WRDSETTINGS','ServerMchineName',GetComputerNameString , IniFileName);
	SetIniString('WRDSETTINGS','Domain','Wardwizepsweb', IniFileName);
	SetIniString('WRDSETTINGS','HTTPPORT',GetHttpportNumber, IniFileName);
  SetIniBool('WRDSETTINGS', 'ISSSL', GetVisibleSSLPORT,IniFileName);
	SetIniString('WRDSETTINGS','SSLPORT',GetSslPortNumber, IniFileName);
  SetIniBool('WRDSETTINGS', 'ISPROXY', GetVisiblePROXYPORT,IniFileName);
  SetIniString('WRDSETTINGS','PROXYPORT',GetPortNumber,IniFileName);
	SetIniString('WRDSETTINGS','PROXY_SERVER',GetProxyServerNumber,IniFileName);
	SetIniString('WRDSETTINGS','Proxy_UserName',GetProxyUserName,IniFileName);

	GetServerMachineIPOldString:= LoadValueFromWEBSERVERINFOXML(ExpandConstant('{app}\Wardwizdev\WardWizEPS\PackageFile\Setup\SERVERINFO.XML'), '//DocumentElement/Package/ServerMchineIP');
	GetServerMachineIPNewString:=GetServerMachineIPOldString;
	GetServerInfoXmlIPAddress:=GetIpAddressDetails;
	SaveAttributeValueToXML(ExpandConstant('{app}\Wardwizdev\WardWizEPS\PackageFile\Setup\SERVERINFO.XML'), '//DocumentElement/Package/ServerMchineIP',GetServerInfoXmlIPAddress);
	GetServerInfoXmlServerNameOldString := LoadValueFromWEBSERVERINFOXML(ExpandConstant('{app}\Wardwizdev\WardWizEPS\PackageFile\Setup\SERVERINFO.XML'), '//DocumentElement/Package/ServerMchineName');
	GetServerInfoXmlServerNameNewString := GetComputerNameString;
	SaveAttributeValueToXML(ExpandConstant('{app}\Wardwizdev\WardWizEPS\PackageFile\Setup\SERVERINFO.XML'), '//DocumentElement/Package/ServerMchineName',GetServerInfoXmlServerNameNewString);
	GetIPBaseUrlOldString:= LoadValueFromWEBSERVERINFOXML(ExpandConstant('{app}\webserverinfo.XML'), '//DocumentElement/BaseUrl');
	GetIPBaseUrlNewString:=GetIPBaseUrlOldString;
	GetXmlFormatIPAddress:=GetIpAddressDetails;
    GetIPBaseUrlNewString:=ExpandConstant('http://'+Trim(GetXmlFormatIPAddress));
    GetIPBaseUrlNewString:=GetIPBaseUrlNewString+'/';
    GetIPBaseUrlString:=GetIPBaseUrlNewString;
	SaveAttributeValueToXML(ExpandConstant('{app}\webserverinfo.XML'), '//DocumentElement/BaseUrl',GetIPBaseUrlString);
	GetServerNameOldString := LoadValueFromWEBSERVERINFOXML(ExpandConstant('{app}\webserverinfo.XML'), '//DocumentElement/ServerName');
	GetServerNameNewString := GetServerNameOldString;
	GetServerNameNewString := GetComputerNameString+'\'+'WARDWIZ';
	SaveAttributeValueToXML(ExpandConstant('{app}\webserverinfo.XML'), '//DocumentElement/ServerName',GetServerNameNewString);
  StartFltDrivers('wrdwizscanner');
	StartFltDrivers('wrdwizsecure64');
  ResumeProtectionDrivers();
  StartEPSProductServices();

  end
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
case CurUninstallStep of
  usPostUninstall:
      begin
      if DirExists(ExpandConstant('{app}\Quarantine')) then begin
        if MsgBox( ExpandConstant('{cm:CMWWDeleteQuarantineFolder}') , mbConfirmation, MB_YESNO)= idYes then
          DelTree(ExpandConstant('{app}'), True, True, True);
          end
          else   DelTree(ExpandConstant('{app}'), True, True, True);
       end;
     usDone: // lalit 2-3-2015 in silent mode successful uninstallation messge
      begin
       if RegKeyExists(HKEY_CLASSES_ROOT,'WardWiz.PATH.1.10.RES')then
         begin
          RegDeleteKeyIncludingSubkeys(HKEY_CLASSES_ROOT,'WardWiz.PATH.1.10.RES');
         end;

       if RegKeyExists(HKEY_CLASSES_ROOT,'.WWIZ')then
         begin
          RegDeleteKeyIncludingSubkeys(HKEY_CLASSES_ROOT,'.WWIZ');
         end;

       if RegKeyExists(HKEY_CLASSES_ROOT,'.*.WWIZ')then
         begin
          RegDeleteKeyIncludingSubkeys(HKEY_CLASSES_ROOT,'.*.WWIZ');
         end;
	  // resolved by lalit kumawat, issue- After uninstallaion successfull message not coming.
       if not FileExists(ExpandConstant('{app}\WRDWIZSHELLEXT.DLL'))then
          begin
           MsgBox( ExpandConstant('{cm:CMWWRemoveSuccess}') , mbInformation, MB_OK)
          end
        else
         begin
            if( MsgBox( ExpandConstant('{cm:CMWWRestartReq}') , mbConfirmation, MB_YESNO) = IDYES ) then
              begin
               RenameFile(ExpandConstant('{tmp}\WRDWIZSETUPDLL.DLL'),ExpandConstant('{app}\WRDWIZSETUPDLL.DLL')) ;
               MoveFileEXtoRestartDlt(ExpandConstant('{app}\'))  ;
              RestartNow();
              end;
         end
         end;

   end;
end;

function GetUninstallerPath: string;
var
  RegKey: string;
begin
  Result := '';
  if IsWin64  then
  begin
    RegKey := Format('%s_is1', ['SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{{6F8638DF-98DF-4D11-85B0-7BB380EF03AB}']);
    RegKey := ExpandConstant(RegKey);
    if RegKeyExists(HKEY_LOCAL_MACHINE,RegKey) then
    begin
      if MsgBox( ExpandConstant('{cm:CMWWUninstallPrevVer}'),
      mbConfirmation, MB_YESNO) = IDYES then

    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, RegKey, 'UninstallString', Result) then
    RegQueryStringValue(HKEY_CURRENT_USER, RegKey, 'UninstallString', Result);

   end;
   end;
   if not IsWin64  then
    begin
    RegKey := Format('%s_is1', ['SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{{6F8638DF-98DF-4D11-85B0-7BB380EF03AB}']);
    RegKey := ExpandConstant(RegKey);
    if RegKeyExists(HKEY_LOCAL_MACHINE,RegKey) then
    begin
      if MsgBox( ExpandConstant('{cm:CMWWPrevVerInstalled}') ,
      mbConfirmation, MB_YESNO) = IDYES then

    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, RegKey, 'UninstallString', Result) then
    RegQueryStringValue(HKEY_CURRENT_USER, RegKey, 'UninstallString', Result);
     end ;
   end;
 end;

function InitializeSetup: Boolean;
var
  UninstPath: string;
  ResultCode: Integer;
  ICount : Integer;
  FileContent: AnsiString;
  Version: TWindowsVersion;  
begin
  for ICount := 1 to 6 do
  begin
    ExtractTemporaryFile('TurquoiseGray.vsf');
    if LoadStringFromFile(ExpandConstant('{tmp}\TurquoiseGray.vsf'),FileContent) then
	begin
		LoadVCLStyle(ExpandConstant('{tmp}\TurquoiseGray.vsf'));
		break;
    end;
  end;
	Redraw := false;
  ReStart := false;

	if SingleInstanceCheck() then
	begin
		MsgBox( ExpandConstant('{cm:CMWWAnotherInstanceRunning}') , mbError, MB_OK);
		ExitProcess(0);
	end;

	if not IsWin64 then
	begin
		MsgBox( ExpandConstant('{cm:CMWWPackgNotSupported}') , mbError, MB_OK);
		ExitProcess(0);
	end;

    // check for lower version of windows XP SP3 and windows server
  GetWindowsVersionEx(Version);
    if Version.NTPlatform and
       (Version.Major <= 5) and
       (Version.Minor < 1) and
       (Version.ServicePackMajor < 3) then
    begin
      MsgBox( ExpandConstant('{cm:CMWWOSNotSupported}'), mbError, MB_OK);
      Result := False;
      Exit;
    end;

	Result := True;
	UninstPath := RemoveQuotes(GetUninstallerPath);
	if UninstPath <> '' then
	begin
      begin
       Result := True;
       if not Exec(UninstPath, '', '', SW_SHOW, ewNoWait, ResultCode) then
          MsgBox(FmtMessage(SetupMessage(msgUninstallOpenError), [UninstPath]), mbError, MB_OK);
      end;
	end;
end;

procedure DeinitializeSetup();
begin
	UnLoadVCLStyles;
end;

function Date(param: string) : String;
begin
  result := GetDateTimeString('mm/dd/yyyy', '/', ':');
end;

function Time(param: string) : String;
begin
  result := GetDateTimeString('hh:nn:ss', '-', ':');
end;

procedure RemoveAppDataFiles();
var
 path: string;
begin
      path :=  GetEnv('ALLUSERSPROFILE')
       if FileExists(path+'\WardWiz Antivirus\WRDWIZUSERREG.DB')
       then
       begin
          RenameFile(path+'\WardWiz Antivirus\WRDWIZUSERREG.DB',path+'\WRDWIZUSERREG.DB') ;
          DelTree(path+'\WardWiz Antivirus\*', False, True, True);
           RenameFile(path+'\WRDWIZUSERREG.DB',path+'\WardWiz Antivirus\WRDWIZUSERREG.DB') ;
          end
        else
     DelTree(path+'\WardWiz Antivirus\*', False, True, True);
end;

//lalit 2-3-2015 custom uninstallaiton confirmation message box
function InitializeUninstall() : Boolean;
var
  ResultOfCloseAll: Boolean;
  bAddFailed:Boolean;
begin
 Result := false;
 ResultOfCloseAll := false;
 bAddFailed := false;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_0_WWSetupDllAppRunningUnInstall}')) then
          begin
                bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_1_WWSetupDllAppRunningReInstall}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_2_WWSetupDllOutlookCloseInstall}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_3_WWSetupDllOutlookCloseUnInstall}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_4_WWSetupDllInstallPatches}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_5_WWSetupDllClose}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_6_WWSetupDllUnInstallContinue}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_7_WWSetupDllLatestInstalled}')) then
          begin
                 bAddFailed := true;
          end;
      if not SendAllStringsuninstall(ExpandConstant('{cm:CM_8_WWSetupDllLatestInstalled}')) then
        begin
                bAddFailed := true;
          end;
	  if not SendAllStringsuninstall(ExpandConstant('{cm:CM_9_WWSetupDllCustomMsgBoxButtonYes}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStringsuninstall(ExpandConstant('{cm:CM_10_WWSetupDllCustomMsgBoxButtonYesToAll}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStringsuninstall(ExpandConstant('{cm:CM_11_WWSetupDllCustomMsgBoxButtonNo}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStringsuninstall(ExpandConstant('{cm:CM_12_WWSetupDllCustomMsgBoxButtonNoToAll}')) then
          begin
                bAddFailed := true;
          end;
       if not SendAllStringsuninstall(ExpandConstant('{cm:CM_13_WWSetupDllCustomMsgBoxButtonCancel}')) then
          begin
                bAddFailed := true;
          end;
      if (bAddFailed = true) then
        begin
                MsgBox( ExpandConstant('{cm:CMWWStringConstAddFailed}') , mbInformation, MB_OK)
                ExitProcess(0);
        end;
 Result :=  UninstallSilent();
 if not Result then
    Result := false;

 if  Result then
    begin
      Result := false;
          if MsgBox( ExpandConstant('{cm:CMWWRemoveAll}') , mbConfirmation, MB_YESNO)= idYes then
          Result := true;
    end;

  if Result then
        begin
            ResultOfCloseAll := CloseAllApplicationForUninstall(ExpandConstant('{app}\'));
            if(ResultOfCloseAll = true)then
            begin
              RenameFile(ExpandConstant('{app}\WRDWIZSETUPDLL.DLL'),ExpandConstant('{tmp}\WRDWIZSETUPDLL.DLL')) ;
              RemoveAppDataFiles();
              // UnloadDLL(ExpandConstant('{app}\WRDWIZSETUPDLL.DLL'));

              if(FileExists(ExpandConstant('{app}\WRDWIZSHELLEXT_OLD.DLL')))then
              begin
                UnloadDLL(ExpandConstant('{app}\WRDWIZSHELLEXT_OLD.DLL'));

                if(FileExists(ExpandConstant('{app}\WRDWIZSHELLEXT.DLL')))then
                begin
                    DeleteFile(ExpandConstant('{app}\WRDWIZSHELLEXT.DLL'));
                    RenameFile(ExpandConstant('{app}\WRDWIZSHELLEXT_OLD.DLL'),ExpandConstant('{app}\WRDWIZSHELLEXT.DLL'));
                end
                else
                  RenameFile(ExpandConstant('{app}\WRDWIZSHELLEXT_OLD.DLL'),ExpandConstant('{app}\WRDWIZSHELLEXT.DLL'));
              end
              else
                  if(FileExists(ExpandConstant('{app}\WRDWIZSHELLEXT.DLL')))then
                  begin
                      UnloadDLL(ExpandConstant('{app}\WRDWIZSHELLEXT.DLL'));
                  end;
              end;
         end;
         if(ResultOfCloseAll = False) then
         begin
           Result := false
           MsgBox( ExpandConstant('{cm:CMWWCloseAllForUninstall}'), mbInformation, MB_OK)
         end;
end;

procedure InitializeWizard;
  begin


end;   