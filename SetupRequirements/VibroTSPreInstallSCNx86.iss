; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "VIBRANIUM"
#define MyAppVersion "2.0.0.1"
#define MyAppPublisher "VIBRANIUM"
#define MyAppURL "http://www.vibranium.co.in/"
#define MyWardWizAppName "VIBRANIUM"
#define Utility "Utilities"
#define AppVer ReadIni("D:\vibowindev\ViboWinDev_1.1\WWBinary.ini", "ProductVersion", "ProductVer", "2.0.0.1")
#define REDESTRIBUTABLES "vcredist_x86.exe"
#define ResIconReg "Vibranium.PATH.1.10.RES"

#define ExecuteExeRegEntrySecParam  "%1"
#define ExecuteExeRegEntryThirdParam "-DEC "


#define PPSECURE64 "VBREGPROT.SYS"
#define PPXPROC "VBXPPROC.SYS"
#define FPSCANNER "VBFILEPROT.SYS"
#define WRDWIZPFPATH "Program Files"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{078ABE62-583D-43e6-96D6-5D092883DC82}
AppName={#MyAppName}
AppVersion={#AppVer}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputDir=.\Output
OutputBaseFilename=VibroTSPreScnX86
SetupIconFile=Logo\COMPANYLOGO.ICO
Compression=lzma2/ultra64
SolidCompression=true
;Varada Ikhar, Date:13th May-2015, Issue:000283: In control Panel the version no. should not be mentioned. It should be WardWiz Antivirus.
UninstallDisplayName={#MyWardWizAppName}
UninstallRestartComputer=false
UninstallDisplayIcon={app}\COMPANYLOGO.ICO
UsePreviousAppDir=yes
DisableProgramGroupPage=yes
WizardImageFile=SetupImages\setup_img.bmp
WizardSmallImageFile=SetupImages\logo.bmp
AllowCancelDuringInstall=yes
ShowLanguageDialog =no
UseSetupLdr =yes
VersionInfoVersion ={#AppVer}
AllowNetworkDrive =no
AllowUNCPath =no
AppendDefaultDirName =yes
DisableDirPage =yes
SetupLogging =yes

[Languages]
Name: english; MessagesFile: compiler:Default.isl; LicenseFile: Licence\Enligh-license.txt
;Name: german; MessagesFile: compiler:Languages\German.isl; LicenseFile: Licence\German-license.txt
;Name: bangla; MessagesFile: compiler:Languages\Bengali.islu; LicenseFile: Licence\Bangla-license.txt
;Name: Spanish; MessagesFile: compiler:Languages\Spanish.isl; LicenseFile: Licence\Enligh-license.txt
;Name: French; MessagesFile: compiler:Languages\French.isl; LicenseFile: Licence\Enligh-license.txt
;Name: Chinese; MessagesFile: compiler:Languages\Chinese.isl; LicenseFile: Licence\Enligh-license.txt

[CustomMessages]
;CMWWPackgNotSupported =Installation package is not supported for this OS.  Please download WardWiz 32-bit setup
;english.CMWWPackgNotSupported =Installation package is not supported for this OS.  Please download WardWiz 32-bit setup
;german.CMWWPackgNotSupported =Installationspaket wird für dieses Betriebssystem unterstützt. Bitte laden Sie WardWiz 32-Bit Setup

;CMWWAnotherInstanceRunning =Another instance of WardWiz Setup is already running.
;english.CMWWAnotherInstanceRunning =Another instance of WardWiz Setup is already running.
;german.CMWWAnotherInstanceRunning =Ein anderes Beispiel WardWiz -Setup bereits ausgeführt wird.

CM_14_WWSetupDllPREINSTSCN  =Initializing preinstallation scan, Please wait.
english.CM_14_WWSetupDllPREINSTSCN  =Initializing preinstallation scan, Please wait.
;german.CM_14_WWSetupDllPREINSTSCN  =Initialisierung der Vorinstallationssuche, Bitte warten..
;bangla.CM_14_WWSetupDllPREINSTSCN  =পূর্বনির্ধারণের স্ক্যান শুরু করা হচ্ছে, দয়া করে অপেক্ষা করুন।..

[LangOptions]
DialogFontSize=8
WelcomeFontName=Verdana
WelcomeFontSize=12
TitleFontName=Arial
TitleFontSize=29
CopyrightFontName=Arial
CopyrightFontSize=8
RightToLeft=no

[Dirs]
Name: {app}\LOG
Name: {commonappdata}\{#MyAppName}; attribs: hidden; Flags: uninsalwaysuninstall; Tasks: 
Name: {app}; Flags: uninsalwaysuninstall; Tasks: ; Languages: 
Name: {app}\QUARANTINE; Tasks: ; Languages: 

[Files]
Source: RequiredFiles\PROTECTION\32\{#FPSCANNER}; DestDir: {tmp}\DRIVERS; Flags: ignoreversion
Source: RequiredFiles\PROTECTION\32\{#PPSECURE64}; DestDir: {tmp}\DRIVERS; Flags: ignoreversion
Source: RequiredFiles\CPPRESTRIBUTABLES\{#REDESTRIBUTABLES}; Flags: dontcopy nocompression
Source: VCL Styles\VclStylesinno.dll; DestDir: {tmp}; Flags: dontcopy overwritereadonly
Source: VCL Styles\AmethystKamri.vsf; DestDir: {tmp}; Flags: dontcopy overwritereadonly
Source: ..\Release\Win32\Binaries\VBSETUPDLL.DLL; DestDir: {tmp}; 
Source: ..\Release\Win32\Binaries\VBSCANDLL.DLL; DestDir: {tmp}; 
Source: ..\Release\Win32\Binaries\VBPREINSTSCAN.EXE; DestDir: {tmp}; 
Source: ..\Release\Win32\Binaries\VBREPAIRDLL.DLL; DestDir: {tmp}; 
Source: ..\Release\Win32\Binaries\VBRKSCN.DLL; DestDir: {tmp}; 
Source: ..\Release\Win32\Binaries\VBRESOURCE.DLL; DestDir: {tmp}; 
Source: ..\Release\Win32\Binaries\VBHASH.DLL; DestDir: {tmp};
Source:..\Release\Win32\Binaries\VBHEUSCN.DLL; DestDir:{tmp}; 
Source: SETTINGS\ESSENTIALSETTING\PRODUCTSETTINGS.INI; DestDir: {tmp};  Flags:dontcopy onlyifdoesntexist
Source: SETTINGS\EXEXT.INI; DestDir: {app}\VBSETTING; Flags: ignoreversion overwritereadonly
Source: SETTINGS\UPDATESERVERS.INI;DestDir: {tmp};  Flags:onlyifdoesntexist
Source: SETTINGS\ENGLISH.INI;DestDir: {tmp};  Flags:onlyifdoesntexist 
;Source: SETTINGS\GERMAN.INI;DestDir: {tmp};  Flags:onlyifdoesntexist 
Source: SETTINGS\ENGLISHTIPS.txt;DestDir: {tmp}; Flags: ignoreversion 32bit overwritereadonly
;Source: SETTINGS\GERMANTIPS.TXT;DestDir: {tmp}; Flags: ignoreversion 32bit overwritereadonly
Source: Logo\COMPANYLOGO.ICO; DestDir: {tmp}; Flags: ignoreversion   overwritereadonly
;Source: RequiredFiles\WRDWIZSECURITYNEWS\WRDWIZSECURITYNEWS.TXT; DestDir: {tmp}; Flags: ignoreversion recursesubdirs createallsubdirs overwritereadonly
Source: ..\Release\Win32\Binaries\VBMD5SCN.DLL; DestDir: {tmp}; 
Source: RequiredFiles\SCITERDLL\32\SCITER32.DLL; DestDir: {tmp}; 
Source: ..\Release\Win32\Binaries\VBPOLYSCN.DLL; DestDir: {tmp};
Source: RequiredFiles\BDS\Win32\*; DestDir: {tmp}; Flags: dontcopy ignoreversion recursesubdirs createallsubdirs overwritereadonly 
Source: RequiredFiles\VBDB\*; DestDir: {tmp}\VBDB; Flags:dontcopy ignoreversion recursesubdirs createallsubdirs  overwritereadonly
Source: RequiredFiles\BDSENGINEFILES\x86\*; DestDir: {tmp}\PLUGINS; Flags: ignoreversion recursesubdirs createallsubdirs overwritereadonly
      
[Code]
var
PreInstallScanProgressBar: TNewProgressBar;
PreInstallScanForm: TSetupForm;
PreInstallScanMiddleStaticMsgText: TNewStaticText;

const
  MF_BYCOMMAND = $00000000;
  MF_BYPOSITION = $00000400;

type
  HMENU = THandle;

// Import the LoadVCLStyle function from VclStylesInno.DLL
procedure LoadVCLStyle(VClStyleFile: String); external 'LoadVCLStyleW@files:VclStylesInno.dll stdcall';
// Import the UnLoadVCLStyles function from VclStylesInno.DLL
procedure UnLoadVCLStyles; external 'UnLoadVCLStyles@files:VclStylesInno.dll stdcall';

function SetSelectedLanguage(const strlanguage:String): Boolean;
external 'SetSelectedLanguage@files:VBSETUPDLL.DLL cdecl setuponly';

function SetApplicationPath(const strAppPath:String): Boolean;
external 'SetApplicationPath@files:VBSETUPDLL.DLL cdecl setuponly';

function SingleInstanceCheck(): Boolean;
external 'SingleInstanceCheck@files:VBSETUPDLL.DLL cdecl setuponly';

function InstallService(path:string): Boolean;
external 'InstallService@files:VBSETUPDLL.DLL cdecl setuponly';

function RemoveService(): Boolean;
external 'RemoveService@files:VBSETUPDLL.DLL cdecl setuponly';

procedure ExitProcess(exitCode:integer);
external 'ExitProcess@kernel32.dll cdecl setuponly';

function InstallDriverService(): integer;
external 'InstallDriverService@files:VBSETUPDLL.DLL cdecl setuponly';

function StartDriverServiceLocal(): integer;
external 'StartDriverServiceLocal@files:VBSETUPDLL.DLL cdecl setuponly';

function RegisterSetupWithDrivers(): integer;
external 'RegisterSetupWithDrivers@files:VBSETUPDLL.DLL cdecl setuponly';

function ResumeProtectionDrivers(): integer;
external 'ResumeProtectionDrivers@files:VBSETUPDLL.DLL cdecl setuponly';

function PauseProtectionDrivers(): integer;
external 'PauseProtectionDrivers@files:VBSETUPDLL.DLL cdecl setuponly';

//lalit 2-3-2015 issue :-During uninstallation if I my UI is running and it asks for close UI but then if I try to cancel the Uninstallation it doesn’t happen
function CloseAllApplicationForUninstall(const strAppPath:String): Boolean;
external 'CloseAllApplicationForUninstall@{app}\VBSETUPDLL.DLL cdecl uninstallonly';

function GetSystemMenu(hWnd: HWND; bRevert: BOOL): HMENU;
external 'GetSystemMenu@user32.dll stdcall';

function DeleteMenu(hMenu: HMENU; uPosition, uFlags: UINT): BOOL;
external 'DeleteMenu@user32.dll stdcall';

function GetMenuItemCount(hMenu: HMENU): Integer;
external 'GetMenuItemCount@user32.dll stdcall';

function StartProductServices(): integer;
external 'StartProductServices@files:VBSETUPDLL.DLL cdecl setuponly';

function GetLastError: Cardinal;
  external 'GetLastError@kernel32.dll stdcall';
  
var Redraw : Boolean;
var ReStart : Boolean;

procedure WWIZDirectoryCopy(SourcePath, DestPath: string);
var
  FindRec: TFindRec;
  SourceFilePath: string;
  DestFilePath: string;
  Error: Cardinal;
begin
  if FindFirst(SourcePath + '\*.*', FindRec) then
  begin
    try
      repeat
        if (FindRec.Name <> '.') and (FindRec.Name <> '..') then
        begin
          SourceFilePath := SourcePath + '\' + FindRec.Name;
          DestFilePath := DestPath + '\' + FindRec.Name;
          if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0 then
          begin
            if FileCopy(SourceFilePath, DestFilePath, False) then
            begin
					Log(Format('File Copied: %s to %s', [SourceFilePath, DestFilePath]));
					DelayDeleteFile(SourceFilePath, 2);
					Log(Format('File Deleted: %s ', [SourceFilePath]));
            end
              else
            begin
				  Error := GetLastError;	
			      Log(Format('Copying "%s" to "%s" failed with code %d (0x%x) - %s', [SourceFilePath, DestFilePath, Error, Error, SysErrorMessage(Error)]));
            end;
          end
            else
          begin
            if DirExists(DestFilePath) or CreateDir(DestFilePath) then
            begin
              Log(Format('Created %s', [DestFilePath]));
              WWIZDirectoryCopy(SourceFilePath, DestFilePath);
            end
              else
            begin
              Log(Format('Failed to create %s', [DestFilePath]));
            end;
          end;
        end;
      until not FindNext(FindRec);
    finally
      FindClose(FindRec);
    end;
  end
    else
  begin
    Log(Format('Failed to list %s', [SourcePath]));
  end;
end;

function LauchPreInstallSCNDIALOG():Boolean;
var
 GetWRDWIZPRESCNMSG:string;
begin
 PreInstallScanForm:= CreateCustomForm();
   PreInstallScanForm.ClientWidth := ScaleX(450);
   PreInstallScanForm.ClientHeight := ScaleY(100);
   PreInstallScanForm.BorderStyle :=bsDialog;
   PreInstallScanForm.BorderIcons:=[];
   PreInstallScanMiddleStaticMsgText := TNewStaticText.Create(PreInstallScanForm);
   PreInstallScanMiddleStaticMsgText.Parent := PreInstallScanForm;
   PreInstallScanMiddleStaticMsgText.Left :=  ScaleY(75);
   PreInstallScanMiddleStaticMsgText.Font.Size := 8;
   PreInstallScanMiddleStaticMsgText.Top := PreInstallScanForm.ClientWidth div 2-ScaleX(195);
   GetWRDWIZPRESCNMSG:=ExpandConstant('{cm:CM_14_WWSetupDllPREINSTSCN}');
   PreInstallScanMiddleStaticMsgText.Caption :=GetWRDWIZPRESCNMSG;
   PreInstallScanMiddleStaticMsgText.Font.Style := [fsBold];
   
   PreInstallScanProgressBar:= TNewProgressBar.Create(PreInstallScanForm);
   PreInstallScanProgressBar.Top := PreInstallScanForm.ClientWidth div 2 - ScaleX(180);
   PreInstallScanProgressBar.Width := PreInstallScanForm.ClientWidth;
   PreInstallScanProgressBar.Height := ScaleY(18);
   PreInstallScanProgressBar.Parent := PreInstallScanForm;
   PreInstallScanProgressBar.Style := npbstMarquee;
  // PreInstallScanForm.CenterInsideControl(WizardForm, true);
   PreInstallScanForm.Hide;
end;
function LaunchPreInstallSCN():boolean;
var 
GetSettingsFolder,GetTempQuarantineFolderPath,GetTempFolderPREINSTSCANEXEPath:String;
InstallMsg,Resultcode:Integer;
GetSelectedLanguage,UnicodeStr,ProdSettigsIni:string;
GetprodSettngsFileData:AnsiString;
begin
        PreInstallScanForm.Show;
        PreInstallScanForm.Refresh;
		for InstallMsg := 0 to 50 do
		begin
			PreInstallScanForm.Refresh;
		end;
        ExtractTemporaryFile('VBHEUSCN.DLL');
        ExtractTemporaryFile('VBSCANDLL.DLL'); 
		ExtractTemporaryFile('VBPREINSTSCAN.EXE'); 
		ExtractTemporaryFile('VBREPAIRDLL.DLL'); 
		ExtractTemporaryFile('VBRKSCN.DLL'); 
		ExtractTemporaryFile('VBRESOURCE.DLL'); 
		ExtractTemporaryFile('VBHASH.DLL');
		ExtractTemporaryFile('VBMD5SCN.DLL');
		ExtractTemporaryFile('SCITER32.DLL'); 
		ExtractTemporaryFile('VBPOLYSCN.DLL');
    ExtractTemporaryFile('BDCORE.DLL'); 
		ExtractTemporaryFile('BDQUAR.DLL'); 
		ExtractTemporaryFile('BDSMARTDB.DLL');
		ExtractTemporaryFile('SCAN.DLL');
		ExtractTemporaryFile('TRUFOS.DLL');
		Resultcode:=ExtractTemporaryFiles('{tmp}\VBDB\*.*');
		Log(Format('[VBDB Files Count:%d]',[Resultcode]));
		InstallMsg:=ExtractTemporaryFiles('{tmp}\PLUGINS\*.*');
		Log(Format('[PLUGNIS Files Count:%d]',[InstallMsg]));
		PreInstallScanForm.Refresh;		
       GetSelectedLanguage:=ExpandConstant('{language}'); 
       if(GetSelectedLanguage='english') then
          begin
               ExtractTemporaryFile('PRODUCTSETTINGS.INI');
          end
          else
          if(GetSelectedLanguage='bangla') then
        begin
           ExtractTemporaryFile('PRODUCTSETTINGS.INI');
          ProdSettigsIni:= ExpandConstant('{tmp}\PRODUCTSETTINGS.INI');
          if LoadStringFromFile(ProdSettigsIni,GetprodSettngsFileData) then
          begin
              UnicodeStr := String(GetprodSettngsFileData);
              if StringChangeEx(UnicodeStr,'LanguageID =0','LanguageID =3', True) > 0 then
              begin
                SaveStringToFile(ProdSettigsIni, AnsiString(UnicodeStr), False);
              end
          end
      end
      else
     if(GetSelectedLanguage='german') then
        begin
           ExtractTemporaryFile('PRODUCTSETTINGS.INI');
          ProdSettigsIni:= ExpandConstant('{tmp}\PRODUCTSETTINGS.INI');
          if LoadStringFromFile(ProdSettigsIni,GetprodSettngsFileData) then
          begin
              UnicodeStr := String(GetprodSettngsFileData);
              if StringChangeEx(UnicodeStr,'LanguageID =0','LanguageID =2', True) > 0 then
              begin
                SaveStringToFile(ProdSettigsIni, AnsiString(UnicodeStr), False);
              end
          end
        end;
		PreInstallScanForm.Refresh;
		CreateDir(ExpandConstant('{tmp}\VBSETTING'));
    ExtractTemporaryFile('UPDATESERVERS.INI'); 
		ExtractTemporaryFile('ENGLISH.INI'); 
		//ExtractTemporaryFile('GERMAN.INI'); 
		ExtractTemporaryFile('ENGLISHTIPS.txt'); 
		//ExtractTemporaryFile('GERMANTIPS.TXT'); 
    GetSettingsFolder:=ExpandConstant('{tmp}\VBSETTING\');
    Exec(ExpandConstant('{cmd}'),Format('/C copy "%s" "%s"', [ExpandConstant('{tmp}\*.INI'),GetSettingsFolder]),'', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    Exec(ExpandConstant('{cmd}'),Format('/C del "%s"', [ExpandConstant('{tmp}\*.INI'),GetSettingsFolder]),'', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    Exec(ExpandConstant('{cmd}'),Format('/C copy "%s" "%s"', [ExpandConstant('{tmp}\ENGLISHTIPS.txt'),GetSettingsFolder]),'', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    DeleteFile(ExpandConstant('{tmp}\ENGLISHTIPS.txt'));
    //Exec(ExpandConstant('{cmd}'),Format('/C copy "%s" "%s"', [ExpandConstant('{tmp}\GERMANTIPS.TXT'),GetSettingsFolder]),'', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    //DeleteFile(ExpandConstant('{tmp}\GERMANTIPS.TXT'));
    PreInstallScanForm.Close;
    GetTempFolderPREINSTSCANEXEPath:=ExpandConstant('{tmp}\VBPREINSTSCAN.EXE'); 
    if ShellExec('',GetTempFolderPREINSTSCANEXEPath,'', '', SW_SHOW, ewWaitUntilTerminated, ResultCode)then
    begin
       GetTempQuarantineFolderPath:=ExpandConstant('{tmp}\QUARANTINE');
       if DirExists(GetTempQuarantineFolderPath) then
       begin
            Exit;
       end
       else
            Exit;  
       end;
    end;   

procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode: Integer;
begin
    if(CurStep = ssInstall) then
    begin
        //lalit 2-3-2015 issue At the time of installation Cancel button not getting disabled.
   	    WizardForm.CancelButton.Enabled:=False;
	//	ResultCode := GetOSVersion();
     if(ResultCode = 5 ) then
      begin
        ExtractTemporaryFile('{#FPSCANNER}');
        ExtractTemporaryFile('{#PPXPROC}');
        RenameFile(ExpandConstant('{tmp}\{#FPSCANNER}'), ExpandConstant('{app}\DRIVERS\{#FPSCANNER}')) ;
        RenameFile(ExpandConstant('{tmp}\{#PPXPROC}'), ExpandConstant('{app}\DRIVERS\{#PPXPROC}')) ;
      end;

     if (ResultCode = 10 ) then
      begin
       ExtractTemporaryFile('{#FPSCANNER}');
        RenameFile(ExpandConstant('{tmp}\{#FPSCANNER}'), ExpandConstant('{app}\DRIVERS\{#FPSCANNER}')) ;
      end;

      if not ((ResultCode = 10) or (ResultCode = 5)) then
      begin
       ExtractTemporaryFile('{#PPSECURE64}');
       ExtractTemporaryFile('{#FPSCANNER}');
        RenameFile(ExpandConstant('{tmp}\{#FPSCANNER}'), ExpandConstant('{app}\DRIVERS\{#FPSCANNER}')) ;
        RenameFile(ExpandConstant('{tmp}\{#PPSECURE64}'), ExpandConstant('{app}\DRIVERS\{#PPSECURE64}')) ;

      end;


		if(ResultCode = 5 ) then
		begin
			if not ( ResultCode = 0 ) then
			begin
				RegisterSetupWithDrivers();
				WizardForm.StatusLabel.Caption := 'Installing Microsoft C++ Redistributables...'
				ExtractTemporaryFile('{#REDESTRIBUTABLES}');
				//if not Exec(AddQuotes(ExpandConstant('{tmp}\{#REDESTRIBUTABLES}')), ' /i /q /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
				//MsgBox( ExpandConstant('{cm:CMWWInstallRedistriFailed}') + IntToStr(ResultCode), mbInformation, MB_OK);
				//CloseAllApplication();
			//end;
		end;
    end;
	 if(CurStep = ssPostInstall) then
   begin
      //AddSupportNo();
      //Issue : 0000154 : Start installing the setup.Without clicking on finish restart/shutdown PC.
      //Now COMSRV & ALUSRV is not getting start & uninstallation is also not happening.
      //Resolved By: Nitin K.
      SetSelectedLanguage(ExpandConstant('{language}') );
	  InstallDriverService();
	  StartDriverServiceLocal();
      //RemoveInnoUninstaller();
      //StartStartUpApplications(ExpandConstant('{app}'));
      StartProductServices();
       // To Get MVersion
   end;
end;
end;

function GetUninstallerPath: string;
var
  RegKey: string;
begin
  Result := '';
  if IsWin64  then
  begin
    RegKey := Format('%s_is1', ['SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{{6F8638DF-98DF-4D11-85B0-7BB380EF03AB}']);
    RegKey := ExpandConstant(RegKey);
    if RegKeyExists(HKEY_LOCAL_MACHINE,RegKey) then
    begin
      if MsgBox( ExpandConstant('{cm:CMWWUninstallPrevVer}'),
      mbConfirmation, MB_YESNO) = IDYES then

    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, RegKey, 'UninstallString', Result) then
    RegQueryStringValue(HKEY_CURRENT_USER, RegKey, 'UninstallString', Result);

   end;
   end;
   if not IsWin64  then
    begin
    RegKey := Format('%s_is1', ['SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{{6F8638DF-98DF-4D11-85B0-7BB380EF03AB}']);
    RegKey := ExpandConstant(RegKey);
    if RegKeyExists(HKEY_LOCAL_MACHINE,RegKey) then
    begin
      if MsgBox( ExpandConstant('{cm:CMWWPrevVerInstalled}') ,
      mbConfirmation, MB_YESNO) = IDYES then

    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, RegKey, 'UninstallString', Result) then
    RegQueryStringValue(HKEY_CURRENT_USER, RegKey, 'UninstallString', Result);
     end ;
   end;
 end;

function InitializeSetup: Boolean;
var
  UninstPath: string;
  ResultCode: Integer;
  ICount : Integer;
  FileContent: AnsiString;
  Version: TWindowsVersion;
begin
  for ICount := 1 to 6 do
  begin
    ExtractTemporaryFile('AmethystKamri.vsf');
    if LoadStringFromFile(ExpandConstant('{tmp}\AmethystKamri.vsf'),FileContent) then
	begin
		LoadVCLStyle(ExpandConstant('{tmp}\AmethystKamri.vsf'));
		break;
    end;
  end;
	Redraw := false;
  ReStart := false;

	  // check for lower version of windows XP SP3 and windows server
  GetWindowsVersionEx(Version);
  if Version.ProductType = VER_NT_SERVER then
    begin
        MsgBox( ExpandConstant('{cm:CMWWServerEditionNotSupported}'), mbError, MB_OK);
        Result := False;
        Exit;
    end;
    if Version.NTPlatform and
       (Version.Major <= 5) and
       (Version.Minor < 1) and
       (Version.ServicePackMajor < 3) then
    begin
      MsgBox( ExpandConstant('{cm:CMWWOSNotSupported}'), mbError, MB_OK);
      Result := False;
      Exit;
    end;

	Result := True;
	UninstPath := RemoveQuotes(GetUninstallerPath);
	if UninstPath <> '' then
	begin
      begin
       Result := True;
       if not Exec(UninstPath, '', '', SW_SHOW, ewNoWait, ResultCode) then
          MsgBox(FmtMessage(SetupMessage(msgUninstallOpenError), [UninstPath]), mbError, MB_OK);
      end;
	end;
end;

procedure DeinitializeSetup();
begin
	UnLoadVCLStyles;
end;

procedure InitializeWizard;
var
 GetWWizDBPath,GetWWizPLUGINSPath,GetTempQuarantineFolderPath:string;
begin
    PauseProtectionDrivers();
	  LauchPreInstallSCNDIALOG;
    LaunchPreInstallSCN;	
	  GetTempQuarantineFolderPath:=ExpandConstant('{tmp}\QUARANTINE');
    if DirExists(GetTempQuarantineFolderPath) then
    begin
        ExitProcess(0);
    end
    else
		GetWWizDBPath:=ExpandConstant('{sd}\')+ExpandConstant('{#WRDWIZPFPATH}')+'\VIBRANIUM\VBDB';
        ForceDirectories(ExpandConstant('{sd}\')+ExpandConstant('{#WRDWIZPFPATH}')+'\VIBRANIUM\VBDB');
		WWIZDirectoryCopy(ExpandConstant('{tmp}\VBDB'),GetWWizDBPath);
		GetWWizPLUGINSPath:=ExpandConstant('{sd}\')+ExpandConstant('{#WRDWIZPFPATH}')+'\VIBRANIUM\PLUGINS';
		ForceDirectories(ExpandConstant('{sd}\')+ExpandConstant('{#WRDWIZPFPATH}')+'\VIBRANIUM\PLUGINS');
		WWIZDirectoryCopy(ExpandConstant('{tmp}\PLUGINS'),GetWWizPLUGINSPath);
		DelTree(ExpandConstant('{tmp}'), True, True, True);
		UnloadDLL(ExpandConstant('{tmp}\VBSETUPDLL.DLL'));
		DeleteFile(ExpandConstant('{tmp}\VBSETUPDLL.DLL'));
		DeinitializeSetup;
	    UnloadDLL(ExpandConstant('{tmp}\VclStylesInno.dll'));
		DeleteFile(ExpandConstant('{tmp}\VclStylesInno.dll'));
		DelayDeleteFile(ExpandConstant('{tmp}\*.*'), 2);
		DelTree(ExpandConstant('{tmp}'), True, True, True);
	    ExitProcess(0);
end;



